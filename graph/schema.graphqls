# Types
type Game {
  id: ID!
  players: [Player!]!
  questionRounds: [QuestionRound!]!
  currentQuestionRound: Int!
  dealerId: ID!
}

type Player {
  id: ID!
  money: Int!
}

type QuestionRound {
  id: ID!
  question: Question
  guesses: [Guess!]!
  bettingRounds: [BettingRound!]!
}

type Question {
  id: ID!
  question: String!
  answer: Float!
  hints: [Hint!]!
}

type Guess {
  guess: Float!
  playerId: ID!
}

type BettingRound {
  id: ID!
  foldedPlayerIds: [ID!]!
  bets: [Bet!]!
  currentPlayerId: ID!
  lastRaisedPlayerId: ID!
}

type Bet {
  playerId: ID!
  amount: Int!
}

type Hint {
  hint: String!
}

# Queries
type Query {
  games: [Game!]!
  players(gameId: ID!): [Player!]!
}

# Mutations
input GuessInput {
  guess: Float!
  playerId: ID!
  questionRoundId: ID!
}

input BetInput {
  playerId: ID!
  amount: Int!
  bettingRoundId: ID!
}

type Mutation {
  createGame: Game!
  addPlayer(gameId: ID!): Player!
  guess(input: GuessInput!): Guess!
  placeBet(input: BetInput!): Bet!
}
