{"version":3,"sources":["components/Lobby/index.tsx","api/queries.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/index.tsx","components/Game/Hints/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/helpers/queryHelpers.ts","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/Results/index.tsx","components/Game/index.tsx","storage.ts","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","Lobby","history","useHistory","useMutation","createGame","loading","data","error","console","useEffect","push","id","handleCreateGame","a","className","onClick","GET_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirBets","players","currentBettingRound","remainingPlayers","filter","player","money","guesses","isPlayerDead","questionRound","amountInQuestionRound","br","hasFolded","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","Math","max","Object","values","foldedPlayerIds","includes","raise","placeBet","currentPlayer","Error","moneyOfPlayer","find","variables","input","gameId","min","isResultList","sort","p1","p2","splice","findIndex","moveAppPlayerToTop","previousQuestionRoundGuesses","revealPreviousAnswers","isOver","guess","playerGuess","g","map","i","name","isDead","isFolded","key","role","aria-label","styles","question","fontSize","title","previousQuestionRound","answer","noHints","totalQuestions","questions","style","borderTop","marginTop","paddingTop","currentHint","oldHint","hints","numberOfHints","slice","hint","children","isCollapseAble","shouldBeCollapsed","drawerProps","useState","isCollapsed","setIsCollapsed","Drawer","addGuessMutation","p","setGuess","canAddGuess","anchor","open","variant","value","onChange","e","parseFloat","target","disabled","type","placeholder","aria-describedby","addGuess","emojiRegex","createPlayer","setName","newName","match","substring","playerName","text","handleOnClick","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","onClose","round","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","total","playerShare","forEach","totalPot","playerPot","startGame","Pot","ActionButtons","backdrop","zIndex","color","props","setOpen","Backdrop","PlayerTable","GameComponent","undefined","setPlayerId","setGame","showResultList","setShowResultList","useParams","game_id","useLazyQuery","fetchPolicy","fetchGame","fetchGameData","fetchGameError","newPlayerData","addPlayerLoading","addPlayerError","startGameData","startGameLoading","startGameError","placeBetData","placeBetLoading","placeBetError","addGuessData","addGuessLoading","addGuessError","setInterval","storedPlayerId","localStorage","getItem","getPlayerIdFromStorage","newPlayerId","addPlayer","setItem","setPlayerIdToStorage","fontWeight","paddingBottom","Question","Hints","AnswerDrawer","Footer","NameInputDrawer","Results","PageNotFound","App","href","path","component","exact","Game","Boolean","window","location","hostname","client","ApolloClient","uri","process","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2ce71baa.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { Game } from \"../../interfaces\";\n\nconst CREATE_GAME_QUERY = gql`\n  mutation createGame {\n    createGame {\n      id\n    }\n  }\n`;\n\nfunction Lobby() {\n  const history = useHistory();\n  const [createGame, { loading, data, error }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY);\n  if (error) {\n    console.error(error);\n  }\n  useEffect(() => {\n    if (data && !loading) {\n      history.push(`/${data.createGame.id}`);\n    }\n  }, [history, data, loading]);\n  const handleCreateGame = async () => {\n    createGame();\n  };\n  return (\n    <>\n      <p className=\"mt-3\">Start a new game or open a link of an existing game.</p>\n      <button className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\" onClick={handleCreateGame}>\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n    </>\n  );\n}\n\nexport default Lobby;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n","import { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nconst calculateSpendingRoundSpendingForPlayer = (\n  playerId: Player[\"id\"],\n  questionRound?: QuestionRound\n) => {\n  return questionRound?.bettingRounds.reduce(\n    (sum, br) => calculateBettingRoundSpendingForPlayer(br, playerId),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirBets = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const remainingPlayers = players.filter(\n    (player) =>\n      currentBettingRound &&\n      (player.money > 0 ||\n        calculateBettingRoundSpendingForPlayer(currentBettingRound, player.id))\n  );\n  return currentQuestionRound.guesses.length === remainingPlayers.length;\n};\n\nexport const isPlayerDead = (\n  currentQuestionRound: QuestionRound,\n  player: Omit<Player, \"name\">\n) => {\n  if (player.money > 0) {\n    return false;\n  }\n  const amountInQuestionRound = calculateSpendingRoundSpendingForPlayer(\n    player.id,\n    currentQuestionRound\n  );\n  if (\n    amountInQuestionRound &&\n    amountInQuestionRound > 0 &&\n    !hasFolded(currentQuestionRound, player.id)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport { isPlayerDead, hasFolded } from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n} from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport interface PlayerTableProps {\n  players?: Player[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  currentQuestionRound?: QuestionRound;\n  game?: Game;\n  isResultList?: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) =>\n  players.splice(\n    0,\n    0,\n    players.splice(\n      players.findIndex(({ id }) => id === playerId),\n      1\n    )[0]\n  );\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  currentQuestionRound,\n  game,\n  isResultList,\n}: PlayerTableProps) => {\n  if (!players?.length || !playerId) {\n    return null;\n  }\n  if (isResultList) {\n    players = players.sort((p1, p2) => p2.money - p1.money);\n  } else {\n    moveAppPlayerToTop(players, playerId);\n  }\n\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  let previousQuestionRoundGuesses: { [key: string]: Guess[\"guess\"] };\n  if (game && revealPreviousAnswers) {\n    previousQuestionRoundGuesses = game.questionRounds[\n      game.questionRounds.length - (game.isOver ? 1 : 2)\n    ].guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n\n  const playerGuess = currentQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  )?.guess;\n  return (\n    <div>\n      {(players || []).map(({ id, money, name }, i) => {\n        const isDead =\n          currentQuestionRound &&\n          isPlayerDead(currentQuestionRound, { id, money });\n        const isFolded =\n          currentQuestionRound && hasFolded(currentQuestionRound, id);\n        return (\n          <div key={id} className=\"d-flex align-items-center pt-4 ml-4\">\n            <div\n              className={`avatar ${i === 0 ? \"lg\" : \"md\"} ${\n                (isDead || isFolded) && !isResultList ? \"dead\" : \"\"\n              }`}\n            >\n              <span>{name}</span>\n              {!isResultList &&\n                currentBettingRound?.currentPlayer.id === id && (\n                  <span className=\"turn\">{\">\"}</span>\n                )}\n              {isResultList && i === 0 && (\n                <span className=\"turn trophy\" role=\"img\" aria-label=\"trophy\">\n                  🏆\n                </span>\n              )}\n            </div>\n            <div>\n              <div\n                className={`money ${id === playerId ? \"\" : \"md\"} ${\n                  (isDead || isFolded) && !isResultList ? \"dead\" : \"\"\n                }`}\n              >\n                {!isResultList &&\n                  (revealPreviousAnswers ? (\n                    <span>{previousQuestionRoundGuesses[id]}</span>\n                  ) : (\n                    id === playerId && <span>{playerGuess}</span>\n                  ))}\n                <span role=\"img\" aria-label=\"money\">\n                  💰{money}\n                </span>\n              </div>\n            </div>\n            {isDead && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n}\n\nconst styles = {\n  question: {\n    fontSize: \"2em\",\n  },\n  title: {\n    fontSize: \"0.7em\",\n  },\n};\n\nexport default ({ game, currentQuestionRound, playerId }: QuestionProps) => {\n  // if the user has not yet placed a bet,\n  // show the result of the previous round if their is one\n  if (\n    game.isOver ||\n    (game.questionRounds.length > 1 &&\n      !currentQuestionRound.guesses.find(\n        (guess) => guess.playerId === playerId\n      ))\n  ) {\n    const previousQuestionRound =\n      game.questionRounds[game.questionRounds.length - (game.isOver ? 1 : 2)];\n    return (\n      <>\n        <p>{previousQuestionRound.question.question}</p>\n        <p>\n          Answer: <b>{previousQuestionRound.question.answer}</b>\n        </p>\n      </>\n    );\n  }\n\n  const noHints = currentQuestionRound.bettingRounds.length <= 1;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.6em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <span style={(noHints && styles.question) || {}}>\n        {currentQuestionRound.question.question}\n      </span>\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../interfaces\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.8em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.5em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  currentQuestionRound: QuestionRound;\n}\n\nexport default ({ currentQuestionRound }: HintsProps) => {\n  const hints = currentQuestionRound.question.hints;\n  const numberOfHints = currentQuestionRound.bettingRounds.length - 1;\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      {currentQuestionRound.question.hints\n        .slice(0, currentQuestionRound.bettingRounds.length - 1)\n        .map((hint, i) => (\n          <span\n            key={hint}\n            style={\n              numberOfHints === i + 1 ? styles.currentHint : styles.oldHint\n            }\n          >\n            {hint}\n          </span>\n        ))}\n    </div>\n  );\n};\n","import React, { ReactNode, useState } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  isCollapseAble: boolean;\n  shouldBeCollapsed?: boolean;\n  title: string;\n}\n\nexport default ({\n  children,\n  isCollapseAble,\n  shouldBeCollapsed,\n  title,\n  ...drawerProps\n}: QuestionProps) => {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  return (\n    <Drawer\n      {...{\n        className: `drawer ${\n          isCollapsed && shouldBeCollapsed ? \"collapsed\" : \"\"\n        }`,\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        {isCollapseAble ? (\n          <span id=\"newQuestion\" className=\"w-100\">\n            <button\n              onClick={() => {\n                setIsCollapsed(!isCollapsed);\n              }}\n            >\n              {title}\n            </button>\n          </span>\n        ) : (\n          <span id=\"newQuestion\">{title}</span>\n        )}\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\nimport { AddGuess, addGuess, isPlayerDead } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  const isDead = player && isPlayerDead(currentQuestionRound, player);\n  if (isDead) {\n    return null;\n  }\n  const [guess, setGuess] = useState<number>();\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  return (\n    <Drawer\n      title=\"New Question\"\n      isCollapseAble={true}\n      shouldBeCollapsed={canAddGuess}\n      anchor={\"bottom\"}\n      open={canAddGuess}\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={guess}\n            onChange={(e) => {\n              setGuess(parseFloat(e.target.value) || 0);\n            }}\n            disabled={!canAddGuess}\n            type=\"number\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Your answer\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={!canAddGuess || (!guess && guess !== 0)}\n              onClick={(e) => {\n                if (guess || guess === 0) {\n                  addGuess(addGuessMutation, game, guess, playerId);\n                }\n              }}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import { Player, Game, GuessInput } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: number,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      isCollapseAble={false}\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      isCollapseAble={false}\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirBets,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirBets(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n}: PotProps) => {\n  const [totalPot, playerPot] = currentQuestionRound.bettingRounds.reduce(\n    ([total, playerShare], br) => {\n      br.bets.forEach((bet) => {\n        total += bet.amount;\n        if (bet.playerId === playerId) {\n          playerShare += bet.amount;\n        }\n      });\n      return [total, playerShare];\n    },\n    [0, 0]\n  );\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport PlayerTable, { PlayerTableProps } from \"../PlayerTable\";\n\nconst styles = {\n  backdrop: {\n    zIndex: 1,\n    color: \"#fff\",\n  },\n};\n\ninterface ResultsProps extends PlayerTableProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default (props: ResultsProps) => {\n  const { open, setOpen } = props;\n  return (\n    <Backdrop\n      style={styles.backdrop}\n      open={open}\n      onClick={() => {\n        setOpen(false);\n      }}\n    >\n      <div className=\"d-flex flex-column align-items-center\">\n        <h1>Results</h1>\n        <PlayerTable {...{ ...props, isResultList: true }} />\n      </div>\n    </Backdrop>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport { getPlayerIdFromStorage, setPlayerIdToStorage } from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport Hints from \"./Hints\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport Results from \"./Results\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \"./helpers\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const [showResultList, setShowResultList] = useState(true);\n  const { game_id: gameId } = useParams<{ game_id: string }>();\n\n  const [\n    fetchGame,\n    { data: fetchGameData, error: fetchGameError },\n  ] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const [\n    createPlayer,\n    { data: newPlayerData, loading: addPlayerLoading, error: addPlayerError },\n  ] = useMutation<{ addPlayer: Player }>(CREATE_PLAYER);\n\n  const [\n    startGame,\n    { data: startGameData, loading: startGameLoading, error: startGameError },\n  ] = useMutation<{ startGame: Game }>(START_GAME);\n\n  const [\n    placeBet,\n    { data: placeBetData, loading: placeBetLoading, error: placeBetError },\n  ] = useMutation<{ placeBet: Game }>(PLACE_BET);\n\n  const [\n    addGuess,\n    { data: addGuessData, loading: addGuessLoading, error: addGuessError },\n  ] = useMutation<{ addGuess: Game }>(ADD_GUESS);\n\n  useEffect(() => {\n    setInterval(() => {\n      fetchGame({\n        variables: { gameId },\n      });\n    }, 500);\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n\n    setGame(\n      fetchGameData?.game ||\n        startGameData?.startGame ||\n        placeBetData?.placeBet ||\n        addGuessData?.addGuess\n    );\n  }, [\n    gameId,\n    playerId,\n    newPlayerData,\n    createPlayer,\n    fetchGameData,\n    startGameData,\n    placeBetData,\n    addGuessData,\n  ]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (\n    fetchGameError ||\n    addPlayerError ||\n    startGameError ||\n    placeBetError ||\n    addGuessError\n  ) {\n    console.error(\n      fetchGameError ||\n        addPlayerError ||\n        startGameError ||\n        placeBetError ||\n        addGuessError\n    );\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  return (\n    <>\n      {(addPlayerLoading ||\n        startGameLoading ||\n        placeBetLoading ||\n        addGuessLoading) && <p>Loading...</p>}\n      <div\n        className=\"d-flex flex-column mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        {currentQuestionRound && playerId && (\n          <div>\n            <Question\n              game={game}\n              currentQuestionRound={currentQuestionRound}\n              playerId={playerId}\n            />\n            <Hints currentQuestionRound={currentQuestionRound} />\n          </div>\n        )}\n        <PlayerTable\n          {...{\n            players: game?.players,\n            playerId,\n            currentQuestionRound,\n            currentBettingRound,\n            game,\n          }}\n        />\n        {game.isOver && (\n          <button\n            className=\"btn btn-primary mx-auto mt-5\"\n            onClick={() => setShowResultList(true)}\n          >\n            See results\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          game={game}\n          addGuessMutation={addGuess}\n          currentQuestionRound={currentQuestionRound}\n          playerId={playerId}\n        />\n      )}\n      <Footer\n        {...{\n          game,\n          currentQuestionRound,\n          currentBettingRound,\n          placeBet,\n          playerId,\n          startGame,\n        }}\n      />\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      {game.isOver && (\n        <Results\n          {...{\n            players: game?.players,\n            playerId,\n            currentQuestionRound,\n            currentBettingRound,\n            game,\n            open: showResultList,\n            setOpen: setShowResultList,\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport default GameComponent;\n","const PLAYER_ID_KEY = \"player_id\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container py-2\">\n      <a href=\"/\" id=\"title\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:game_id\" component={Game} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"http://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst client = new ApolloClient({\n  uri: `${SERVER_URL}/query`,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}