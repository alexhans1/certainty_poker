{"version":3,"sources":["api/queries.ts","interfaces.ts","api/errorHandler.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","components/Lobby/UploadModal/index.tsx","components/Lobby/index.tsx","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/Map/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/GuessMap/index.tsx","components/Game/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["QuestionTypes","CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","filter","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","Math","max","Object","values","hasPlayerFolded","foldedPlayerIds","includes","getRevealAnswer","questionRound","isOver","question","hints","getGuess","guess","questionType","NUMERICAL","numerical","GEO","geo","latitude","longitude","Error","raise","placeBet","currentBettingRound","currentPlayer","id","moneyOfPlayer","find","money","variables","input","gameId","min","addGuess","addGuessMutation","styles","card","maxHeight","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","useMutation","questions","onCompleted","push","undefined","onError","errorLogger","uploadQuestions","content","target","rel","href","onDrop","rows","map","row","type","numericalAnswer","answer","hint1","hint2","explanation","Boolean","file","inputElem","reason","config","header","addRemoveButton","removeButtonColor","className","value","onChange","e","placeholder","aria-label","required","autoFocus","q","key","h","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","style","Lobby","Size","useParams","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","setNames","createGame","errorHandler","loading","useLazyQuery","fetchPolicy","sets","useEffect","handleCreateGame","a","to","pathname","color","window","host","set","gridColumn","round","pow","metaKey","numberOfQuestions","setFingerprintToStorage","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","name","isFolded","gameIsOver","size","isDealer","isPlayerTurn","showPreviousQuestionRoundResults","lg","winningPlayerIds","usedQuestionRound","isSpectator","sort","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","winners","p","hasFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","revealGuess","isShowdown","Avatar","dealerId","md","role","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","handleSubmit","setGuess","parseFloat","onKeyUp","which","aria-describedby","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","markers","handleOnClick","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","label","Tooltip","direction","offset","permanent","Map","showNewQuestionRound","setShowNewQuestionRound","canAddGuess","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","anchor","variant","NumberInput","MapInput","getInput","emojiRegex","createPlayer","playerName","newName","match","text","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","gameHasStarted","setPlayerId","React","setOpen","removeItem","deletePlayerIdFromStorage","removePlayer","Dialog","DialogTitle","DialogActions","playerGuess","g","mapMarkers","pId","GameComponent","setGame","gqlErr","setGqlErr","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","gameUpdated","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","playerGuessInCurrentQuestionRound","hasPlayerPlacedGuessInCurrentQuestionRound","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","GuessMap","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","LeaveGameButton","PageNotFound","App","path","component","exact","Game","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e0646eea.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n}\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n  Answer,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) =>\n  questionRound.isOver ||\n  questionRound.question.hints.length + 1 < questionRound.bettingRounds.length;\n\nexport const getGuess = (guess: Answer, questionType?: QuestionTypes) => {\n  if (!guess) return;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return guess.numerical;\n    case QuestionTypes.GEO:\n      return `[${guess.geo?.latitude}, ${guess.geo?.longitude}]`;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { getGuess } from \"../../Game/helpers\";\n\nconst styles = {\n  card: {\n    maxHeight: \"95vh\",\n  },\n};\n\ninterface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number;\n  latitude?: number;\n  longitude?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets, setSelectedSets }: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: errorLogger,\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(\n      rows.map((row) => {\n        const {\n          question,\n          type,\n          answer: numericalAnswer,\n          latitude,\n          longitude,\n          hint1,\n          hint2,\n          explanation,\n        } = row.data;\n        const hints = [hint1, hint2].filter(Boolean) as string[];\n        const answer: Answer = {};\n        if (numericalAnswer || numericalAnswer === 0) {\n          answer.numerical = numericalAnswer;\n        } else if (\n          (latitude || latitude === 0) &&\n          (longitude || longitude === 0)\n        ) {\n          answer.geo = { latitude, longitude };\n        }\n        return {\n          question,\n          type,\n          answer,\n          hints,\n          explanation,\n        };\n      })\n    );\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p>\n        An example of the file format can be found{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-3\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n      </div>\n      <h3>Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          <p>\n            Answer: <b>{getGuess(q.answer, q.type)}</b>\n          </p>\n          {q.hints?.length && (\n            <p>\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p>\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\" style={styles.card}>\n        <div className=\"card-body text-dark overflow-auto\">\n          <h3>Upload a CSV file with custom questions</h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport { Game, Set } from \"../../interfaces\";\nimport { CREATE_GAME_QUERY, GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport UploadModal from \"./UploadModal\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <p className=\"mt-3\">\n          Start by selecting one or more sets of trivia questions or upload your\n          own{\" \"}\n          <button\n            className=\"btn btn-link p-0\"\n            onClick={() => {\n              setIsUploadModalOpen(true);\n            }}\n          >\n            here ⤴\n          </button>\n          .\n        </p>\n      )}\n      <div className=\"set-container my-4\">\n        {sets?.sets.map((set) => (\n          <span\n            key={set.setName}\n            className={`set badge border-light ${\n              selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n            } ${setName ? \"mr-auto\" : \"\"}`}\n            style={{\n              gridColumn: `span ${Math.round(\n                Math.pow(set.setName.length, 0.35)\n              )}`,\n            }}\n            onClick={(e) => {\n              if (setName) {\n                return;\n              }\n              if (e.metaKey) {\n                if (selectedSets?.includes(set.setName)) {\n                  setSelectedSets(\n                    selectedSets.filter((setName) => set.setName !== setName)\n                  );\n                } else {\n                  setSelectedSets([set.setName, ...selectedSets]);\n                }\n              } else {\n                setSelectedSets([set.setName]);\n              }\n            }}\n          >\n            {set.setName} ({set.numberOfQuestions})\n          </span>\n        ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </>\n  );\n}\n\nexport default Lobby;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface Props {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  showPreviousQuestionRoundResults: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n  showPreviousQuestionRoundResults,\n}: Props) => {\n  const isPlayerTurn =\n    !showPreviousQuestionRoundResults &&\n    !gameIsOver &&\n    currentBettingRound?.currentPlayer.id === id;\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span className={isPlayerTurn && size === Size.lg ? \"tada\" : \"\"}>\n        {name}\n      </span>\n      {isPlayerTurn && <span className=\"turn\">{\">\"}</span>}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n  getGuess,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  game: Game;\n  isSpectator: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  game,\n  isSpectator,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n  const questionType = usedQuestionRound?.question.type;\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n        const revealGuess =\n          isSpectator ||\n          (!!usedQuestionRound?.isOver &&\n            usedQuestionRound?.isShowdown &&\n            !hasFolded);\n        const guess = guesses && getGuess(guesses[id], questionType);\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pb-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n                showPreviousQuestionRoundResults: !!usedQuestionRound?.isOver,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {questionType === QuestionTypes.NUMERICAL &&\n                (revealGuess ? (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡 {guess}\n                  </span>\n                ) : (\n                  guesses && (\n                    <span role=\"img\" aria-label=\"answer\">\n                      💡{\" \"}\n                      <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                        {!guess && guess !== 0\n                          ? null\n                          : id === playerId\n                          ? guess\n                          : 432}\n                      </span>\n                    </span>\n                  )\n                ))}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (usedQuestionRound?.isOver && !game.isOver\n                      ? bettingRoundSpending\n                      : 0)}\n                </span>\n                {!usedQuestionRound?.isOver && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {usedQuestionRound?.isOver && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getGuess, getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.bettingRounds.length <= 1 && !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div className=\"mb-4\">\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {usedQuestionRound.question.type !== QuestionTypes.GEO &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                {getGuess(\n                  usedQuestionRound.question.answer,\n                  usedQuestionRound.question.type\n                )}\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport L, {\n  MapContainer,\n  TileLayer,\n  Marker,\n  useMapEvents,\n  Tooltip,\n} from \"react-leaflet\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n}\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position === null ? null : <Marker position={position} />;\n}\n\nexport default ({ markers, handleOnClick }: Props) => {\n  return (\n    <MapContainer\n      center={[0, 0]}\n      zoom={1}\n      scrollWheelZoom={true}\n      className=\"mb-5\"\n    >\n      <TileLayer\n        attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n      />\n      {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n      {markers?.length &&\n        markers.map(({ position, label }) => (\n          <Marker position={[position.latitude, position.longitude]}>\n            {label && (\n              <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                {label}\n              </Tooltip>\n            )}\n          </Marker>\n        ))}\n    </MapContainer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          guess && handleSubmit(guess);\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport MapInput from \"./MapInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  if (player?.isDead) {\n    return null;\n  }\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        playerId\n      );\n      setShowNewQuestionRound(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, playerId);\n    setShowNewQuestionRound(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        id=\"leave-game\"\n        className=\"btn btn-link btn-lg\"\n        onClick={handleClickOpen}\n      >\n        <ExitToAppOutlinedIcon />\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>\n            Are you sure?\n            {gameHasStarted && (\n              <p>If you leave the game, you cannot join again later.</p>\n            )}\n          </DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              Leave Game\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  )?.guess.geo;\n\n  let mapMarkers: Marker[] = playerGuess\n    ? [{ position: playerGuess, label: \"You\" }]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({ position: guess.geo, label });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n    });\n  }\n\n  return <Map markers={mapMarkers} />;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport GuessMap from \"./GuessMap\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\n\nimport \"./styles.scss\";\nimport errorLogger from \"../../api/errorHandler\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(true);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      setGame(subscriptionData.data?.gameUpdated);\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <>\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        <div>\n          {usedQuestionRound && (\n            <Question\n              {...{\n                game,\n                usedQuestionRound,\n                playerId,\n              }}\n            />\n          )}\n          <GuessMap\n            {...{\n              usedQuestionRound,\n              isSpectator,\n              playerId,\n              players: game.players,\n            }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound,\n              currentBettingRound,\n              isSpectator,\n              game,\n            }}\n          />\n        </div>\n        {!showNewQuestionRound &&\n          !hasPlayerPlacedGuessInCurrentQuestionRound &&\n          !isSpectator && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto mt-5\"\n              onClick={() => {\n                setShowNewQuestionRound(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && !isSpectator && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      {!gameHasStarted && (\n        <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}