{"version":3,"sources":["assets/turn-notification.mp3","assets/turn-alert.wav","api/queries.ts","interfaces.ts","api/errorHandler.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","assets/countryCodes.ts","components/Lobby/UploadModal/index.tsx","components/Lobby/UploadModal/processCsvData.ts","components/Lobby/index.tsx","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/Map/index.tsx","components/Game/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/MultipleChoiceOptions/index.tsx","components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/GuessMap/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["module","exports","QuestionTypes","CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","filter","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","Math","max","Object","values","hasPlayerFolded","foldedPlayerIds","includes","getRevealAnswer","questionRound","isOver","question","type","MULTIPLE_CHOICE","hints","getGuess","guess","questionType","alternatives","NUMERICAL","numerical","GEO","geo","latitude","longitude","Error","raise","placeBet","currentBettingRound","currentPlayer","id","moneyOfPlayer","find","money","variables","input","gameId","min","addGuess","addGuessMutation","countryListAlpha2","GB","FR","ES","CN","DE","ZA","AL","DZ","SA","AM","BD","BG","KH","HR","CZ","DK","NL","EE","FI","GR","IL","HU","IN","IT","JP","KR","LV","LT","MY","MN","NO","PL","BR","RO","RU","RS","SK","SI","SE","TH","TR","VN","styles","card","maxHeight","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","language","setLanguage","useMutation","questions","onCompleted","push","undefined","onError","errorLogger","uploadQuestions","content","target","rel","href","onDrop","rows","map","row","csvAnswer","answer","hint1","hint2","explanation","multiple_choice_alternative1","multiple_choice_alternative2","multiple_choice_alternative3","Boolean","processCsvData","file","inputElem","reason","config","header","addRemoveButton","removeButtonColor","className","value","onChange","e","placeholder","aria-label","required","autoFocus","selected","keys","countryCodes","code","countryCodeToFlagEmoji","q","key","h","alt","i","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","style","Lobby","Size","useParams","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","shownLanguage","setShownLanguage","setNames","createGame","errorHandler","loading","useLazyQuery","fetchPolicy","sets","useEffect","handleCreateGame","a","languages","uniqueLanguages","s","sort","b","parseInt","to","pathname","color","window","host","cursor","set","gridColumn","round","pow","metaKey","numberOfQuestions","setFingerprintToStorage","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","name","isFolded","gameIsOver","size","isDealer","isPlayerTurn","showPreviousQuestionRoundResults","lg","winningPlayerIds","usedQuestionRound","isSpectator","p1","p2","forEach","rank","players_","splice","findIndex","moveAppPlayerToTop","winners","p","hasFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","revealGuess","isShowdown","Avatar","dealerId","md","role","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","handleSubmit","setGuess","parseFloat","onKeyUp","which","aria-describedby","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","soundInterval","markers","handleOnClick","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","label","Tooltip","direction","offset","permanent","Map","handleClick","active","hiddenAlternatives","revealAnswer","buttonClassName","showAnswerDrawer","setShowAnswerDrawer","hasPlayerPlacedGuessInCurrentQuestionRound","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","anchor","variant","NumberInput","MapInput","MultipleChoiceInput","getInput","emojiRegex","createPlayer","playerName","newName","match","text","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","gameHasStarted","setPlayerId","React","setOpen","removeItem","deletePlayerIdFromStorage","removePlayer","Dialog","DialogTitle","DialogActions","playerGuess","g","mapMarkers","pId","GameComponent","setGame","showNewQuestionRoundForSpectator","setShowNewQuestionRoundForSpectator","gqlErr","setGqlErr","useSound","require","playNotification","playAlert","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","clearInterval","gameUpdated","cqr","cbr","allPlayersPlacedTheirBet","navigator","vibrate","setInterval","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","GuessMap","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","LeaveGameButton","PageNotFound","App","path","component","exact","Game","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.389c74d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/turn-notification.15b0efd7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/turn-alert.3a60f09f.wav\";","import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n    $language: String!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n      language: $language\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n      language\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  alternatives?: [string, string, string, string];\n  hiddenAlternatives?: string[];\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n  language: string;\n}\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n  Answer,\n  Question,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) => {\n  if (questionRound.isOver) {\n    return true;\n  }\n  if (questionRound.question.type === QuestionTypes.MULTIPLE_CHOICE) {\n    return questionRound.bettingRounds.length >= 4;\n  }\n  return (\n    questionRound.question.hints.length + 1 < questionRound.bettingRounds.length\n  );\n};\n\nexport const getGuess = (\n  guess: Answer,\n  questionType?: QuestionTypes,\n  alternatives?: Question[\"alternatives\"]\n) => {\n  if (!guess) return;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return guess.numerical;\n    case QuestionTypes.GEO:\n      return `[${guess.geo?.latitude}, ${guess.geo?.longitude}]`;\n    case QuestionTypes.MULTIPLE_CHOICE:\n      if (alternatives?.length !== 4) {\n        throw new Error(\"missing alternatives for multiple choice question\");\n      }\n      return alternatives[guess.numerical ?? -1];\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","const countryListAlpha2 = {\n  GB: \"English\",\n  FR: \"French\",\n  ES: \"Spainish\",\n  CN: \"Chinese\",\n  DE: \"German\",\n  ZA: \"Africaans\",\n  AL: \"Albanian\",\n  DZ: \"Algerian\",\n  SA: \"Arab\",\n  AM: \"Armenian\",\n  BD: \"Bangladeshi\",\n  BG: \"Bulgarian\",\n  KH: \"Cambodian\",\n  HR: \"Croatian\",\n  CZ: \"Czech\",\n  DK: \"Danish\",\n  NL: \"Dutch\",\n  EE: \"Estonian\",\n  FI: \"Finnish\",\n  GR: \"Greek\",\n  IL: \"Hebrew\",\n  HU: \"Hungarian\",\n  IN: \"Indian\",\n  IT: \"Italian\",\n  JP: \"Japanese\",\n  KR: \"Korean\",\n  LV: \"Latvian\",\n  LT: \"Lithuanian\",\n  MY: \"Malaysian\",\n  MN: \"Mongolian\",\n  NO: \"Norwegian\",\n  PL: \"Polish\",\n  BR: \"Portuguese\",\n  RO: \"Romanian\",\n  RU: \"Russian\",\n  RS: \"Serbian\",\n  SK: \"Slovakian\",\n  SI: \"Slovenian\",\n  SE: \"Swedish\",\n  TH: \"Thai\",\n  TR: \"Turkish\",\n  VN: \"Vietnamese\",\n};\n\nexport default countryListAlpha2;\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Question, QuestionTypes } from \"../../../interfaces\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { getGuess } from \"../../Game/helpers\";\nimport countryCodes from \"../../../assets/countryCodes\";\nimport processCsvData from \"./processCsvData\";\n\nconst styles = {\n  card: {\n    maxHeight: \"95vh\",\n  },\n};\n\nexport interface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number | string;\n  latitude?: number;\n  longitude?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n  multiple_choice_alternative1?: string;\n  multiple_choice_alternative2?: string;\n  multiple_choice_alternative3?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets, setSelectedSets }: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n  const [language, setLanguage] = useState<string>();\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n      language,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: errorLogger,\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(processCsvData(rows));\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p>\n        An example of the file format can be found{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-2\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"input-group mb-3\">\n        <select\n          className=\"custom-select\"\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          <option selected>Language...</option>\n          {Object.keys(countryCodes).map((code) => (\n            <option value={code}>\n              {countryCodeToFlagEmoji(code)}{\" \"}\n              {countryCodes[code as keyof typeof countryCodes]}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h3>Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          <p>\n            Answer: <b>{getGuess(q.answer, q.type, q.alternatives)}</b>\n          </p>\n          {!!q.hints?.length && (\n            <p>\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {!!q.alternatives?.length && (\n            <p>\n              Alternatives:{\" \"}\n              {q.alternatives.map((alt, i) => (\n                <>\n                  <br />\n                  <span key={alt}>\n                    <b className={i === 0 ? \"text-success\" : \"\"}>{alt}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p>\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\" style={styles.card}>\n        <div className=\"card-body text-dark overflow-auto\">\n          <h3>Upload a CSV file with custom questions</h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport { CSVDataRow } from \".\";\n\nexport default (rows: { data: CSVDataRow }[]): Omit<Question, \"id\">[] => {\n  return rows.map((row) => {\n    const {\n      question,\n      type,\n      answer: csvAnswer,\n      latitude,\n      longitude,\n      hint1,\n      hint2,\n      explanation,\n      multiple_choice_alternative1,\n      multiple_choice_alternative2,\n      multiple_choice_alternative3,\n    } = row.data;\n    const hints = [hint1, hint2].filter(Boolean) as string[];\n    const answer: Answer = {};\n    let alternatives: Question[\"alternatives\"];\n    switch (type) {\n      case QuestionTypes.NUMERICAL:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.GEO:\n        answer.geo = {\n          latitude: latitude as number,\n          longitude: longitude as number,\n        };\n        break;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        answer.numerical = 0;\n        alternatives = [\n          csvAnswer as string,\n          multiple_choice_alternative1 as string,\n          multiple_choice_alternative2 as string,\n          multiple_choice_alternative3 as string,\n        ];\n        break;\n      default:\n        throw new Error(\"invalid question type\");\n    }\n    return {\n      question,\n      type,\n      answer,\n      hints,\n      explanation,\n      alternatives,\n    };\n  });\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { Game, Set } from \"../../interfaces\";\nimport { CREATE_GAME_QUERY, GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport UploadModal from \"./UploadModal\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  const languages =\n    sets?.sets\n      .reduce<string[]>((uniqueLanguages, s) => {\n        if (!uniqueLanguages.includes(s.language)) {\n          uniqueLanguages.push(s.language);\n        }\n        return uniqueLanguages;\n      }, [])\n      .sort((a, b) => {\n        if (a === \"GB\") {\n          return -1;\n        }\n        return parseInt(a) - parseInt(b);\n      }) || [];\n\n  return (\n    <>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <p className=\"mt-3\">\n          Start by selecting one or more sets of trivia questions or upload your\n          own{\" \"}\n          <button\n            className=\"btn btn-link p-0\"\n            onClick={() => {\n              setIsUploadModalOpen(true);\n            }}\n          >\n            here ⤴\n          </button>\n          .\n        </p>\n      )}\n      <div className=\"d-flex my-3\">\n        {languages.map((language) => (\n          <span\n            key={language}\n            className={`language mx-1 ${\n              language === shownLanguage ? \"\" : \"text-black-50\"\n            }`}\n            onClick={() => {\n              setShownLanguage(language);\n            }}\n            style={{\n              cursor: language === shownLanguage ? \"default\" : \"pointer\",\n            }}\n          >\n            {countryCodeToFlagEmoji(language)}\n          </span>\n        ))}\n      </div>\n      <div className=\"set-container my-4\">\n        {sets?.sets\n          .filter((s) => s.language === shownLanguage)\n          .map((set) => (\n            <span\n              key={set.setName}\n              className={`set badge border-light ${\n                selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n              } ${setName ? \"mr-auto\" : \"\"}`}\n              style={{\n                gridColumn: `span ${Math.round(\n                  Math.pow(set.setName.length, 0.35)\n                )}`,\n              }}\n              onClick={(e) => {\n                if (setName) {\n                  return;\n                }\n                if (e.metaKey) {\n                  if (selectedSets?.includes(set.setName)) {\n                    setSelectedSets(\n                      selectedSets.filter((setName) => set.setName !== setName)\n                    );\n                  } else {\n                    setSelectedSets([set.setName, ...selectedSets]);\n                  }\n                } else {\n                  setSelectedSets([set.setName]);\n                }\n              }}\n            >\n              {set.setName} ({set.numberOfQuestions})\n            </span>\n          ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </>\n  );\n}\n\nexport default Lobby;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface Props {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  showPreviousQuestionRoundResults: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n  showPreviousQuestionRoundResults,\n}: Props) => {\n  const isPlayerTurn =\n    !showPreviousQuestionRoundResults &&\n    !gameIsOver &&\n    currentBettingRound?.currentPlayer.id === id;\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span className={isPlayerTurn && size === Size.lg ? \"tada\" : \"\"}>\n        {name}\n      </span>\n      {isPlayerTurn && <span className=\"turn\">{\">\"}</span>}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n  getGuess,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  game: Game;\n  isSpectator: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  game,\n  isSpectator,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n  const questionType = usedQuestionRound?.question.type;\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n        const revealGuess =\n          isSpectator ||\n          (!!usedQuestionRound?.isOver &&\n            usedQuestionRound?.isShowdown &&\n            !hasFolded);\n        const guess =\n          guesses &&\n          getGuess(\n            guesses[id],\n            questionType,\n            usedQuestionRound?.question.alternatives\n          );\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pb-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n                showPreviousQuestionRoundResults: !!usedQuestionRound?.isOver,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {questionType !== QuestionTypes.GEO &&\n                (revealGuess ? (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡 {guess}\n                  </span>\n                ) : (\n                  guesses && (\n                    <span role=\"img\" aria-label=\"answer\">\n                      💡{\" \"}\n                      <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                        {!guess && guess !== 0\n                          ? null\n                          : id === playerId\n                          ? guess\n                          : 432}\n                      </span>\n                    </span>\n                  )\n                ))}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (usedQuestionRound?.isOver && !game.isOver\n                      ? bettingRoundSpending\n                      : 0)}\n                </span>\n                {!usedQuestionRound?.isOver && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {usedQuestionRound?.isOver && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getGuess, getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE &&\n    usedQuestionRound.bettingRounds.length <= 1 &&\n    !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div className=\"mb-4\">\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {usedQuestionRound.question.type === QuestionTypes.NUMERICAL &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                {getGuess(\n                  usedQuestionRound.question.answer,\n                  usedQuestionRound.question.type\n                )}\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  useMapEvents,\n  Tooltip,\n} from \"react-leaflet\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n}\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position === null ? null : <Marker position={position} />;\n}\n\nexport default ({ markers, handleOnClick }: Props) => {\n  return (\n    <MapContainer\n      center={[0, 0]}\n      zoom={1}\n      scrollWheelZoom={true}\n      className=\"mb-5\"\n    >\n      <TileLayer\n        attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n      />\n      {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n      {markers?.length &&\n        markers.map(({ position, label }) => (\n          <Marker\n            position={[position.latitude, position.longitude]}\n            key={position.latitude}\n          >\n            {label && (\n              <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                {label}\n              </Tooltip>\n            )}\n          </Marker>\n        ))}\n    </MapContainer>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useSound from \"use-sound\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport GuessMap from \"./GuessMap\";\nimport MultipleChoiceOptions from \"./MultipleChoiceOptions\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\nimport errorLogger from \"../../api/errorHandler\";\n\nimport \"./styles.scss\";\n\nlet soundInterval: NodeJS.Timeout;\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showAnswerDrawer, setShowAnswerDrawer] = useState(false);\n  const [\n    showNewQuestionRoundForSpectator,\n    setShowNewQuestionRoundForSpectator,\n  ] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n  const [playNotification] = useSound(\n    require(\"../../assets/turn-notification.mp3\")\n  );\n  const [playAlert] = useSound(require(\"../../assets/turn-alert.wav\"));\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      clearInterval(soundInterval);\n      const game = subscriptionData.data?.gameUpdated;\n      setGame(game);\n      const cqr = getCurrentQuestionRound(game);\n      const cbr = getCurrentBettingRound(cqr);\n      const players = subscriptionData.data?.gameUpdated.players;\n      const allPlayersPlacedTheirBet =\n        cqr && players && haveAllPlayersPlacedTheirGuess(cqr, players);\n      if (allPlayersPlacedTheirBet) {\n        setShowNewQuestionRoundForSpectator(false);\n      }\n      if (\n        !game?.isOver &&\n        cbr?.currentPlayer.id === playerId &&\n        allPlayersPlacedTheirBet\n      ) {\n        playNotification();\n        window.navigator.vibrate(200);\n        soundInterval = setInterval(() => {\n          playAlert();\n          window.navigator.vibrate(200);\n        }, 15000);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !showNewQuestionRoundForSpectator &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <>\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        <div>\n          {usedQuestionRound && (\n            <Question\n              {...{\n                game,\n                usedQuestionRound,\n                playerId,\n              }}\n            />\n          )}\n          <GuessMap\n            {...{\n              usedQuestionRound,\n              isSpectator,\n              playerId,\n              players: game.players,\n            }}\n          />\n          <MultipleChoiceOptions\n            {...{\n              usedQuestionRound,\n              alternatives:\n                usedQuestionRound?.question.alternatives?.map((alt) => ({\n                  value: alt,\n                  active: !usedQuestionRound.question.hiddenAlternatives?.includes(\n                    alt\n                  ),\n                })) || [],\n              guess: usedQuestionRound?.guesses.find(\n                (g) => g.playerId === playerId\n              )?.guess.numerical,\n            }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound,\n              currentBettingRound,\n              isSpectator,\n              game,\n            }}\n          />\n        </div>\n        {isSpectator && usedQuestionRound?.isOver && (\n          <button\n            className=\"new-question-button btn btn-light mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRoundForSpectator(true);\n            }}\n          >\n            Show Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            player,\n            showAnswerDrawer,\n            setShowAnswerDrawer,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && !isSpectator && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n            setShowAnswerDrawer,\n          }}\n        />\n      )}\n      {!gameHasStarted && (\n        <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\n\nimport \"./index.scss\";\n\ninterface Props {\n  usedQuestionRound?: QuestionRound;\n  handleClick?: (i: number) => void;\n  guess?: number;\n}\n\nexport default ({ usedQuestionRound, handleClick, guess }: Props) => {\n  if (usedQuestionRound?.question.type !== QuestionTypes.MULTIPLE_CHOICE) {\n    return null;\n  }\n  if (usedQuestionRound.question.alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n  const alternatives = usedQuestionRound.question.alternatives.map((alt) => ({\n    value: alt,\n    active: !usedQuestionRound.question.hiddenAlternatives?.includes(alt),\n  }));\n\n  const revealAnswer = getRevealAnswer(usedQuestionRound);\n  const answer = usedQuestionRound.question.answer.numerical;\n\n  return (\n    <div className=\"mc-container mb-3\">\n      {alternatives.map((alt, i) => {\n        let buttonClassName = \"btn\";\n        if (!handleClick) {\n          buttonClassName += \" no-pointer\";\n        }\n        if (guess === i) {\n          buttonClassName += handleClick ? \" shadow\" : \" box-shadow\";\n        }\n        if (alt.active) {\n          if (revealAnswer && i === answer) {\n            buttonClassName += \" btn-outline-success\";\n          } else {\n            if (handleClick) {\n              buttonClassName += \" btn-outline-dark\";\n              if (guess === i) {\n                buttonClassName += \" bg-dark text-light\";\n              }\n            } else {\n              buttonClassName += \" btn-outline-light\";\n            }\n          }\n        } else {\n          buttonClassName += \" btn-outline-danger\";\n        }\n        return (\n          <button\n            key={`${alt.value}_${i}`}\n            className={buttonClassName}\n            onClick={() => handleClick && handleClick(i)}\n            disabled={!alt.active || (revealAnswer && i !== answer)}\n          >\n            {alt.value}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport MultipleChoiceOptions from \"../../MultipleChoiceOptions\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  alternatives?: {\n    value: string;\n    active: boolean;\n  }[];\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ usedQuestionRound, handleSubmit, alternatives }: Props) => {\n  const [guess, setGuess] = useState<number>();\n  if (alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n\n  return (\n    <>\n      <MultipleChoiceOptions\n        usedQuestionRound={usedQuestionRound}\n        handleClick={setGuess}\n        guess={guess}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess || guess === 0) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess && guess !== 0}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport MapInput from \"./MapInput\";\nimport MultipleChoiceInput from \"./MultipleChoiceInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  player?: Player;\n  addGuessMutation: AddGuess;\n  showAnswerDrawer: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  player,\n  addGuessMutation,\n  game,\n  showAnswerDrawer,\n  setShowAnswerDrawer,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n}: QuestionProps) => {\n  if (!player || player.isDead) {\n    return null;\n  }\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        player.id\n      );\n      setShowAnswerDrawer(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, player.id);\n    setShowAnswerDrawer(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        const alternatives = currentQuestionRound.question.alternatives?.map(\n          (alt) => ({ value: alt, active: true })\n        );\n        return (\n          <MultipleChoiceInput\n            usedQuestionRound={currentQuestionRound}\n            alternatives={alternatives}\n            handleSubmit={handleNumberInputSubmit}\n          />\n        );\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowAnswerDrawer(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        (showAnswerDrawer || game.questionRounds.length === 1) &&\n        !hasPlayerPlacedGuessInCurrentQuestionRound\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!playerId) {\n      createPlayer({ variables: { input: { gameId, playerName: name } } });\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n  setShowAnswerDrawer,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {!hasPlayerPlacedGuessInCurrentQuestionRound &&\n          game.questionRounds.length > 1 && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto\"\n              onClick={() => {\n                setShowAnswerDrawer(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n        {hasPlayerPlacedGuessInCurrentQuestionRound &&\n          currentQuestionRound &&\n          currentBettingRound &&\n          playerId && (\n            <>\n              <Pot\n                playerId={playerId}\n                currentQuestionRound={currentQuestionRound}\n                currentBettingRound={currentBettingRound}\n                revealPreviousAnswers={revealPreviousAnswers}\n              />\n              <ActionButtons\n                {...{\n                  game,\n                  currentQuestionRound,\n                  currentBettingRound,\n                  placeBet,\n                  playerId,\n                }}\n              />\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        id=\"leave-game\"\n        className=\"btn btn-link btn-lg\"\n        onClick={handleClickOpen}\n      >\n        <ExitToAppOutlinedIcon />\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>\n            Are you sure?\n            {gameHasStarted && (\n              <p>If you leave the game, you cannot join again later.</p>\n            )}\n          </DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              Leave Game\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  )?.guess.geo;\n\n  let mapMarkers: Marker[] = playerGuess\n    ? [{ position: playerGuess, label: \"You\" }]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({ position: guess.geo, label });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n    });\n  }\n\n  return <Map markers={mapMarkers} />;\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}