{"version":3,"sources":["assets/certainty_poker_bg.png","assets/turn-notification.mp3","assets/turn-alert.wav","api/queries.ts","interfaces.ts","api/errorHandler.ts","components/Lobby/PictureHalf/index.tsx","assets/countryCodes.ts","components/Game/Guess/index.tsx","components/Lobby/UploadModal/index.tsx","components/Lobby/UploadModal/processCsvData.ts","components/Lobby/ActionableHalf/index.tsx","components/Lobby/index.tsx","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/AnswerDrawer/DateInput/index.tsx","components/Game/Map/index.tsx","components/Game/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/MultipleChoiceOptions/index.tsx","components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/shared/ConfirmDialogButton/index.tsx","components/Game/Footer/StartGameButton/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/GuessMap/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["module","exports","QuestionTypes","CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","className","src","Image","alt","countryListAlpha2","GB","FR","ES","CN","DE","ZA","AL","DZ","SA","AM","BD","BG","KH","HR","CZ","DK","NL","EE","FI","GR","IL","HU","IN","IT","JP","KR","LV","LT","MY","MN","NO","PL","BR","RO","RU","RS","SK","SI","SE","TH","TR","VN","guess","questionType","alternatives","NUMERICAL","Intl","NumberFormat","format","numerical","parseFloat","DATE","moment","toString","GEO","geo","latitude","longitude","MULTIPLE_CHOICE","length","Error","styles","card","maxHeight","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","language","setLanguage","useMutation","variables","questions","onCompleted","push","undefined","onError","errorLogger","uploadQuestions","content","target","rel","href","onDrop","rows","map","row","question","type","csvAnswer","answer","hint1","hint2","explanation","multiple_choice_alternative1","multiple_choice_alternative2","multiple_choice_alternative3","hints","filter","Boolean","processCsvData","file","inputElem","reason","config","header","addRemoveButton","removeButtonColor","value","onChange","e","placeholder","aria-label","required","autoFocus","selected","Object","keys","countryCodes","code","key","countryCodeToFlagEmoji","q","Guess","h","i","id","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","style","sets","languages","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","shownLanguage","setShownLanguage","setNames","createGame","errorHandler","loading","handleCreateGame","a","to","pathname","color","window","host","cursor","s","set","includes","gridColumn","Math","round","pow","metaKey","numberOfQuestions","Lobby","Size","useParams","useLazyQuery","fetchPolicy","useEffect","reduce","uniqueLanguages","sort","b","parseInt","ActionableHalf","PictureHalf","setFingerprintToStorage","gameId","localStorage","clear","random","substring","setItem","getFingerprintFromStorage","getItem","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","values","hasPlayerFolded","foldedPlayerIds","getRevealAnswer","questionRound","isOver","raise","placeBet","currentBettingRound","currentPlayer","moneyOfPlayer","find","money","input","min","addGuess","addGuessMutation","name","isFolded","gameIsOver","size","isDealer","isPlayerTurn","showPreviousQuestionRoundResults","lg","winningPlayerIds","usedQuestionRound","isSpectator","p1","p2","forEach","rank","players_","splice","findIndex","moveAppPlayerToTop","winners","p","hasFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","revealGuess","isShowdown","Avatar","dealerId","md","role","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","handleSubmit","setGuess","onKeyUp","which","aria-describedby","submit","stringValue","replaceAll","getNumberOfDecimals","val","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","MarkerContainer","markers","useMap","bounds","latLngBounds","extend","isValid","flyToBounds","padding","maxZoom","FeatureGroup","React","soundInterval","memo","handleOnClick","answerMarker","m","isAnswer","distanceLines","distanceToAnswer","line","LatLng","label","toFixed","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Polyline","positions","weight","Tooltip","direction","permanent","offset","prevProps","nextProps","equals","Map","handleClick","active","hiddenAlternatives","revealAnswer","buttonClassName","showAnswerDrawer","setShowAnswerDrawer","hasPlayerPlacedGuessInCurrentQuestionRound","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","anchor","variant","NumberInput","DateInput","MapInput","MultipleChoiceInput","getInput","emojiRegex","createPlayer","playerName","newName","match","text","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","buttonLabel","dialogTitle","confirmLabel","onConfirm","btnClassName","setOpen","Dialog","DialogTitle","DialogActions","startGame","StartGameButton","Pot","ActionButtons","gameHasStarted","setPlayerId","removeItem","deletePlayerIdFromStorage","removePlayer","ConfirmDialogButton","playerGuess","g","mapMarkers","difference","pId","vibrate","t","navigator","GameComponent","setGame","showNewQuestionRoundForSpectator","setShowNewQuestionRoundForSpectator","gqlErr","setGqlErr","useSound","require","playNotification","playAlert","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","clearInterval","gameUpdated","cqr","cbr","allPlayersPlacedTheirBet","setInterval","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","clipboard","writeText","Question","GuessMap","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","LeaveGameButton","PageNotFound","App","path","component","exact","Game","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.78cb9d3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/certainty_poker_bg.d8967197.png\";","module.exports = __webpack_public_path__ + \"static/media/turn-notification.15b0efd7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/turn-alert.3a60f09f.wav\";","import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n    $language: String!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n      language: $language\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n      language\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  alternatives?: [string, string, string, string];\n  hiddenAlternatives?: string[];\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n  difference?: number;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n  language: string;\n}\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import React from \"react\";\n\nimport Image from \"../../../assets/certainty_poker_bg.png\";\n\nexport default () => {\n  return (\n    <div className=\"image-container\">\n      <img src={Image} alt=\"background\" />\n    </div>\n  );\n};\n","const countryListAlpha2 = {\n  GB: \"English\",\n  FR: \"French\",\n  ES: \"Spainish\",\n  CN: \"Chinese\",\n  DE: \"German\",\n  ZA: \"Africaans\",\n  AL: \"Albanian\",\n  DZ: \"Algerian\",\n  SA: \"Arab\",\n  AM: \"Armenian\",\n  BD: \"Bangladeshi\",\n  BG: \"Bulgarian\",\n  KH: \"Cambodian\",\n  HR: \"Croatian\",\n  CZ: \"Czech\",\n  DK: \"Danish\",\n  NL: \"Dutch\",\n  EE: \"Estonian\",\n  FI: \"Finnish\",\n  GR: \"Greek\",\n  IL: \"Hebrew\",\n  HU: \"Hungarian\",\n  IN: \"Indian\",\n  IT: \"Italian\",\n  JP: \"Japanese\",\n  KR: \"Korean\",\n  LV: \"Latvian\",\n  LT: \"Lithuanian\",\n  MY: \"Malaysian\",\n  MN: \"Mongolian\",\n  NO: \"Norwegian\",\n  PL: \"Polish\",\n  BR: \"Portuguese\",\n  RO: \"Romanian\",\n  RU: \"Russian\",\n  RS: \"Serbian\",\n  SK: \"Slovakian\",\n  SI: \"Slovenian\",\n  SE: \"Swedish\",\n  TH: \"Thai\",\n  TR: \"Turkish\",\n  VN: \"Vietnamese\",\n};\n\nexport default countryListAlpha2;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\n\ninterface Props {\n  guess: Answer;\n  questionType?: QuestionTypes;\n  alternatives?: Question[\"alternatives\"];\n}\n\nexport default ({ guess, questionType, alternatives }: Props) => {\n  if (!guess) return null;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return (\n        <span>\n          {new Intl.NumberFormat().format(\n            typeof guess.numerical === \"number\"\n              ? guess.numerical\n              : parseFloat(guess.numerical || \"\")\n          )}\n        </span>\n      );\n    case QuestionTypes.DATE:\n      if (!guess.numerical) {\n        return null;\n      }\n      return (\n        <span>\n          {moment(guess.numerical.toString(), \"YYYYMMDD\").format(\n            \"MMM DD, YYYY\"\n          )}\n        </span>\n      );\n    case QuestionTypes.GEO:\n      return <span>{`[${guess.geo?.latitude}, ${guess.geo?.longitude}]`}</span>;\n    case QuestionTypes.MULTIPLE_CHOICE:\n      if (alternatives?.length !== 4) {\n        throw new Error(\"missing alternatives for multiple choice question\");\n      }\n      return <span>{alternatives[guess.numerical ?? -1]}</span>;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Question, QuestionTypes } from \"../../../interfaces\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport countryCodes from \"../../../assets/countryCodes\";\nimport processCsvData from \"./processCsvData\";\nimport Guess from \"../../Game/Guess\";\n\nconst styles = {\n  card: {\n    maxHeight: \"95vh\",\n  },\n};\n\nexport interface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number | string;\n  latitude?: number;\n  longitude?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n  multiple_choice_alternative1?: string;\n  multiple_choice_alternative2?: string;\n  multiple_choice_alternative3?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets, setSelectedSets }: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n  const [language, setLanguage] = useState<string>();\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n      language,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: errorLogger,\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(processCsvData(rows));\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p>\n        An example of the file format can be found{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-2\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"input-group mb-3\">\n        <select\n          className=\"custom-select\"\n          required\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          <option selected>Language...</option>\n          {Object.keys(countryCodes).map((code) => (\n            <option key={code} value={code}>\n              {countryCodeToFlagEmoji(code)}{\" \"}\n              {countryCodes[code as keyof typeof countryCodes]}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h3>Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          {q.type !== QuestionTypes.MULTIPLE_CHOICE && (\n            <p>\n              Answer:{\" \"}\n              <b>\n                <Guess\n                  guess={q.answer}\n                  questionType={q.type}\n                  alternatives={q.alternatives}\n                />\n              </b>\n            </p>\n          )}\n          {!!q.hints?.length && (\n            <p>\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {!!q.alternatives?.length && (\n            <p>\n              Alternatives:{\" \"}\n              {q.alternatives.map((alt, i) => (\n                <>\n                  <br />\n                  <span key={alt}>\n                    <b className={i === 0 ? \"text-success\" : \"\"}>{alt}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p>\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName || !language}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\" style={styles.card}>\n        <div className=\"card-body text-dark overflow-auto\">\n          <h3>Upload a CSV file with custom questions</h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport { CSVDataRow } from \".\";\n\nexport default (rows: { data: CSVDataRow }[]): Omit<Question, \"id\">[] => {\n  return rows.map((row) => {\n    const {\n      question,\n      type,\n      answer: csvAnswer,\n      latitude,\n      longitude,\n      hint1,\n      hint2,\n      explanation,\n      multiple_choice_alternative1,\n      multiple_choice_alternative2,\n      multiple_choice_alternative3,\n    } = row.data;\n    const hints = [hint1, hint2].filter(Boolean) as string[];\n    const answer: Answer = {};\n    let alternatives: Question[\"alternatives\"];\n    switch (type) {\n      case QuestionTypes.NUMERICAL:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.DATE:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.GEO:\n        answer.geo = {\n          latitude: latitude as number,\n          longitude: longitude as number,\n        };\n        break;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        answer.numerical = 0;\n        alternatives = [\n          csvAnswer as string,\n          multiple_choice_alternative1 as string,\n          multiple_choice_alternative2 as string,\n          multiple_choice_alternative3 as string,\n        ];\n        break;\n      default:\n        throw new Error(\"invalid question type\");\n    }\n    return {\n      question,\n      type,\n      answer,\n      hints,\n      explanation,\n      alternatives,\n    };\n  });\n};\n","import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { QueryLazyOptions, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { Game, Set } from \"../../../interfaces\";\nimport { CREATE_GAME_QUERY } from \"../../../api/queries\";\nimport errorHandler from \"../../../api/errorHandler\";\nimport UploadModal from \"../UploadModal\";\n\nimport \"./styles.scss\";\n\ninterface Props {\n  sets?: Set[];\n  setName?: string;\n  languages: string[];\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nexport default ({ sets = [], setName, languages, fetchSets }: Props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <div className=\"actionable-container container-sm px-sm-5 py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <>\n          <h1 className=\"py-5\">\n            You think you know things?\n            <br />\n            Let's make it interesting then!\n          </h1>\n          <p>\n            Certainty Poker is a social (distance) trivia game that doesn't just\n            test if you know things but also how certain you are about what you\n            think you know.\n          </p>\n          <p>\n            Start by selecting a set of trivia questions, create the game and\n            share the link to join with your friends!\n            <br />\n            You don't like our questions? Upload your own{\" \"}\n            <button\n              className=\"btn btn-link p-0\"\n              onClick={() => {\n                setIsUploadModalOpen(true);\n              }}\n            >\n              here ⤴\n            </button>\n            .\n          </p>\n        </>\n      )}\n      <div className=\"d-flex my-3\">\n        {languages.map((language) => (\n          <span\n            key={language}\n            className={`language mx-1 ${\n              language === shownLanguage ? \"\" : \"text-black-50\"\n            }`}\n            onClick={() => {\n              setShownLanguage(language);\n            }}\n            style={{\n              cursor: language === shownLanguage ? \"default\" : \"pointer\",\n            }}\n          >\n            {countryCodeToFlagEmoji(language)}\n          </span>\n        ))}\n      </div>\n      <div className=\"set-container my-4\">\n        {sets\n          .filter((s) => s.language === shownLanguage)\n          .map((set) => (\n            <span\n              key={set.setName}\n              className={`set badge border-light ${\n                selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n              } ${setName ? \"mr-auto\" : \"\"}`}\n              style={{\n                gridColumn: `span ${Math.round(\n                  Math.pow(set.setName.length, 0.35)\n                )}`,\n              }}\n              onClick={(e) => {\n                if (setName) {\n                  return;\n                }\n                if (e.metaKey) {\n                  if (selectedSets?.includes(set.setName)) {\n                    setSelectedSets(\n                      selectedSets.filter((setName) => set.setName !== setName)\n                    );\n                  } else {\n                    setSelectedSets([set.setName, ...selectedSets]);\n                  }\n                } else {\n                  setSelectedSets([set.setName]);\n                }\n              }}\n            >\n              {set.setName} ({set.numberOfQuestions})\n            </span>\n          ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n      <p className=\"mt-4\">\n        Don't know the rules? Find them{\" \"}\n        <a\n          className=\"btn btn-link p-0\"\n          href=\"https://docs.google.com/document/d/13pwz8yzrPdY1DcQqXvhejJAxXdWdPrvxR6GUxg5PJPs/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <p className=\"text-smaller\">\n        TL;DR:\n        <br />\n        Answer trivia different types of questions. Then bet some poker chips on\n        how sure you are your answer is right. If you are unsure, you'd better\n        fold or put on your best poker face. You're a 100%? Then risk it and go\n        All In. If you are closest to the correct answer, you win whatever is in\n        the pot. Unless you've folded, of course.\n      </p>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { Set } from \"../../interfaces\";\nimport { GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport PictureHalf from \"./PictureHalf\";\nimport ActionableHalf from \"./ActionableHalf\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const languages =\n    sets?.sets\n      .reduce<string[]>((uniqueLanguages, s) => {\n        if (!uniqueLanguages.includes(s.language)) {\n          uniqueLanguages.push(s.language);\n        }\n        return uniqueLanguages;\n      }, [])\n      .sort((a, b) => {\n        if (a === \"GB\") {\n          return -1;\n        }\n        return parseInt(a) - parseInt(b);\n      }) || [];\n\n  return (\n    <div className=\"grid-container\">\n      <ActionableHalf\n        {...{ sets: sets?.sets, languages, setName, fetchSets }}\n      />\n      <PictureHalf />\n    </div>\n  );\n}\n\nexport default Lobby;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface Props {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  showPreviousQuestionRoundResults: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n  showPreviousQuestionRoundResults,\n}: Props) => {\n  const isPlayerTurn =\n    !showPreviousQuestionRoundResults &&\n    !gameIsOver &&\n    currentBettingRound?.currentPlayer.id === id;\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span className={isPlayerTurn && size === Size.lg ? \"tada\" : \"\"}>\n        {name}\n      </span>\n      {isPlayerTurn && <span className=\"turn\">{\">\"}</span>}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  // clear stoage when joining a new game\n  localStorage.clear();\n\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) => {\n  if (questionRound.isOver) {\n    return true;\n  }\n  if (questionRound.question.type === QuestionTypes.MULTIPLE_CHOICE) {\n    return questionRound.bettingRounds.length >= 4;\n  }\n  return (\n    questionRound.question.hints.length + 1 < questionRound.bettingRounds.length\n  );\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport FormattedGuess from \"../Guess\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  game: Game;\n  isSpectator: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  game,\n  isSpectator,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n  const questionType = usedQuestionRound?.question.type;\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n        const revealGuess =\n          isSpectator ||\n          (!!usedQuestionRound?.isOver &&\n            usedQuestionRound?.isShowdown &&\n            !hasFolded);\n        const guess = guesses && (\n          <FormattedGuess\n            {...{\n              guess: guesses[id],\n              questionType,\n              alternatives: usedQuestionRound?.question.alternatives,\n            }}\n          />\n        );\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pb-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n                showPreviousQuestionRoundResults: !!usedQuestionRound?.isOver,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {questionType !== QuestionTypes.GEO &&\n                (revealGuess ? (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡 {guess}\n                  </span>\n                ) : (\n                  guesses && (\n                    <span role=\"img\" aria-label=\"answer\">\n                      💡{\" \"}\n                      <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                        {!guess && guess !== 0\n                          ? null\n                          : id === playerId\n                          ? guess\n                          : 432}\n                      </span>\n                    </span>\n                  )\n                ))}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (usedQuestionRound?.isOver && !game.isOver\n                      ? bettingRoundSpending\n                      : 0)}\n                </span>\n                {!usedQuestionRound?.isOver && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {usedQuestionRound?.isOver && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport Guess from \"../Guess\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE &&\n    usedQuestionRound.bettingRounds.length <= 1 &&\n    !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div className=\"mb-4\">\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {[QuestionTypes.NUMERICAL, QuestionTypes.DATE].includes(\n        usedQuestionRound.question.type\n      ) &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                <Guess\n                  guess={usedQuestionRound.question.answer}\n                  questionType={usedQuestionRound.question.type}\n                />\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<string>();\n\n  const submit = (stringValue?: string) => {\n    if (stringValue) {\n      const value = parseInt(stringValue.replaceAll(\"-\", \"\"));\n      if (value) {\n        handleSubmit(value);\n        setGuess(undefined);\n      }\n    }\n  };\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          setGuess(e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            submit(guess);\n          }\n        }}\n        type=\"date\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={!guess}\n          onClick={() => {\n            submit(guess);\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { ReactNode, useState } from \"react\";\nimport { LatLng, latLngBounds } from \"leaflet\";\nimport {\n  FeatureGroup,\n  MapContainer,\n  Marker,\n  Polyline,\n  TileLayer,\n  Tooltip,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport { equals } from \"ramda\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n  isAnswer?: boolean;\n  distanceToAnswer?: number;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n}\n\nconst getNumberOfDecimals = (val: number = 0) => {\n  if (val > 1000) {\n    return 0;\n  }\n  if (val > 100) {\n    return 1;\n  }\n  if (val > 1) {\n    return 2;\n  }\n  return 4;\n};\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position && <Marker position={position} />;\n}\n\nfunction MarkerContainer({\n  children,\n  markers,\n}: {\n  children: ReactNode;\n  markers: Marker[];\n}) {\n  const map = useMap();\n  const bounds = latLngBounds([]);\n  markers?.forEach((data) => {\n    bounds.extend([data.position.latitude, data.position.longitude]);\n  });\n  bounds.isValid() &&\n    map.flyToBounds(bounds, {\n      padding: [10, 10],\n      maxZoom: markers.length > 1 ? 15 : 5,\n    });\n\n  return <FeatureGroup>{children}</FeatureGroup>;\n}\n\nexport default React.memo(\n  ({ markers = [], handleOnClick }: Props) => {\n    const answerMarker = markers.find((m) => m.isAnswer);\n    const distanceLines =\n      !!answerMarker &&\n      markers\n        .filter((m) => !m.isAnswer && m.distanceToAnswer)\n        .map((m) => ({\n          line: [\n            new LatLng(m.position.latitude, m.position.longitude),\n            new LatLng(\n              answerMarker.position.latitude,\n              answerMarker.position.longitude\n            ),\n          ],\n          label: m.distanceToAnswer?.toFixed(\n            getNumberOfDecimals(m.distanceToAnswer)\n          ),\n        }));\n\n    return (\n      <MapContainer\n        center={[0, 0]}\n        zoom={1}\n        scrollWheelZoom={true}\n        className=\"mb-5\"\n      >\n        <TileLayer\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n        />\n        {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n        {distanceLines &&\n          distanceLines.map(({ line, label }) => (\n            <Polyline\n              key={line.toString()}\n              positions={line}\n              color=\"#393d4e\"\n              weight={2}\n            >\n              {label && (\n                <Tooltip\n                  className=\"distance-label\"\n                  direction=\"center\"\n                  permanent\n                >\n                  {label} km\n                </Tooltip>\n              )}\n            </Polyline>\n          ))}\n        {markers.length && (\n          <MarkerContainer markers={markers}>\n            {markers.map(({ position, label }) => (\n              <Marker\n                position={[position.latitude, position.longitude]}\n                key={position.latitude}\n              >\n                {label && (\n                  <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                    {label}\n                  </Tooltip>\n                )}\n              </Marker>\n            ))}\n          </MarkerContainer>\n        )}\n      </MapContainer>\n    );\n  },\n  (prevProps, nextProps) => equals(prevProps.markers, nextProps.markers)\n);\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useSound from \"use-sound\";\nimport FileCopy from \"@material-ui/icons/FileCopy\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport GuessMap from \"./GuessMap\";\nimport MultipleChoiceOptions from \"./MultipleChoiceOptions\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\nimport errorLogger from \"../../api/errorHandler\";\n\nimport \"./styles.scss\";\n\nconst vibrate = (t: number) => {\n  window.navigator.vibrate && window.navigator.vibrate(t);\n};\nlet soundInterval: NodeJS.Timeout;\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showAnswerDrawer, setShowAnswerDrawer] = useState(false);\n  const [\n    showNewQuestionRoundForSpectator,\n    setShowNewQuestionRoundForSpectator,\n  ] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n  const [playNotification] = useSound(\n    require(\"../../assets/turn-notification.mp3\")\n  );\n  const [playAlert] = useSound(require(\"../../assets/turn-alert.wav\"));\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      clearInterval(soundInterval);\n      const game = subscriptionData.data?.gameUpdated;\n      setGame(game);\n      const cqr = getCurrentQuestionRound(game);\n      const cbr = getCurrentBettingRound(cqr);\n      const players = subscriptionData.data?.gameUpdated.players;\n      const allPlayersPlacedTheirBet =\n        cqr && players && haveAllPlayersPlacedTheirGuess(cqr, players);\n      if (allPlayersPlacedTheirBet) {\n        setShowNewQuestionRoundForSpectator(false);\n      }\n      if (\n        !game?.isOver &&\n        cbr?.currentPlayer.id === playerId &&\n        allPlayersPlacedTheirBet\n      ) {\n        playNotification();\n        vibrate(200);\n        soundInterval = setInterval(() => {\n          playAlert();\n          vibrate(200);\n        }, 15000);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !showNewQuestionRoundForSpectator &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <div className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        {!gameHasStarted && (\n          <h5>\n            Share this link with your friends who want to join the game:\n            <br />\n            <div className=\"d-flex align-items-center\">\n              {window.location.href}{\" \"}\n              <button\n                className=\"btn btn-link p-0\"\n                onClick={async () => {\n                  await navigator.clipboard.writeText(window.location.href);\n                }}\n              >\n                <FileCopy className=\"ml-1\" />\n              </button>\n            </div>\n          </h5>\n        )}\n        <div>\n          {usedQuestionRound && (\n            <Question\n              {...{\n                game,\n                usedQuestionRound,\n                playerId,\n              }}\n            />\n          )}\n          <GuessMap\n            {...{\n              usedQuestionRound,\n              isSpectator,\n              playerId,\n              players: game.players,\n            }}\n          />\n          <MultipleChoiceOptions\n            {...{\n              usedQuestionRound,\n              alternatives:\n                usedQuestionRound?.question.alternatives?.map((alt) => ({\n                  value: alt,\n                  active: !usedQuestionRound.question.hiddenAlternatives?.includes(\n                    alt\n                  ),\n                })) || [],\n              guess: usedQuestionRound?.guesses.find(\n                (g) => g.playerId === playerId\n              )?.guess.numerical,\n            }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound,\n              currentBettingRound,\n              isSpectator,\n              game,\n            }}\n          />\n        </div>\n        {isSpectator && usedQuestionRound?.isOver && !game.isOver && (\n          <button\n            className=\"new-question-button btn btn-light mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRoundForSpectator(true);\n            }}\n          >\n            Show Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            player,\n            showAnswerDrawer,\n            setShowAnswerDrawer,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && !isSpectator && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n            setShowAnswerDrawer,\n          }}\n        />\n      )}\n      {!gameHasStarted && (\n        <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </div>\n  );\n}\n\nexport default GameComponent;\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\n\nimport \"./index.scss\";\n\ninterface Props {\n  usedQuestionRound?: QuestionRound;\n  handleClick?: (i: number) => void;\n  guess?: number;\n}\n\nexport default ({ usedQuestionRound, handleClick, guess }: Props) => {\n  if (usedQuestionRound?.question.type !== QuestionTypes.MULTIPLE_CHOICE) {\n    return null;\n  }\n  if (usedQuestionRound.question.alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n  const alternatives = usedQuestionRound.question.alternatives.map((alt) => ({\n    value: alt,\n    active: !usedQuestionRound.question.hiddenAlternatives?.includes(alt),\n  }));\n\n  const revealAnswer = getRevealAnswer(usedQuestionRound);\n  const answer = usedQuestionRound.question.answer.numerical;\n\n  return (\n    <div className=\"mc-container mb-3\">\n      {alternatives.map((alt, i) => {\n        let buttonClassName = \"btn\";\n        if (!handleClick) {\n          buttonClassName += \" no-pointer\";\n        }\n        if (guess === i) {\n          buttonClassName += handleClick ? \" shadow\" : \" box-shadow\";\n        }\n        if (alt.active) {\n          if (revealAnswer && i === answer) {\n            buttonClassName += \" btn-outline-success\";\n          } else {\n            if (handleClick) {\n              buttonClassName += \" btn-outline-dark\";\n              if (guess === i) {\n                buttonClassName += \" bg-dark text-light\";\n              }\n            } else {\n              buttonClassName += \" btn-outline-light\";\n            }\n          }\n        } else {\n          buttonClassName += \" btn-outline-danger\";\n        }\n        return (\n          <button\n            key={`${alt.value}_${i}`}\n            className={buttonClassName}\n            onClick={() => handleClick && handleClick(i)}\n            disabled={!alt.active || (revealAnswer && i !== answer)}\n          >\n            {alt.value}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport MultipleChoiceOptions from \"../../MultipleChoiceOptions\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  alternatives?: {\n    value: string;\n    active: boolean;\n  }[];\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ usedQuestionRound, handleSubmit, alternatives }: Props) => {\n  const [guess, setGuess] = useState<number>();\n  if (alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n\n  return (\n    <>\n      <MultipleChoiceOptions\n        usedQuestionRound={usedQuestionRound}\n        handleClick={setGuess}\n        guess={guess}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess || guess === 0) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess && guess !== 0}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport DateInput from \"./DateInput\";\nimport MapInput from \"./MapInput\";\nimport MultipleChoiceInput from \"./MultipleChoiceInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  player?: Player;\n  addGuessMutation: AddGuess;\n  showAnswerDrawer: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  player,\n  addGuessMutation,\n  game,\n  showAnswerDrawer,\n  setShowAnswerDrawer,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n}: QuestionProps) => {\n  if (!player || player.isDead) {\n    return null;\n  }\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        player.id\n      );\n      setShowAnswerDrawer(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, player.id);\n    setShowAnswerDrawer(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.DATE:\n        return <DateInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        const alternatives = currentQuestionRound.question.alternatives?.map(\n          (alt) => ({ value: alt, active: true })\n        );\n        return (\n          <MultipleChoiceInput\n            usedQuestionRound={currentQuestionRound}\n            alternatives={alternatives}\n            handleSubmit={handleNumberInputSubmit}\n          />\n        );\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowAnswerDrawer(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        (showAnswerDrawer || game.questionRounds.length === 1) &&\n        !hasPlayerPlacedGuessInCurrentQuestionRound\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!playerId) {\n      createPlayer({ variables: { input: { gameId, playerName: name } } });\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface Props {\n  buttonLabel: string | React.ReactNode;\n  dialogTitle: string | React.ReactNode;\n  confirmLabel: string;\n  onConfirm: () => void;\n  isDisabled?: boolean;\n  btnClassName?: string;\n}\n\nexport default ({\n  buttonLabel,\n  dialogTitle,\n  confirmLabel,\n  onConfirm,\n  isDisabled,\n  btnClassName,\n}: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        className={btnClassName || \"btn btn-primary\"}\n        onClick={handleClickOpen}\n        disabled={isDisabled}\n      >\n        {buttonLabel}\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>{dialogTitle}</DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              {confirmLabel}\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Game } from \"../../../../interfaces\";\nimport ConformDialogButton from \"../../../shared/ConfirmDialogButton\";\nimport { StartGame } from \"..\";\n\ninterface Props {\n  gameId: Game[\"id\"];\n  startGame: StartGame;\n  isDisabled: boolean;\n}\n\nexport default ({ startGame, gameId, isDisabled }: Props) => {\n  const onConfirm = () => {\n    startGame({ variables: { gameId } });\n  };\n  return (\n    <ConformDialogButton\n      onConfirm={onConfirm}\n      dialogTitle=\"Are you sure you want to start the game? Once it's started no more players can join.\"\n      confirmLabel=\"Start Game\"\n      buttonLabel=\"Start Game\"\n      isDisabled={isDisabled}\n    />\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\nimport StartGameButton from \"./StartGameButton\";\n\nimport \"./styles.scss\";\n\nexport type StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n  setShowAnswerDrawer,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <StartGameButton\n            startGame={startGame}\n            gameId={game.id}\n            isDisabled={game.players.length <= 1}\n          />\n          // <button\n          //   className=\"btn btn-lg btn-primary mt-auto mx-5\"\n          //   disabled={game.players.length <= 1}\n          //   onClick={() => {\n          //     startGame({\n          //       variables: { gameId: game.id },\n          //     });\n          //   }}\n          // >\n          //   Start Game\n          // </button>\n        )}\n        {!hasPlayerPlacedGuessInCurrentQuestionRound &&\n          game.questionRounds.length > 1 && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto\"\n              onClick={() => {\n                setShowAnswerDrawer(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n        {hasPlayerPlacedGuessInCurrentQuestionRound &&\n          currentQuestionRound &&\n          currentBettingRound &&\n          playerId && (\n            <>\n              <Pot\n                playerId={playerId}\n                currentQuestionRound={currentQuestionRound}\n                currentBettingRound={currentBettingRound}\n                revealPreviousAnswers={revealPreviousAnswers}\n              />\n              <ActionButtons\n                {...{\n                  game,\n                  currentQuestionRound,\n                  currentBettingRound,\n                  placeBet,\n                  playerId,\n                }}\n              />\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\nimport ConfirmDialogButton from \"../../shared/ConfirmDialogButton\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n  };\n\n  return (\n    <ConfirmDialogButton\n      onConfirm={handleConfirm}\n      dialogTitle={\n        <>\n          Are you sure?\n          {gameHasStarted && (\n            <p>If you leave the game, you cannot join again later.</p>\n          )}\n        </>\n      }\n      confirmLabel=\"Leave Game\"\n      buttonLabel={<ExitToAppOutlinedIcon />}\n      btnClassName=\"leave-game btn btn-link btn-lg\"\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  );\n\n  let mapMarkers: Marker[] = playerGuess?.guess.geo\n    ? [\n        {\n          position: playerGuess.guess.geo,\n          label: \"You\",\n          distanceToAnswer: playerGuess.difference,\n        },\n      ]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId, difference }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({\n              position: guess.geo,\n              label,\n              distanceToAnswer: difference,\n            });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n      isAnswer: true,\n    });\n  }\n\n  return <Map markers={mapMarkers} />;\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}