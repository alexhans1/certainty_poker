{"version":3,"sources":["api/queries.ts","assets/landing-page-image-1.png","assets/landing-page-image-2.png","assets/landing-page-image-3.png","assets/landing-page-image-4.png","assets/landing-page-image-phone.png","components/Lobby/PictureHalf/index.tsx","interfaces.ts","assets/countryCodes.ts","components/Game/Guess/index.tsx","components/Lobby/UploadModal/index.tsx","components/Lobby/UploadModal/processCsvData.ts","components/shared/Modal/index.tsx","components/Lobby/StartGameModal/index.tsx","components/Lobby/ActionableHalf/index.tsx","components/Lobby/index.tsx","storage.ts","components/Game/PreGameLobby/PlayerSpot.tsx","components/shared/ConfirmDialogButton/index.tsx","components/Game/PreGameLobby/StartGameButton/index.tsx","components/shared/Drawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/PreGameLobby/index.tsx","components/Game/PokerTable/Player/Status.tsx","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","components/Game/PokerTable/Player/index.tsx","components/Game/PokerTable/Pot/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Game/Map/index.tsx","components/Game/GuessMap/index.tsx","components/Game/MultipleChoiceOptions/index.tsx","components/Game/PokerTable/index.tsx","components/Game/PokerTable/helpers.ts","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/AnswerDrawer/DateInput/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/Footer/ActionButtons/Button/index.tsx","components/Game/Footer/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/Footer/ActionButtons/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/index.tsx","components/ErrorBoundary.tsx","assets/turn-notification.mp3","assets/turn-alert.wav","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","PictureHalf","className","src","backgroundImage3","alt","backgroundImage4","backgroundImage1","backgroundImage2","backgroundImagePhone","QuestionTypes","BettingStates","countryListAlpha2","GB","FR","ES","CN","DE","ZA","AL","DZ","SA","AM","BD","BG","KH","HR","CZ","DK","NL","EE","FI","GR","IL","HU","IN","IT","JP","KR","LV","LT","MY","MN","NO","PL","BR","RO","RU","RS","SK","SI","SE","TH","TR","VN","Guess","guess","questionType","alternatives","NUMERICAL","number","numerical","parseFloat","isNaN","Intl","NumberFormat","format","DATE","moment","toString","GEO","geo","latitude","longitude","MULTIPLE_CHOICE","length","Error","UploadModal","open","handleClose","fetchSets","setSelectedSets","setShownLanguage","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","language","setLanguage","setError","useMutation","variables","questions","onCompleted","push","undefined","onError","err","uploadQuestions","error","content","target","rel","href","onDrop","rows","map","row","question","type","csvAnswer","answer","toleranceRadius","hint1","hint2","explanation","multiple_choice_alternative1","multiple_choice_alternative2","multiple_choice_alternative3","hints","filter","Boolean","processCsvData","file","inputElem","reason","console","config","header","addRemoveButton","removeButtonColor","value","onChange","e","placeholder","aria-label","required","autoFocus","selected","Object","keys","countryCodes","code","key","countryCodeToFlagEmoji","q","h","i","id","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","message","children","StartGameModal","sets","handleOpen","isUploadModalOpen","setIsUploadModalOpen","selectedSets","shownLanguage","languages","setLanguages","useEffect","reduce","uniqueLanguages","s","includes","sort","a","b","parseInt","setNames","createGame","loading","isPrivateSetRoute","location","pathname","handleCreateGame","navigator","clipboard","writeText","window","style","cursor","set","gridColumn","Math","round","pow","metaKey","numberOfQuestions","ActionableHalf","isCreateGameModalOpen","setIsCreateGameModalOpen","Lobby","useParams","useLazyQuery","fetchPolicy","PLAYER_ID_KEY","FINGERPRINT_KEY","setFingerprintToStorage","gameId","localStorage","clear","random","substring","setItem","getFingerprintFromStorage","getItem","PlayerSpot","playerName","buttonLabel","dialogTitle","confirmLabel","onConfirm","isDisabled","btnClassName","React","setOpen","Dialog","DialogTitle","DialogActions","StartGameButton","startGame","DrawerComp","drawerProps","Drawer","NameInputDrawer","createPlayer","playerId","name","handleSubmit","input","title","anchor","variant","onKeyUp","which","aria-describedby","PreGameLobby","players","gameLink","join","player","StatusWithTooltip","tooltipTitle","Tooltip","actionIcons","RAISED","CALLED","CHECKED","Status","isWinningPlayer","isQuestionRoundOver","changeInMoney","isDead","hasFolded","allPlayersPlacedTheirGuess","playerHasPlacedTheirGuess","isTurnPlayer","playerIsAllIn","playerAction","bettingState","calculateBettingRoundSpendingForPlayer","bettingRound","bets","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","remainingPlayers","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","values","hasPlayerFolded","foldedPlayerIds","getRevealAnswer","questionRound","isOver","raise","placeBet","currentBettingRound","currentPlayer","moneyOfPlayer","find","money","min","addGuess","addGuessMutation","playerSeatingOrder","PlayerComp","index","numberOfPlayers","isAppPlayer","isShowdown","isSpectator","isGameOver","isTurnPlayerClass","isAppPlayerClass","isDeadClass","bettingRoundSpending","revealGuess","positionIndex","playerMoney","Pot","usedQuestionRound","isGameFull","totalPot","br","forEach","positioning","styles","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","Hints","numberOfHints","slice","hint","Question","noHints","totalQuestions","getNumberOfDecimals","val","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","MarkerContainer","markers","useMap","bounds","latLngBounds","extend","isValid","flyToBounds","padding","maxZoom","FeatureGroup","memo","handleOnClick","answerMarker","m","isAnswer","distanceLines","distanceToAnswer","line","LatLng","label","toFixed","MapContainer","center","zoom","maxBounds","maxBoundsViscosity","scrollWheelZoom","TileLayer","attribution","url","Polyline","positions","color","weight","direction","permanent","radiusInKilometres","Circle","radius","offset","prevProps","nextProps","equals","GuessMap","playerGuess","g","mapMarkers","difference","pId","p","Map","MultipleChoiceOptions","handleClick","active","hiddenAlternatives","revealAnswer","optionClassName","PokerTable","isGeoQuestion","isMultipleChoiceQuestion","winningPlayerIds","winners","getWinningPlayerArray","results","Player","NumberInput","setGuess","DateInput","dayPlaceholder","monthPlaceholder","yearPlaceholder","calendarClassName","showLeadingZeros","calendarIcon","date","stringValue","replaceAll","submit","mm","getMonth","dd","getDate","getFullYear","formatDateToString","MultipleChoiceInput","AnswerDrawer","showAnswerDrawer","setShowAnswerDrawer","hasPlayerPlacedGuessInCurrentQuestionRound","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","MapInput","getInput","ActionButton","text","RaiseInputDrawer","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","ActionButtons","isAppPlayerTurn","call","fold","Footer","appPlayerAnswer","appPlayerMoney","isPlaying","size","strokeWidth","duration","colors","trailColor","LeaveGameButton","soundInterval","gameHasStarted","setPlayerId","removeItem","deletePlayerIdFromStorage","removePlayer","ConfirmDialogButton","ErrorBoundary","state","hasError","errorInfo","this","errorMessage","replace","props","Component","vibrate","t","GameComponent","setGame","showNewQuestionRoundForSpectator","setShowNewQuestionRoundForSpectator","Audio","notificationSound","playNotification","alertSound","playAlert","errorHandler","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","clearInterval","gameUpdated","cqr","cbr","allPlayersPlacedTheirBet","play","setInterval","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","previousQuestionRound","getPreviousQuestionRound","GameWithErrorBoundary","PageNotFound","App","to","path","component","exact","Game","hostname","match","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"u+IAGO,IAAMA,EAAoBC,IAAH,KAQjBC,EAAsBD,IAAH,KAgBnBE,EAAiBF,IAAH,KAUdG,EAAiBH,IAAH,KAmEdI,EAA0BJ,IAAH,KAmEvBK,EAAgBL,IAAH,KAUbM,EAAaN,IAAH,KAMVO,EAAYP,IAAH,KAMTQ,EAAYR,IAAH,KAUTS,EAAgBT,IAAH,KC3MX,MAA0B,iDCA1B,MAA0B,iDCA1B,MAA0B,iDCA1B,MAA0B,iDCA1B,MAA0B,qDCQ1B,SAASU,IACtB,OACE,yBAAKC,UAAU,+FACb,yBAAKA,UAAU,kFACb,yBAAKC,IAAKC,EAAkBF,UAAU,aAAaG,IAAI,gBAEzD,yBAAKH,UAAU,kFACb,yBAAKC,IAAKG,EAAkBJ,UAAU,aAAaG,IAAI,gBAEzD,yBAAKH,UAAU,kFACb,yBAAKC,IAAKI,EAAkBL,UAAU,aAAaG,IAAI,gBAEzD,yBAAKH,UAAU,yGACf,yBAAKA,UAAU,kGACb,yBAAKC,IAAKK,EAAkBN,UAAU,aAAaG,IAAI,gBAGzD,yBAAKH,UAAU,wFACb,yBACEC,IAAKM,EACLP,UAAU,oBACVG,IAAI,iB,IC7BFK,EAOAC,E,0FAPAD,K,UAAAA,E,sBAAAA,E,kCAAAA,E,aAAAA,M,cAOAC,K,kBAAAA,E,gBAAAA,E,iBAAAA,M,KCPZ,IA6CeC,GA7CW,CACxBC,GAAI,UACJC,GAAI,SACJC,GAAI,UACJC,GAAI,UACJC,GAAI,SACJC,GAAI,YACJC,GAAI,WACJC,GAAI,WACJC,GAAI,OACJC,GAAI,WACJC,GAAI,cACJC,GAAI,YACJC,GAAI,YACJC,GAAI,WACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,WACJC,GAAI,UACJC,GAAI,QACJC,GAAI,SACJC,GAAI,YACJC,GAAI,SACJC,GAAI,UACJC,GAAI,WACJC,GAAI,SACJC,GAAI,UACJC,GAAI,aACJC,GAAI,YACJC,GAAI,YACJC,GAAI,YACJC,GAAI,SACJC,GAAI,aACJC,GAAI,WACJC,GAAI,UACJC,GAAI,UACJC,GAAI,YACJC,GAAI,YACJC,GAAI,UACJC,GAAI,OACJC,GAAI,UACJC,GAAI,c,yBChCS,SAASC,GAAT,GAA8D,IAAD,MAA5CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,aACnD,IAAKF,EAAO,OAAO,KACnB,OAAQC,GACN,KAAK/C,EAAciD,UACjB,IAAMC,EACuB,kBAApBJ,EAAMK,UACTL,EAAMK,UACNC,WAAWN,EAAMK,WAAa,IACpC,OAAIE,MAAMH,GACD,KAEF,+BAAO,IAAII,KAAKC,cAAeC,OAAON,IAC/C,KAAKlD,EAAcyD,KACjB,OAAKX,EAAMK,UAIT,8BACGO,KAAOZ,EAAMK,UAAUQ,WAAY,YAAYH,OAC9C,iBALG,KASX,KAAKxD,EAAc4D,IACjB,OAAO,mDAAWd,EAAMe,WAAjB,aAAW,EAAWC,SAAtB,uBAAmChB,EAAMe,WAAzC,aAAmC,EAAWE,UAA9C,MACT,KAAK/D,EAAcgE,gBACjB,GAA6B,KAAb,OAAZhB,QAAY,IAAZA,OAAA,EAAAA,EAAciB,QAChB,MAAM,IAAIC,MAAM,qDAElB,OAAO,8BAAOlB,EAAY,UAACF,EAAMK,iBAAP,SAAqB,IACjD,QACE,MAAM,IAAIe,MAAM,0BC0OPC,OA5Of,YAMW,IALTC,EAKQ,EALRA,KACAC,EAIQ,EAJRA,YACAC,EAGQ,EAHRA,UACAC,EAEQ,EAFRA,gBACAC,EACQ,EADRA,iBAEMC,EAAUC,cADR,EAEgCC,oBAAS,GAFzC,mBAEDC,EAFC,KAEaC,EAFb,OAGgBF,qBAHhB,mBAGDG,EAHC,KAGKC,EAHL,OAIsBJ,mBAAS,IAJ/B,mBAIDK,EAJC,KAIQC,EAJR,OAK0BN,mBAAgB,GAL1C,mBAKDO,EALC,KAKUC,EALV,OAMwBR,qBANxB,mBAMDS,EANC,KAMSC,EANT,OAOcV,qBAPd,mBAOEW,GAPF,aAS6BC,YAAYzG,EAAqB,CACpE0G,UAAW,CACTR,UACAS,UAAWX,EACXI,YAAaA,EACbE,YAEFM,YAAa,WACPR,EACFT,EAAQkB,KAAR,qBAA2BX,IAE3BV,IAEFC,EAAgB,CAACS,IACjBR,EAAiBY,GAAY,MAC7Bf,IACAY,EAAW,IACXF,OAAQa,GACRf,GAAgB,IAElBgB,QAAS,SAACC,GACRR,GAAS,WACP,MAAMQ,QA/BJ,mBASDC,EATC,KASkBC,EATlB,KASkBA,MAoCpBC,EAAUrB,EACd,oCACE,uBAAGpF,UAAU,QAAb,6CAC6C,IAC3C,uBACEA,UAAU,oCACV0G,OAAO,SACPC,IAAI,sBACJC,KAAK,wGAJP,QAFF,KAYA,kBAAC,KAAD,CACEC,OAxBe,SAACC,GACpBzB,GAAgB,GAChBE,EChFW,SACbuB,GAEA,OAAOA,EAAKC,KAAI,SAACC,GAAS,IAiBpBxD,EAjBmB,EAcnBwD,EAAI1B,KAZN2B,EAFqB,EAErBA,SACAC,EAHqB,EAGrBA,KACQC,EAJa,EAIrBC,OACA9C,EALqB,EAKrBA,SACAC,EANqB,EAMrBA,UACA8C,EAPqB,EAOrBA,gBACAC,EARqB,EAQrBA,MACAC,EATqB,EASrBA,MACAC,EAVqB,EAUrBA,YACAC,EAXqB,EAWrBA,6BACAC,EAZqB,EAYrBA,6BACAC,EAbqB,EAarBA,6BAEIC,EAAQ,CAACN,EAAOC,GAAOM,OAAOC,SAC9BV,EAAiB,GAEvB,OAAQF,GACN,KAAK1G,EAAciD,UAGnB,KAAKjD,EAAcyD,KACjBmD,EAAOzD,UAAYwD,EACnB,MACF,KAAK3G,EAAc4D,IACjBgD,EAAO/C,IAAM,CACXC,SAAUA,EACVC,UAAWA,EACX8C,gBAAiBA,GAEnB,MACF,KAAK7G,EAAcgE,gBACjB4C,EAAOzD,UAAY,EACnBH,EAAe,CACb2D,EACAM,EACAC,EACAC,GAEF,MACF,QACE,MAAM,IAAIjD,MAAM,yBAEpB,MAAO,CACLuC,WACAC,OACAE,SACAQ,QACAJ,cACAhE,mBD2BMuE,CAAejB,KAuBnBT,QApBgB,SAACC,EAAU0B,EAAWC,EAAgBC,GAC1DC,QAAQ3B,MAAMF,IAoBV8B,OAAQ,CAAEC,QAAQ,GAClBC,iBAAe,EACfC,kBAAkB,WAElB,0EAIJ,oCACE,yBAAKvI,UAAU,QACb,2BACEwI,MAAOhD,EACPiD,SAAU,SAACC,GACTjD,EAAWiD,EAAEhC,OAAO8B,QAEtBtB,KAAK,OACLlH,UAAU,4DACV2I,YAAY,4BACZC,aAAW,4BACXC,UAAQ,EACRC,WAAS,IAEX,4BACE9I,UAAU,uDACV6I,UAAQ,EACRL,MAAO5C,EACP6C,SAAU,SAACC,GACT7C,EAAY6C,EAAEhC,OAAO8B,SAGvB,4BAAQO,UAAQ,GAAhB,eACCC,OAAOC,KAAKC,IAAcnC,KAAI,SAACoC,GAAD,OAC7B,4BAAQC,IAAKD,EAAMX,MAAOW,GACvBE,YAAuBF,GAAO,IAC9BD,GAAaC,SAKtB,wBAAInJ,UAAU,sBAAd,uBACA,8BACEsF,GAAQ,IAAIyB,KAAI,SAACuC,GAAD,iBAChB,yBAAKF,IAAKE,EAAErC,SAAUjH,UAAU,SAC9B,uBAAGA,UAAU,QAAb,aACY,2BAAIsJ,EAAErC,WAGjBqC,EAAEpC,OAAS1G,EAAcgE,iBACxB,oCACE,uBAAGxE,UAAU,QAAb,UACU,IACR,2BACE,kBAACqD,GAAD,CACEC,MAAOgG,EAAElC,OACT7D,aAAc+F,EAAEpC,KAChB1D,aAAc8F,EAAE9F,kBAIrB,UAAA8F,EAAElC,OAAO/C,WAAT,eAAcgD,kBACb,uBAAGrH,UAAU,QAAb,2BAC0B,2BAAIsJ,EAAElC,OAAO/C,IAAIgD,sBAK/C,UAACiC,EAAE1B,aAAH,aAAC,EAASnD,SACV,uBAAGzE,UAAU,QAAb,SACS,IACNsJ,EAAE1B,MAAMb,KAAI,SAACwC,GAAD,OACX,oCACE,6BACA,0BAAMH,IAAKG,GACT,2BAAIA,YAMZ,UAACD,EAAE9F,oBAAH,aAAC,EAAgBiB,SACjB,uBAAGzE,UAAU,QAAb,gBACgB,IACbsJ,EAAE9F,aAAauD,KAAI,SAAC5G,EAAKqJ,GAAN,OAClB,oCACE,6BACA,0BAAMJ,IAAKjJ,GACT,uBAAGH,UAAiB,IAANwJ,EAAU,iBAAmB,IAAKrJ,SAMzDmJ,EAAE9B,aACD,uBAAGxH,UAAU,QAAb,gBACe,2BAAIsJ,EAAE9B,cAGvB,wBAAIxH,UAAU,aAGlB,yBAAKA,UAAU,QACb,2BACEkH,KAAK,WACLlH,UAAU,OACVyJ,GAAG,oBACHjB,MAAO9C,EACP+C,SAAU,WACR9C,EAAaD,EAAY,EAAI,MAGjC,2BAAO1F,UAAU,OAAO0J,QAAQ,qBAAhC,wBAEE,6BACA,sHAMJ,yBAAK1J,UAAU,aACb,4BACEA,UAAU,0HACV2J,UAAWnE,IAAYI,EACvBgE,QAAS,WACPrD,MAJJ,UASA,4BACEvG,UAAU,iJACV4J,QAAS,WACPvE,GAAgB,KAHpB,qBAYN,OACE,kBAACwE,GAAA,EAAD,CACEC,eAAa,EACbC,qBAAmB,EACnBC,kBAAgB,EAChBpF,KAAMA,EACN5E,UAAU,uCACViK,QAASpF,EACTqF,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbC,QAAS,MAGX,yBAAKtK,UAAU,+GACb,yBAAKA,UAAU,0DACb,wBAAIA,UAAU,iBAAd,2CAGCyG,EACAD,GAAS,yBAAKxG,UAAU,sBAAsBwG,EAAM+D,a,SExOhD5F,OAzBf,YAA8D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAa2F,EAAmB,EAAnBA,SACxC,OACE,kBAACX,GAAA,EAAD,CACEC,eAAa,EACbC,qBAAmB,EACnBC,kBAAgB,EAChBpF,KAAMA,EACN5E,UAAU,uCACViK,QAASpF,EACTqF,sBAAoB,EACpBC,kBAAmBC,KACnBC,cAAe,CACbC,QAAS,MAGX,yBAAKtK,UAAU,qJACb,4BAAQ4J,QAAS/E,EAAa7E,UAAU,0BACtC,kBAAC,KAAD,OAEDwK,K,OC+KMC,OAtLf,YAMW,IALTC,EAKQ,EALRA,KACA9F,EAIQ,EAJRA,KACAC,EAGQ,EAHRA,YACA8F,EAEQ,EAFRA,WACA7F,EACQ,EADRA,UAEMG,EAAUC,cADR,EAE0CC,oBAAS,GAFnD,mBAEDyF,EAFC,KAEkBC,EAFlB,OAGgC1F,mBAAmB,IAHnD,mBAGD2F,EAHC,KAGa/F,EAHb,OAIkCI,mBAAS,MAJ3C,mBAID4F,EAJC,KAIc/F,EAJd,OAK0BG,mBAAmB,IAL7C,mBAKD6F,EALC,KAKUC,EALV,OAMc9F,qBANd,mBAMEW,GANF,WAQRoF,qBAAU,WACR,IAAMF,EACJN,EACGS,QAAiB,SAACC,EAAiBC,GAIlC,OAHKD,EAAgBE,SAASD,EAAEzF,WAC9BwF,EAAgBjF,KAAKkF,EAAEzF,UAElBwF,IACN,IACFG,MAAK,SAACC,EAAGC,GACR,MAAU,OAAND,GACM,EAEHE,SAASF,GAAKE,SAASD,OAC1B,GACVR,EAAaD,GACbhG,EAAiBgG,EAAUM,SAAS,MAAQ,KAAON,EAAU,IACzC,IAAhBN,EAAKjG,QACPM,EAAgB,CAAC2F,EAAK,GAAGlF,YAE1B,CAACkF,IA5BI,MA8B0B3E,YAE/B3G,EAAmB,CACpB4G,UAAW,CACT2F,SAAUb,GAEZ5E,YAAa,YAAqB,IAAlB0F,EAAiB,EAAjBA,WACd3G,EAAQkB,KAAR,WAAiByF,EAAWnC,MAE9BpD,QAAS,SAACC,GACRR,GAAS,WACP,MAAMQ,QAzCJ,mBA8BDsF,EA9BC,KA8BaC,EA9Bb,KA8BaA,QAiBfC,EAAiC,MADlB7G,EAAQ8G,SAArBC,SAGFC,EAAgB,uCAAG,sBAAAT,EAAA,sDACnBV,EAAarG,QACfmH,IAFqB,2CAAH,qDAMtB,OACE,oCACE,kBAAC,GAAD,CAAOhH,KAAMA,EAAMC,YAAaA,GAC9B,wBAAI7E,UAAU,2BAAd,6CAGC8L,GACC,uBAAG9L,UAAU,0FAAb,mGAGE,6BACA,4BACE4J,QAAO,sBAAE,sBAAA4B,EAAA,sEACDU,UAAUC,UAAUC,UAAUC,OAAON,SAASnF,MAD7C,2CAGT5G,UAAU,oFAETqM,OAAON,SAASnF,KANnB,IAMyB,kBAAC,KAAD,CAAQ5G,UAAU,mBAI/C,uBAAGA,UAAU,sBAAb,cACA,yBAAKA,UAAU,aACZgL,EAAUjE,KAAI,SAACnB,GAAD,OACb,0BACEwD,IAAKxD,EACL5F,UAAS,mFACP4F,IAAamF,EACT,cACA,gCAENnB,QAAS,WACP5E,EAAiBY,IAEnB0G,MAAO,CACLC,OAAQ3G,IAAamF,EAAgB,UAAY,YAGlD1B,YAAuBzD,QAI7BoD,OAAOC,KAAKC,IAAcoC,SAASP,IAClC,uBAAG/K,UAAU,sBACVkJ,GAAa6B,GADhB,mBAKF,yBAAK/K,UAAU,sBACZ0K,EACE7C,QAAO,SAACwD,GAAD,OAAOA,EAAEzF,WAAamF,KAC7BhE,KAAI,SAACyF,GAAD,OACH,0BACEpD,IAAKoD,EAAIhH,QACTxF,UAAS,sJACK,OAAZ8K,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,SAASkB,EAAIhH,UACvB,yBACA,IAEN8G,MAAO,CACLG,WAAW,QAAD,OAAUC,KAAKC,MACvBD,KAAKE,IAAIJ,EAAIhH,QAAQf,OAAQ,QAGjCmF,QAAS,SAAClB,GACJA,EAAEmE,SACJ,OAAI/B,QAAJ,IAAIA,OAAJ,EAAIA,EAAcQ,SAASkB,EAAIhH,UAC7BT,EACE+F,EAAajD,QACX,SAACrC,GAAD,OAAagH,EAAIhH,UAAYA,MAIjCT,EAAgB,CAACyH,EAAIhH,SAAN,mBAAkBsF,KAGnC/F,EAAgB,CAACyH,EAAIhH,YAIxBgH,EAAIhH,QA5BP,KA4BkBgH,EAAIM,kBA5BtB,SAiCN,uBAAG9M,UAAU,WAAb,gDACgD,IAC9C,4BACE4J,QAAS,WACPiB,GAAqB,GACrBhG,KAEF7E,UAAU,kEALZ,QAFF,KAcA,4BACEA,UAAU,uIACV4J,QAASqC,EACTtC,UAAWmB,EAAarG,QAEvBoH,EAAU,aAAe,kBAG9B,kBAAC,GAAD,CACEjH,KAAMgG,EACN/F,YAAa,WACX8F,IACAE,GAAqB,IAEvB7F,iBAAkBA,EAClBD,gBAAiBA,EACjBD,UAAWA,MCzLJ,SAASiI,GAAT,GAIJ,IAAD,IAHRrC,YAGQ,MAHD,GAGC,EADR5F,GACQ,EAFRU,QAEQ,EADRV,WAEMG,EAAUC,cADR,EAEkDC,oBAAS,GAF3D,mBAED6H,EAFC,KAEsBC,EAFtB,KAYR,OARA/B,qBAAU,WAE+B,MADlBjG,EAAQ8G,SAArBC,UAGNiB,GAAyB,KAE1B,CAAChI,IAGF,oCACE,yBAAKjF,UAAU,0DACb,wBAAIA,UAAU,YACZ,0BAAMA,UAAU,qBAAhB,8BACA,6BAFF,mCAKA,uBAAGA,UAAU,gBACX,mCADF,4BAGA,4BACE4J,QAAS,WACPqD,GAAyB,IAE3BjN,UAAU,qMAJZ,eAQA,uBAAGA,UAAU,SAAb,sBACsB,IACpB,uBACEA,UAAU,wCACV4G,KAAK,mGACLF,OAAO,SACPC,IAAI,uBAJN,QAFF,MAaF,kBAAC,GAAD,CACE+D,KAAMA,EACN5F,UAAWA,EACXF,KAAMoI,EACNrC,WAAY,WACVsC,GAAyB,IAE3BpI,YAAa,WACXoI,GAAyB,O,OCjCpBC,OA3Bf,WAAkB,IACR1H,EAAY2H,cAAZ3H,QADO,EAEOL,qBAFP,mBAELW,GAFK,aAGqBsH,YAEjC7N,EAAgB,CACjB8N,YAAa,WACbhH,QAAS,SAACC,GACRR,GAAS,WACP,MAAMQ,MAGVN,UAAW,CAAER,aAZA,mBAGRV,EAHQ,KAGW4F,EAHX,KAGKpF,KAgBpB,OAJA4F,qBAAU,WACRpG,MACC,CAACA,EAAWU,IAGb,yBAAKxF,UAAU,qDACb,kBAAC+M,GAAmB,CAAErC,KAAI,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAMA,KAAMlF,UAASV,cACjD,kBAAC/E,EAAD,Q,SChCAuN,GAAgB,YAChBC,GAAkB,cAYXC,GAA0B,SAACC,GAEtCC,aAAaC,QAEb,IAAMnF,EAAQkE,KAAKkB,SAASzJ,SAAS,IAAI0J,UAAU,GAEnD,OADAH,aAAaI,QAAb,UAAwBP,GAAxB,YAA2CE,GAAUjF,GAC9CA,GAGIuF,GAA4B,SAACN,GAAD,OACvCC,aAAaM,QAAb,UAAwBT,GAAxB,YAA2CE,KCP9BQ,OAVf,YAA4C,IAAtBC,EAAqB,EAArBA,WACpB,OACE,yBAAKlO,UAAU,8EACb,0BAAMA,UAAU,0CACbkO,K,8BCIM,eAOD,IANZC,EAMW,EANXA,YACAC,EAKW,EALXA,YACAC,EAIW,EAJXA,aACAC,EAGW,EAHXA,UACAC,EAEW,EAFXA,WACAC,EACW,EADXA,aACW,EACaC,IAAMtJ,UAAS,GAD5B,mBACJP,EADI,KACE8J,EADF,KAML7J,EAAc,WAClB6J,GAAQ,IAQV,OACE,oCACE,4BACE1O,UACEwO,GACA,0HAEF5E,QApBkB,WACtB8E,GAAQ,IAoBJ/E,SAAU4E,GAETJ,GAEH,kBAACQ,GAAA,EAAD,CAAQ/J,KAAMA,EAAMqF,QAASpF,GAC3B,yBAAK7E,UAAU,aACb,kBAAC4O,GAAA,EAAD,KAAcR,GACd,kBAACS,GAAA,EAAD,KACE,4BAAQ7O,UAAU,uBAAuB4J,QAAS/E,GAAlD,UAGA,4BACE7E,UAAU,0HACV4J,QA1BU,WACpB0E,IACAI,GAAQ,KA0BGL,QC5BAS,OAff,YAAoE,IAAzCC,EAAwC,EAAxCA,UAAWtB,EAA6B,EAA7BA,OAAQc,EAAqB,EAArBA,WAI5C,OACE,kBAAC,GAAD,CACED,UALc,WAChBS,EAAU,CAAE/I,UAAW,CAAEyH,aAKvBW,YAAY,uFACZC,aAAa,aACbF,YAAY,aACZI,WAAYA,K,mCChBH,SAASS,GAAT,GAIJ,IAHTxE,EAGQ,EAHRA,SACAP,EAEQ,EAFRA,QACGgF,EACK,uCACR,OACE,kBAACC,GAAA,EAAD,gBAEOD,GAGL,yBAAKjP,UAAU,wDACZiK,GACC,0BACER,GAAG,eACHzJ,UAAU,2BACV4J,QAASK,GAHX,UASF,yBAAKjK,UAAU,wDACZwK,KCfI,SAAS2E,GAAT,GAIJ,IAHTC,EAGQ,EAHRA,aACA3B,EAEQ,EAFRA,OACA4B,EACQ,EADRA,SACQ,EACgBlK,mBAAS,IADzB,mBACDmK,EADC,KACK9J,EADL,KAGF+J,EAAe,WACdF,GACHD,EAAa,CAAEpJ,UAAW,CAAEwJ,MAAO,CAAE/B,SAAQS,WAAYoB,OAI7D,OACE,kBAAC,GAAD,CACEG,MAAM,YACNC,OAAQ,SACR9K,MAAOyK,EACPM,QAAQ,aAER,oCACE,uBAAG3P,UAAU,aAAb,mBACA,uBAAGA,UAAU,gBAAb,YAEA,yBAAKA,UAAU,0BACb,2BACEwI,MAAO8G,EACP7G,SAAU,SAACC,GACTlD,EAAQkD,EAAEhC,OAAO8B,QAEnBoH,QAAS,SAAClH,GACQ,KAAZA,EAAEmH,OACJN,KAGJrI,KAAK,OACLlH,UAAU,uCACV2I,YAAY,YACZC,aAAW,cACXkH,mBAAiB,eACjBhH,WAAS,IAEX,4BACE5B,KAAK,SACLyC,UAAW2F,EAAK7K,OAChBzE,UAAU,kIACV4J,QAAS2F,GAJX,aCYKQ,I,GAAAA,GArDf,YAQW,IAPTC,EAOQ,EAPRA,QACAC,EAMQ,EANRA,SACAlB,EAKQ,EALRA,UACAtB,EAIQ,EAJRA,OACA2B,EAGQ,EAHRA,aACAC,EAEQ,EAFRA,SACA1D,EACQ,EADRA,SAEA,OACE,oCACE,yBAAK3L,UAAU,iFACb,sFACA,yBAAKA,UAAU,qGACb,0BAAMA,UAAU,SAASiQ,GACzB,4BACEjQ,UAAU,2EACV4J,QAAO,sBAAE,sBAAA4B,EAAA,sEACDU,UAAUC,UAAUC,UAAUC,OAAON,SAASnF,MAD7C,4CAIT,kBAAC,KAAD,QAGJ,wBAAI5G,UAAU,2BAAd,eACe2L,EAASlH,OAAS,EAAI,IAAM,GAD3C,KACiDkH,EAASuE,KAAK,OAE/D,uBAAGlQ,UAAU,oBAAb,WACA,uBAAGA,UAAU,yEA9Ba,GA+BFgQ,EAAQvL,OADhC,aA9B0B,GAgCFuL,EAAQvL,SAAW,EAAI,GAAK,KAEpD,6BACA,yBAAKzE,UAAU,uEACZgQ,EAAQjJ,KAAI,SAACoJ,GAAD,OACX,kBAAC,GAAD,CAAY/G,IAAK+G,EAAO1G,GAAIyE,WAAU,OAAEiC,QAAF,IAAEA,OAAF,EAAEA,EAAQb,WAGnDD,GACC,yBAAKrP,UAAU,oBACb,kBAAC,GAAD,CACE+O,UAAWA,EACXtB,OAAQA,EACRc,WAAYyB,EAAQvL,QAAU,MAKtC,kBAAC0K,GAAoB,CAAE1B,SAAQ2B,eAAcC,e,gDCpD7Ce,GAAoB,SAAC,GAAD,IACxBC,EADwB,EACxBA,aACA7F,EAFwB,EAExBA,SAFwB,OAOxB,kBAAC8F,GAAA,EAAD,CAASb,MAAOY,GACd,8BAAO7F,KAIL+F,IAAW,sBACd9P,EAAc+P,OACb,kBAAC,GAAD,CAAmBH,aAAa,UAC9B,kBAAC,KAAD,QAHW,gBAMd5P,EAAcgQ,OACb,kBAAC,GAAD,CAAmBJ,aAAa,UAC9B,kBAAC,KAAD,QARW,gBAWd5P,EAAciQ,QACb,kBAAC,GAAD,CAAmBL,aAAa,WAC9B,kBAAC,KAAD,QAbW,IA6GFM,OA9Ef,YAWW,IAVTR,EAUQ,EAVRA,OACAS,EASQ,EATRA,gBACAC,EAQQ,EARRA,oBACAC,EAOQ,EAPRA,cACAC,EAMQ,EANRA,OACAC,EAKQ,EALRA,UACAC,EAIQ,EAJRA,2BACAC,EAGQ,EAHRA,0BACAC,EAEQ,EAFRA,aACAC,EACQ,EADRA,cAEA,GAAIL,EACF,OACE,kBAAC,GAAD,CAAmBV,aAAa,OAC9B,kBAAC,KAAD,OAIN,GAAIW,EACF,OACE,kBAAC,GAAD,CAAmBX,aAAa,UAC9B,kBAAC,KAAD,OAIN,GAAIe,EACF,OACE,kBAAC,GAAD,CAAmBf,aAAa,UAC9B,kBAAC,KAAD,OAIN,GAAIQ,EACF,OAAID,EACK,kBAAC,KAAD,MAELE,GAAiBA,EAAgB,EAC5B,kBAAC,KAAD,MAELA,GAAiBA,EAAgB,EAC5B,kBAAC,KAAD,MAEF,KAET,IAAKG,EACH,OAAIC,EAEA,kBAAC,GAAD,CAAmBb,aAAa,2BAC9B,kBAAC,KAAD,OAKF,kBAAC,GAAD,CAAmBA,aAAa,2BAC9B,kBAAC,KAAD,OAKR,GAAIc,EACF,OACE,kBAAC,GAAD,CAAmBd,aAAa,iBAC9B,kBAAC,KAAD,CAAQrQ,UAAU,kBAIxB,IAAMqR,EAAelB,EAAOmB,aAC5B,OAAID,GAAgBd,GAAYc,GACvBd,GAAYc,GAGnB,kBAAC,GAAD,CAAmBhB,aAAa,oBAC9B,kBAAC,KAAD,QC3HOkB,GAAyC,SACpDC,EACAnC,GAEA,OAAOmC,EAAaC,KAAKtG,QACvB,SAACuG,EAAKC,GAAN,OAAcD,GAAOC,EAAItC,WAAaA,EAAWsC,EAAIC,OAAS,KAC9D,IAISC,GAA0B,SAACC,GAAD,oBACrCA,QADqC,IACrCA,OADqC,EACrCA,EAAMC,gBAAmB,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMC,sBAAN,eAAsBtN,QAAS,IAKzCuN,GAAyB,SAACC,GAAD,oBACpCA,QADoC,IACpCA,OADoC,EACpCA,EAAsBC,eACA,OAApBD,QAAoB,IAApBA,GAAA,UAAAA,EAAsBC,qBAAtB,eAAqCzN,QAAS,IAGrC0N,GAAiC,SAC5CF,EACAjC,GAEA,IAAMoC,EAAmBpC,EAAQnI,QAAO,SAACsI,GAAD,OAAaA,EAAOY,UAC5D,OAAOkB,EAAqBI,QAAQ5N,QAAU2N,EAAiB3N,QAGpD6N,GAAwB,SACnCd,EACAnC,GAEA,IAAKmC,EAAaC,KAAKhN,OAAQ,OAAO,EACtC,IAAM8N,EAAmChB,GACvCC,EACAnC,GAGImD,EAAqChB,EAAaC,KAAKtG,QAC3D,SAACsH,EAAKd,GAEJ,OADAc,EAAId,EAAItC,WAAaoD,EAAId,EAAItC,WAAa,GAAKsC,EAAIC,OAC5Ca,IAET,IAGF,OACE/F,KAAKgG,IAAL,MAAAhG,KAAI,YAAQ1D,OAAO2J,OAAOH,KAC1BD,GAISK,GAAkB,SAC7BX,EACA5C,GAF6B,cAG1B4C,QAH0B,IAG1BA,OAH0B,EAG1BA,EAAsBY,gBAAgBvH,SAAS+D,IAEvCyD,GAAkB,SAACC,GAC9B,QAAIA,EAAcC,SAGdD,EAAc9L,SAASC,OAAS1G,EAAcgE,gBACzCuO,EAAcb,cAAczN,QAAU,EAG7CsO,EAAc9L,SAASW,MAAMnD,OAAS,EAAIsO,EAAcb,cAAczN,SCJ7DwO,GAAQ,SACnBrB,EACAsB,EACApB,EACAzC,GACI,IAAD,IACG4C,EAAuBJ,GAAwBC,GAC/CqB,EAAsBnB,GAAuBC,GACnD,GACGA,IACkB,OAAnBkB,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAc3J,MAAO4F,EAF5C,CAQA,GADqBiD,GAAsBa,EAAqB9D,GAC7CuC,EACjB,MAAM,IAAIlN,MAAM,iDAGlB,IAAM2O,EAAa,oBACjBvB,EAAK9B,QAAQsD,MAAK,qBAAG7J,KAAgB4F,YADpB,aACjB,EAAgDkE,aAD/B,QACwC,EAE3DL,EAAS,CACPlN,UAAW,CACTwJ,MAAO,CACL/B,OAAQqE,EAAKrI,GACb4F,SAAUA,EACVuC,OAAQlF,KAAK8G,IAAI5B,EAAQyB,SC1FpBI,GAAW,SACtBC,EACA5B,EACAxO,EACA+L,GAEAqE,EAAiB,CACf1N,UAAW,CACTwJ,MAAO,CACL/B,OAAQqE,EAAKrI,GACb4F,SAAUA,EACV/L,aCHFqQ,I,OAAqB,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,IAmIjDC,GA9GI,SAAC,GAiBN,IAhBZzD,EAgBW,EAhBXA,OACA0D,EAeW,EAfXA,MACAC,EAcW,EAdXA,gBACA3C,EAaW,EAbXA,aACA4C,EAYW,EAZXA,YACAnD,EAWW,EAXXA,gBACAC,EAUW,EAVXA,oBACAmD,EASW,EATXA,WACAb,EAQW,EARXA,oBACArC,EAOW,EAPXA,cACAE,EAMW,EANXA,UACAiD,EAKW,EALXA,YACAhD,EAIW,EAJXA,2BACA3N,EAGW,EAHXA,MACA2D,EAEW,EAFXA,SACAiN,EACW,EADXA,WAEMC,EACJhD,IAAiBN,EAAsB,eAAiB,GACpDuD,EAAmBL,EAAc,cAAgB,cACjDM,EAAclE,EAAOY,OAAS,UAAY,GAE1CuD,EAAuBnB,EACzB5B,GAAuC4B,EAAqBhD,EAAO1G,IACnE,EACE8K,GACI,OAARtN,QAAQ,IAARA,OAAA,EAAAA,EAAUC,QAAS1G,EAAc4D,MAChC6P,KAAkBpD,GAAuBmD,IAAehD,GAErDwD,EAAgBb,GAAmB9L,QAAO,SAAC2B,GAAD,OAAOA,GAAKsK,KAC1DD,GAGEY,EAActE,EAAOoD,MAKzB,OAJI1C,IAAwBqD,IAC1BO,GAAeH,GAIf,yBACEtU,UAAS,wBAAmBwU,EAAnB,sBAA8CL,EAA9C,YAAmEC,EAAnE,YAAuFC,EAAvF,iBAET,0BACErU,UAAS,yCACP6Q,GAAuBC,GAAiBA,EAAgB,EACpD,eACA,gBAGN,kBAAC,GACK,CACFX,SACAS,kBACAO,eACAL,gBACAD,sBACAE,OAAQZ,EAAOY,OACfC,YACAC,6BACAC,4BAA6B5N,EAC7B8N,eAAgBjB,EAAOY,QAA2B,IAAjBZ,EAAOoD,SAI9C,yBAAKvT,UAAU,QACb,0BAAMA,UAAU,QAAQmQ,EAAOb,MAC/B,yBAAKtP,UAAU,qBACb,kBAAC,KAAD,CAASA,UAAU,SACnB,8BAAOyU,GACN5D,GAAuBC,GACtB,0BACE9Q,UAAS,eACP8Q,EAAgB,EAAI,iBAAmB,iBAF3C,IAKIA,EAAgB,EAAI,IAAM,GAC3BA,EANH,MAUJ,yBAAK9Q,UAAU,sIACX6Q,KAAyByD,GACzB,yBAAKtU,UAAU,qBACb,0BAAMA,UAAU,QACd,kBAAC,KAAD,OAEF,8BAAOsU,IAGVC,IAAW,OAAItN,QAAJ,IAAIA,OAAJ,EAAIA,EAAUC,QAAzB,OAAiC5D,QAAjC,IAAiCA,OAAjC,EAAiCA,EAAOA,QACvC,yBAAKtD,UAAU,qBACb,0BAAMA,UAAU,QACd,kBAAC,KAAD,OAEF,kBAAC,GACK,CACFsD,MAAK,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAOA,MACdC,aAAc0D,EAASC,KACvB1D,aAAcyD,EAASzD,oBC/H1B,SAASkR,GAAT,GAAwD,IAAzCC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,WACzCC,EAAQ,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAmBzC,cAAc/G,QAAO,SAACuG,EAAKoD,GAI7D,OAHAA,EAAGrD,KAAKsD,SAAQ,SAACpD,GACfD,GAAOC,EAAIC,UAENF,IACN,GAEGsD,EAAcJ,EAChB,yBACA,0BAEJ,OACE,yBACE5U,UAAS,6DAAwDgV,IAEjE,yBAAKhV,UAAU,cACb,0BAAMA,UAAU,QACd,kBAAC,KAAD,OAEF,8BAAO6U,IAET,0BAAM7U,UAAU,sBAAhB,WC3BN,IAAMiV,GAAS,CACbxF,MAAO,CACLyF,SAAU,QACVC,UAAW,oBACXC,UAAW,QACXC,WAAY,OAEdC,YAAa,CACXJ,SAAU,SAEZK,QAAS,CACPL,SAAU,UAQC,SAASM,GAAT,GAA8C,IAA7Bb,EAA4B,EAA5BA,kBACxB/M,EAAQ+M,EAAkB1N,SAASW,MACnC6N,EAAgBd,EAAkB3B,OACpCpL,EAAMnD,OACNiI,KAAK8G,IAAImB,EAAkBzC,cAAczN,OAAS,EAAGmD,EAAMnD,QAC/D,OAAIgR,EAAgB,EACX,MAEL,OAAC7N,QAAD,IAACA,OAAD,EAACA,EAAOnD,QAIV,yBAAKzE,UAAU,iBACb,0BAAMsM,MAAO2I,GAAOxF,OAApB,OACOgG,EAAgB,GAAK,IAD5B,KACmCA,EADnC,IACmD7N,EAAMnD,OADzD,MAGA,4BACGkQ,EAAkB1N,SAASW,MACzB8N,MAAM,EAAGD,GACT1O,KAAI,SAAC4O,EAAMnM,GAAP,OACH,wBACEJ,IAAKuM,EACLrJ,MACEmJ,IAAkBjM,EAAI,GAAMsJ,GAAgB6B,GAExCM,GAAOM,QADPN,GAAOK,aAIZK,QAnBJ,KCrBX,IAAMV,GAAS,CACbhO,SAAU,CACRiO,SAAU,SAEZ9N,OAAQ,CACN8N,SAAU,UAIC,SAASU,GAAT,GAA+D,IAA3C9D,EAA0C,EAA1CA,KAAM6C,EAAoC,EAApCA,kBACjCkB,EACJlB,EAAkB1N,SAASC,OAAS1G,EAAcgE,iBAClDmQ,EAAkBzC,cAAczN,QAAU,IACzCkQ,EAAkB3B,OACf8C,EAAiBhE,EAAKC,eAAetN,OAASqN,EAAK7L,UAAUxB,OACnE,OACE,6BACE,uBAAGzE,UAAU,OAAOsM,OAASuJ,GAAW,CAAEX,SAAU,UAAc,IAAlE,aACapD,EAAKC,eAAetN,OADjC,IAC0CqR,EAD1C,MAGA,uBAAGxJ,MAAQuJ,GAAWZ,GAAOhO,UAAa,IACvC0N,EAAkB1N,SAASA,UAE9B,kBAACuO,GACK,CACFb,sBAGH,CAACnU,EAAciD,UAAWjD,EAAcyD,MAAMqH,SAC7CqJ,EAAkB1N,SAASC,OAE3B4L,GAAgB6B,IACd,oCACE,uBAAGrI,MAAO2I,GAAO7N,QAAjB,UACU,IACR,2BACE,kBAAC/D,GAAD,CACEC,MAAOqR,EAAkB1N,SAASG,OAClC7D,aAAcoR,EAAkB1N,SAASC,SAI9CyN,EAAkB1N,SAASO,aAC1B,2BAAImN,EAAkB1N,SAASO,e,uGCrBvCuO,I,OAAsB,WAAsB,IAArBC,EAAoB,uDAAN,EACzC,OAAIA,EAAM,IACD,EAELA,EAAM,IACD,EAELA,EAAM,EACD,EAEF,IAGT,SAASC,GAAT,GAA4E,IAAlDC,EAAiD,EAAjDA,aAAiD,EACzC/Q,mBAAc,MAD2B,mBAClEgR,EADkE,KACxDC,EADwD,KASzE,OAPAC,aAAa,CACXC,MADW,SACL5N,GACJ0N,EAAY1N,EAAE6N,QACdL,EAAa,CAAE5R,SAAUoE,EAAE6N,OAAOC,IAAKjS,UAAWmE,EAAE6N,OAAOE,SAIxDN,GAAY,kBAACO,GAAA,EAAD,CAAQP,SAAUA,IAGvC,SAASQ,GAAT,GAMI,IALFnM,EAKC,EALDA,SACAoM,EAIC,EAJDA,QAKM7P,EAAM8P,eACNC,EAASC,wBAAa,IAW5B,OAVO,OAAPH,QAAO,IAAPA,KAAS7B,SAAQ,SAACzP,GAChBwR,EAAOE,OAAO,CAAC1R,EAAK6Q,SAAS7R,SAAUgB,EAAK6Q,SAAS5R,eAEvDuS,EAAOG,WACLlQ,EAAImQ,YAAYJ,EAAQ,CAEtBK,QAAS,CAAC,GAAI,IACdC,QAASR,EAAQnS,OAAS,EAAI,GAAK,IAGhC,kBAAC4S,GAAA,EAAD,KAAe7M,GAGTiE,WAAM6I,MACnB,YAAwD,IAAD,IAApDV,eAAoD,MAA1C,GAA0C,EAAtCW,EAAsC,EAAtCA,cAAevX,EAAuB,EAAvBA,UACxBwX,EAAeZ,EAAQtD,MAAK,SAACmE,GAAD,OAAOA,EAAEC,YACrCC,IACFH,GACFZ,EACG/O,QAAO,SAAC4P,GAAD,OAAQA,EAAEC,UAAYD,EAAEG,oBAC/B7Q,KAAI,SAAC0Q,GAAD,YAAQ,CACXI,KAAM,CACJ,IAAIC,UAAOL,EAAEtB,SAAS7R,SAAUmT,EAAEtB,SAAS5R,WAC3C,IAAIuT,UACFN,EAAarB,SAAS7R,SACtBkT,EAAarB,SAAS5R,YAG1BwT,MAAK,UAAEN,EAAEG,wBAAJ,aAAE,EAAoBI,QACzBjC,GAAoB0B,EAAEG,uBAI9B,OACE,kBAACK,GAAA,EAAD,CACEC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,UAAW,CACT,EAAE,IAAK,KACP,CAAC,GAAI,MAEPC,mBAAoB,EACpBC,iBAAiB,EACjBtY,UAAWA,GAEX,kBAACuY,GAAA,EAAD,CACEC,YAAY,uOACZC,IAAI,yEAELlB,GAAiB,kBAACtB,GAAD,CAAgBC,aAAcqB,IAC/CI,GACCA,EAAc5Q,KAAI,gBAAG8Q,EAAH,EAAGA,KAAME,EAAT,EAASA,MAAT,OAChB,kBAACW,GAAA,EAAD,CACEtP,IAAKyO,EAAK1T,WACVwU,UAAWd,EACXe,MAAM,UACNC,OAAQ,GAEPd,GACC,kBAAC,KAAD,CACE/X,UAAU,iBACV8Y,UAAU,SACVC,WAAS,GAERhB,EALH,WAUPnB,EAAQnS,QACP,kBAACkS,GAAD,CAAiBC,QAASA,GACvBA,EAAQ7P,KAAI,YAA8C,IAA3CoP,EAA0C,EAA1CA,SAAU4B,EAAgC,EAAhCA,MAAOiB,EAAyB,EAAzBA,mBAC/B,OAAIA,EAEA,kBAACC,GAAA,EAAD,CACEf,OAAQ,CAAC/B,EAAS7R,SAAU6R,EAAS5R,WACrC2U,OAA6B,IAArBF,EACR5P,IAAK+M,EAAS7R,UAEbyT,GACC,kBAAC,KAAD,CAASe,UAAU,SAASC,WAAS,GAClChB,IAOT,kBAACrB,GAAA,EAAD,CACEvW,IAAI,kBACJgW,SAAU,CAACA,EAAS7R,SAAU6R,EAAS5R,WACvC6E,IAAK+M,EAAS7R,UAEbyT,GACC,kBAAC,KAAD,CAASe,UAAU,SAASK,OAAQ,EAAE,GAAI,IAAKJ,WAAS,GACrDhB,YAWrB,SAACqB,EAAWC,GAAZ,OAA0BC,aAAOF,EAAUxC,QAASyC,EAAUzC,YC1JjD,SAAS2C,GAAT,GAMJ,IALT5E,EAKQ,EALRA,kBACAV,EAIQ,EAJRA,YACA5E,EAGQ,EAHRA,SACAW,EAEQ,EAFRA,QACAhQ,EACQ,EADRA,UAEMuD,EAAeoR,EAAkB1N,SAASC,KAChD,IAAKyN,GAAqBpR,IAAiB/C,EAAc4D,IACvD,OAAO,KAGT,IAAMoV,EAAc7E,EAAkBtC,QAAQiB,MAC5C,SAACmG,GAAD,OAAOA,EAAEpK,WAAaA,KAGpBqK,GAAsC,OAAXF,QAAW,IAAXA,OAAA,EAAAA,EAAalW,MAAMe,KAC9C,CACE,CACE8R,SAAUqD,EAAYlW,MAAMe,IAC5B0T,MAAO,MACPH,iBAAkB4B,EAAYG,aAGlC,GAuCJ,OApCE1F,GACCU,EAAkB3B,QAAU2B,EAAkBX,aAE/C0F,EAAWvT,KAAX,MAAAuT,EAAU,YACL/E,EAAkBtC,QAAQlH,QAC3B,SAACsH,EAAD,GAAgD,IAAxCnP,EAAuC,EAAvCA,MAAiBsW,EAAsB,EAAhCvK,SAAesK,EAAiB,EAAjBA,WAC5B,GACErW,EAAMe,KACNgL,IAAauK,IACZ3F,IAAgBrB,GAAgB+B,EAAmBiF,IACpD,CAAC,IAAD,EACM7B,GAAQ,UAAA/H,EAAQsD,MAAK,SAACuG,GAAD,OAAOA,EAAEpQ,KAAOmQ,YAA7B,eAAmCtK,OAAQ,GACzDmD,EAAItM,KAAK,CACPgQ,SAAU7S,EAAMe,IAChB0T,QACAH,iBAAkB+B,IAGtB,OAAOlH,IAET,MAKJK,GAAgB6B,IAChBA,EAAkB1N,SAASG,OAAO/C,KAElCqV,EAAWvT,KAAK,CACdgQ,SAAUxB,EAAkB1N,SAASG,OAAO/C,IAC5C0T,MAAO,kBAAC,KAAD,CAAmB/X,UAAU,4BACpC0X,UAAU,EACVsB,mBAAoBrE,EAAkB1N,SAASG,OAAO/C,IAAIgD,kBAIvD,kBAACyS,GAAD,CAAK9Z,UAAWA,EAAW4W,QAAS8C,I,OCtE9B,SAASK,GAAT,GAIJ,IAAD,EAHRpF,EAGQ,EAHRA,kBACAqF,EAEQ,EAFRA,YACA1W,EACQ,EADRA,MAEA,GAAIqR,EAAkB1N,SAASC,OAAS1G,EAAcgE,gBACpD,OAAO,KAET,GAAwD,KAApD,UAAAmQ,EAAkB1N,SAASzD,oBAA3B,eAAyCiB,QAC3C,MAAM,IAAIC,MAAM,qDAElB,IAAMlB,EAAemR,EAAkB1N,SAASzD,aAAauD,KAAI,SAAC5G,GAAD,YAAU,CACzEqI,MAAOrI,EACP8Z,SAAQ,UAACtF,EAAkB1N,SAASiT,0BAA5B,aAAC,EAA+C5O,SAASnL,QAG7Dga,EAAerH,GAAgB6B,GAC/BvN,EAASuN,EAAkB1N,SAASG,OAAOzD,UAEjD,OACE,yBAAK3D,UAAU,qBACZwD,EAAauD,KAAI,SAAC5G,EAAKqJ,GACtB,IAAI4Q,EACF,gGAkBF,OAjBKJ,IACHI,GAAmB,eAEjBja,EAAI8Z,QACFD,GACFI,GAAmB,sCAEjBA,GADE9W,IAAUkG,EACO,0BAEA,kBAMvB4Q,GAAmB,iBAGnB,4BACEhR,IAAG,UAAKjJ,EAAIqI,MAAT,YAAkBgB,GACrBxJ,UAAWoa,EACXxQ,QAAS,kBAAMoQ,GAAeA,EAAYxQ,IAC1CG,UAAWxJ,EAAI8Z,QAAWE,GAAgB3Q,IAAMpC,GAE/CjH,EAAIqI,W,WC6FF6R,GA/HI,SAAC,GAMN,IAAD,IALXvI,EAKW,EALXA,KACA6C,EAIW,EAJXA,kBACAxB,EAGW,EAHXA,oBACA9D,EAEW,EAFXA,SACA4E,EACW,EADXA,YAEMqG,GAAiC,OAAjB3F,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB1N,SAASC,QAAS1G,EAAc4D,IACnEmW,GACa,OAAjB5F,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB1N,SAASC,QAAS1G,EAAcgE,gBAC/CyM,EACJ0D,GACA7C,EAAK9B,SACLmC,GAA+BwC,EAAmB7C,EAAK9B,SACnDwK,ECtC6B,SAAC1I,GACpC,GAAIA,EAAKkB,OACP,OAAOlB,EAAK9B,QACT7E,QACC,SAACsP,EAAStK,EAAQ3G,GAChB,OAAU,IAANA,EAAgBiR,EAChBA,EAAQ,GAAGlH,MAAQpD,EAAOoD,MACrB,CAACpD,GAENsK,EAAQ,GAAGlH,QAAUpD,EAAOoD,MACxB,GAAN,mBAAWkH,GAAX,CAAoBtK,IAEfsK,IAET,CAAC3I,EAAK9B,QAAQ,KAEfjJ,KAAI,SAAC8S,GAAD,OAAOA,EAAEpQ,MDsBOiR,CAAsB5I,IAAS,GAExD,OACE,yBAAK9R,UAAU,8BACZsa,GACC,kBAAC1E,GACK,CACF9D,OACA6C,sBAIN,yBAAK3U,UAAU,iCACb,yBACEA,UAAS,sBACPsa,EAAgB,4BAA8B,oBADvC,yIAIT,yBAAKta,UAAU,0CACZ8R,EAAK9B,QAAQjJ,KAAI,SAACoJ,EAAQ0D,GAAW,IAAD,EAC3B/C,IACN,UAAA6D,EAAkBgG,eAAlB,eAA2BrH,MACzB,gBAAGjE,EAAH,EAAGA,SAAH,OAAkBc,EAAO1G,KAAO4F,OAC7B,IAHCyB,cAIFE,KACJ2D,IACA/B,GAAgB+B,EAAmBxE,EAAO1G,KAEtCnG,EAAQqR,EAAkBtC,QAAQiB,MACtC,SAACmG,GAAD,OAAOA,EAAEpK,WAAac,EAAO1G,MAE/B,OACE,kBAACmR,GAAD,eACExR,IAAK+G,EAAO1G,IACR,CACF0G,SACA0D,QACAC,gBAAiBhC,EAAK9B,QAAQvL,OAC9B0O,sBACArC,gBACAiD,YAAa5D,EAAO1G,KAAO4F,EAC3B8B,aACEhB,EAAO1G,MAAP,OAAc0J,QAAd,IAAcA,OAAd,EAAcA,EAAqBC,cAAc3J,IACnDoH,uBAAsB,OAAC8D,QAAD,IAACA,OAAD,EAACA,EAAmB3B,QAC1CgB,cAAa,OAACW,QAAD,IAACA,OAAD,EAACA,EAAmBX,YACjChD,YACAiD,cACAhD,6BACA3N,QACA2D,SAAU0N,EAAkB1N,SAC5B2J,gBAAiB4J,EAAiBlP,SAAS6E,EAAO1G,IAClDyK,WAAYpC,EAAKkB,cAM3B,yBAAKhT,UAAU,kEACXsa,GACA,6BACE,kBAAC5F,GAAD,CACEC,kBAAmBA,EACnBC,WZrFgB,KYqFJ9C,EAAK9B,QAAQvL,SAE3B,kBAACmR,GACK,CACF9D,OACA6C,uBAKP2F,GACC,yBAAKta,UAAU,gCACb,kBAACuZ,GACK,CACF5E,oBACAV,cACA5E,WACAW,QAAS8B,EAAK9B,QACdhQ,UAAW,QAGf,kBAAC0U,GAAD,CACEC,kBAAmBA,EACnBC,WZ5GgB,KY4GJ9C,EAAK9B,QAAQvL,UAI9B8V,GACC,kBAAC,GACK,CACF5F,oBACAnR,cACmB,OAAjBmR,QAAiB,IAAjBA,GAAA,UAAAA,EAAmB1N,SAASzD,oBAA5B,eAA0CuD,KAAI,SAAC5G,GAAD,YAAU,CACtDqI,MAAOrI,EACP8Z,SAAQ,UAACtF,EAAkB1N,SAASiT,0BAA5B,aAAC,EAA+C5O,SACtDnL,UAEG,GACTmD,MAAK,OAAEqR,QAAF,IAAEA,GAAF,UAAEA,EAAmBtC,QAAQiB,MAChC,SAACmG,GAAD,OAAOA,EAAEpK,WAAaA,YADnB,aAAE,EAEJ/L,MAAMK,iBEtIZ,SAASkX,GAAT,GAA+C,IAAxBtL,EAAuB,EAAvBA,aAAuB,EACjCpK,mBAA0B,IADO,mBACpD7B,EADoD,KAC7CwX,EAD6C,KAG3D,OACE,yBAAK9a,UAAU,iBACb,yBAAKA,UAAU,0BACb,2BACEwI,MAAOlF,EACPmF,SAAU,SAACC,GACT,IAAMF,EAAQ5E,WAAW8E,EAAEhC,OAAO8B,OACjBsS,EAAH,IAAVtS,EAAsB,EACZA,GAASE,EAAEhC,OAAO8B,QAElCoH,QAAS,SAAClH,GACQ,KAAZA,EAAEmH,QACJN,EAAajM,GACbwX,EAAS,MAGb5T,KAAK,SACLlH,UAAU,uCACV2I,YAAY,cACZC,aAAW,cACXkH,mBAAiB,eACjBhH,WAAS,IAEX,4BACE5B,KAAK,SACLlH,UAAU,kIACV2J,SAA2B,kBAAVrG,IAAwBA,GAAmB,IAAVA,EAClDsG,QAAS,WACP2F,EAAajM,GACbwX,EAAS,MANb,UAWA,uBAAG9a,UAAU,qBACX,kBAAC,GACK,CACFsD,MAAO,CACLK,UACmB,kBAAVL,EAAqBA,EAAQM,WAAWN,GAAS,KAE5DC,aAAc/C,EAAciD,e,yBCS3BsX,OA5Cf,YAA6C,IAAxBxL,EAAuB,EAAvBA,aAAuB,EAChBpK,qBADgB,mBACnC7B,EADmC,KAC5BwX,EAD4B,KAa1C,OACE,yBAAK9a,UAAU,0BACb,kBAAC,KAAD,CACEA,UAAU,WACVgb,eAAe,KACfC,iBAAiB,KACjBC,gBAAgB,OAChBC,kBAAkB,SAClBC,kBAAkB,EAClBC,aAAc,KACd7S,MAAOlF,EACPmF,SAAU,SAAC6S,GACTR,EAASQ,MAGb,4BACEpU,KAAK,SACLlH,UAAU,kIACV2J,UAAWrG,EACXsG,QAAS,WACHtG,GA9BG,SAACiY,GACd,GAAIA,EAAa,CACf,IAAM/S,EAAQkD,SAAS6P,EAAYC,WAAW,IAAK,KAC/ChT,IACF+G,EAAa/G,GACbsS,OAAS1U,KA0BLqV,CA7CZ,SAA4BH,GAC1B,IAAII,EAAKJ,EAAKK,WAAa,EACvBC,EAAKN,EAAKO,UAEd,MAAO,CACLP,EAAKQ,eACJJ,EAAK,EAAI,GAAK,KAAOA,GACrBE,EAAK,EAAI,GAAK,KAAOA,GACtB1L,KAAK,IAqCU6L,CAAmBzY,MANhC,YCrCS,eAA8B,IAA3BiM,EAA0B,EAA1BA,aAA0B,EAChBpK,qBADgB,mBACnC7B,EADmC,KAC5BwX,EAD4B,KAG1C,OACE,oCACE,kBAAChB,GAAD,CACEvC,cAAe,SAACsC,GACdiB,EAASjB,MAGb,4BACE7Z,UAAU,kIACV4J,QAAS,WACHtG,IACFiM,EAAajM,GACbwX,OAAS1U,KAGbuD,WAAU,OAACrG,QAAD,IAACA,OAAD,EAACA,EAAOgB,YAAahB,EAAMiB,WARvC,YCLS,SAASyX,GAAT,GAIJ,IAHTrH,EAGQ,EAHRA,kBACApF,EAEQ,EAFRA,aACA/L,EACQ,EADRA,aACQ,EACkB2B,qBADlB,mBACD7B,EADC,KACMwX,EADN,KAER,GAA6B,KAAb,OAAZtX,QAAY,IAAZA,OAAA,EAAAA,EAAciB,QAChB,MAAM,IAAIC,MAAM,qDAGlB,OACE,oCACE,kBAAC,GAAD,CACEiQ,kBAAmBA,EACnBqF,YAAac,EACbxX,MAAOA,IAET,4BACEtD,UAAU,kIACV4J,QAAS,YACHtG,GAAmB,IAAVA,KACXiM,EAAajM,GACbwX,OAAS1U,KAGbuD,UAAWrG,GAAmB,IAAVA,GARtB,WCJS,SAAS2Y,GAAT,GAQI,IAPjBhK,EAOgB,EAPhBA,qBACA9B,EAMgB,EANhBA,OACAuD,EAKgB,EALhBA,iBACA5B,EAIgB,EAJhBA,KACAoK,EAGgB,EAHhBA,iBACAC,EAEgB,EAFhBA,oBACAC,EACgB,EADhBA,2CAEA,IAAKjM,GAAUA,EAAOY,OACpB,OAAO,KAGT,IAAMsL,EAA0B,SAAC/Y,IAC1BA,GAAmB,IAAVA,GAAiC,kBAAVA,IACnCmQ,GACEC,EACA5B,EACA,CACEnO,UAAWL,GAEb6M,EAAO1G,IAET0S,GAAoB,KAIlBG,EAAuB,SAACC,GAI5B9I,GAASC,EAAkB5B,EAHL,CACpBzN,IAAKkY,GAEiCpM,EAAO1G,IAC/C0S,GAAoB,IA2BtB,OACE,kBAAC,GAAD,CACElS,QAAS,WACPkS,GAAoB,IAEtBzM,OAAQ,SACR9K,MACGsX,GAAmD,IAA/BpK,EAAKC,eAAetN,UACxC2X,EAEHzM,QAAQ,aAER,oCACE,uBAAG3P,UAAU,aAAaiS,EAAqBhL,SAASA,UACxD,uBAAGjH,UAAU,gBAAb,eAtCW,WAAO,IAAD,EACrB,OAAQiS,EAAqBhL,SAASC,MACpC,KAAK1G,EAAciD,UACjB,OAAO,kBAACoX,GAAD,CAAatL,aAAc8M,IACpC,KAAK7b,EAAcyD,KACjB,OAAO,kBAAC,GAAD,CAAWsL,aAAc8M,IAClC,KAAK7b,EAAc4D,IACjB,OAAO,kBAACoY,GAAD,CAAUjN,aAAc+M,IACjC,KAAK9b,EAAcgE,gBACjB,IAAMhB,EAAY,UAAGyO,EAAqBhL,SAASzD,oBAAjC,aAAG,EAA4CuD,KAC/D,SAAC5G,GAAD,MAAU,CAAEqI,MAAOrI,EAAK8Z,QAAQ,MAElC,OACE,kBAAC+B,GAAD,CACErH,kBAAmB1C,EACnBzO,aAAcA,EACd+L,aAAc8M,IAGpB,QACE,MAAM,IAAI3X,MAAM,yBAmBf+X,K,cC5FM,SAASC,GAAT,GAIQ,IAHrBC,EAGoB,EAHpBA,KACApF,EAEoB,EAFpBA,cACAhJ,EACoB,EADpBA,WAEA,OACE,4BACEvO,UAAU,sKACV4J,QAAS2N,EACT5N,SAAU4E,GAEToO,GCJQ,SAASC,GAAT,GAQJ,IAAD,EAPRzJ,EAOQ,EAPRA,oBACArB,EAMQ,EANRA,KACA+K,EAKQ,EALRA,YACA3J,EAIQ,EAJRA,SACA7D,EAGQ,EAHRA,SACAyN,EAEQ,EAFRA,gBACAC,EACQ,EADRA,mBAEMC,EAAe1K,GAAsBa,EAAqB9D,GAC1D4N,EAAc,UAAGnL,EAAK9B,QAAQsD,MAAK,qBAAG7J,KAAgB4F,YAAxC,aAAG,EAAgDkE,MAF/D,EAGoBpO,mBAAS6X,GAH7B,mBAGDpL,EAHC,KAGOsL,EAHP,KAKF3N,EAAe,WACnBsN,EAAYjL,EAAQsB,EAAUpB,EAAMzC,GACpC0N,GAAmB,IAGrB,OACE,kBAAC,GAAD,CACEtN,MAAM,QACNC,OAAQ,SACR9K,KAAMkY,EACN7S,QAAS,WACP8S,GAAmB,IAErBpN,QAAQ,YACR3P,UAAU,UAEV,oCACE,iDACA,yBAAKA,UAAU,0BACb,2BACEwI,MAAOoJ,EACPnJ,SAAU,SAACC,GACTwU,EAAUxQ,KAAKC,MAAM/I,WAAW8E,EAAEhC,OAAO8B,UAE3CoH,QAAS,SAAClH,GACQ,KAAZA,EAAEmH,OACJN,KAGJrI,KAAK,SACLiW,QAAQ,QACR3J,IAAKwJ,EACLtK,IAAKuK,EACLjd,UAAU,uCACV2I,YAAY,kBACZC,aAAW,kBACXkH,mBAAiB,eACjBhH,WAAS,IAEX,4BACEa,WACIsT,IACDrL,EAASoL,GAAgBpL,EAASqL,GAErCjd,UAAU,kIACV4J,QAAS2F,GANX,WAWF,yBAAKvP,UAAU,QACZid,GACC,oCACG,CAAC,EAAG,GAAI,GAAI,IACVpV,QAAO,SAAC+J,GAAD,OAAYA,EAASqL,KAC5BlW,KAAI,SAAC6K,GAAD,OACH,0BACExI,IAAKwI,EACLtF,MAAO,CAAEC,OAAQ,WACjB3C,QAAS,kBAAMsT,EAAUtL,IACzB5R,UAAU,uEAET4R,MAGP,0BACEtF,MAAO,CAAEC,OAAQ,WACjB3C,QAAS,kBAAMsT,EAAUD,IACzBjd,UAAU,uEAHZ,cCnEC,SAASod,GAAT,GAOS,IANtBtL,EAMqB,EANrBA,KACA6C,EAKqB,EALrBA,kBACAxB,EAIqB,EAJrBA,oBACA9D,EAGqB,EAHrBA,SACA6D,EAEqB,EAFrBA,SACAmK,EACqB,EADrBA,gBACqB,EACyBlY,oBAAS,GADlC,mBACd2X,EADc,KACGC,EADH,KAErB,IAAKpI,IAAsBxB,EACzB,OAAO,KAGT,IAAMhD,EAAS2B,EAAK9B,QAAQsD,MAAK,SAACuG,GAAD,OAAOA,EAAEpQ,KAAO4F,KAE3C2N,EAAe1K,GAAsBa,EAAqB9D,GAEhE,OACE,yBAAKrP,UAAU,sCACb,kBAAC0c,GAAD,CACEC,KAAMK,EAAe,EAAf,mBAA+BA,GAAiB,QACtDzF,cAAe,YlBNH,SAClBrE,EACApB,EACAzC,GACI,IAAD,IACG4C,EAAuBJ,GAAwBC,GAC/CqB,EAAsBnB,GAAuBC,GACnD,GACGA,IACkB,OAAnBkB,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAc3J,MAAO4F,EAF5C,CAOA,IAAM2N,EAAe1K,GAAsBa,EAAqB9D,GAC1DgE,EAAa,oBACjBvB,EAAK9B,QAAQsD,MAAK,qBAAG7J,KAAgB4F,YADpB,aACjB,EAAgDkE,aAD/B,QACwC,EAE3DL,EAAS,CACPlN,UAAW,CACTwJ,MAAO,CACL/B,OAAQqE,EAAKrI,GACb4F,SAAUA,EACVuC,OAAQlF,KAAK8G,IAAIwJ,EAAc3J,QkBhB7BiK,CAAKpK,EAAUpB,EAAMzC,IAEvBd,YAAa8O,IAEf,kBAACX,GAAD,CACEC,KAAK,QACLpF,cAAe,WACbwF,GAAmB,IAErBxO,YACS,OAAN4B,QAAM,IAANA,OAAA,EAAAA,EAAQoD,QAASyJ,IAAY,OAAI7M,QAAJ,IAAIA,OAAJ,EAAIA,EAAQoD,SAAW8J,IAGzD,kBAACX,GAAD,CACEC,KAAK,OACLpF,cAAe,YlByCH,SAClBrE,EACApB,EACAzC,GAEA,IAAM4C,EAAuBJ,GAAwBC,GAC/CqB,EAAsBnB,GAAuBC,GAEhDA,IACkB,OAAnBkB,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAc3J,MAAO4F,GAK5C6D,EAAS,CACPlN,UAAW,CACTwJ,MAAO,CACL/B,OAAQqE,EAAKrI,GACb4F,SAAUA,EACVuC,QAAS,MkB3DP2L,CAAKrK,EAAUpB,EAAMzC,IAEvBd,YAAa8O,IAEf,kBAACT,GACK,CACF9K,OACAoB,WACA7D,WACA8D,sBACA0J,YAAa5J,GACb6J,kBACAC,wBC9CV,IAyJeS,GAzJA,SAAC,GAQF,IAAD,MAPX1L,EAOW,EAPXA,KACA6C,EAMW,EANXA,kBACAxE,EAKW,EALXA,OACA+C,EAIW,EAJXA,SACAkJ,EAGW,EAHXA,2CACAD,EAEW,EAFXA,oBACAhJ,EACW,EADXA,oBAEMkK,GACe,OAAnBlK,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAc3J,MAAO0G,EAAO1G,IACjD0I,GAA+BwC,EAAmB7C,EAAK9B,SAEnDyN,EAAkB9I,EAAkBtC,QAAQiB,MAChD,SAAChQ,GAAD,OAAWA,EAAM+L,WAAac,EAAO1G,MAGnCiU,EAAc,oBAAG5L,EAAK9B,QAAQsD,MAAK,SAACuG,GAAD,OAAOA,EAAEpQ,KAAO0G,EAAO1G,aAA5C,aAAG,EAA8C8J,aAAjD,QAA0D,EACtEe,EACHnB,GACC5B,GAAuC4B,EAAqBhD,EAAO1G,KACrE,EACEkL,EAAkB3B,QAAU7C,EAAO1G,IAAM0J,IAC3CuK,GAAkBpJ,GAGpB,IAAM/Q,EAAeoR,EAAkB1N,SAASC,KAlBrC,IAqBQ,OAAjByN,QAAiB,IAAjBA,GAAA,UAAAA,EAAmBgG,eAAnB,eAA4BrH,MAC1B,gBAAGjE,EAAH,EAAGA,SAAH,OAAkBc,EAAO1G,KAAO4F,OAC7B,IAHCyB,qBApBG,MAoBa,EApBb,EAyBLG,EACJ0D,GACA7C,EAAK9B,SACLmC,GAA+BwC,EAAmB7C,EAAK9B,SAEzD,OACE,4BAAQhQ,UAAU,kHAChB,yBAAKA,UAAU,kFACb,yBAAKA,UAAU,qFACb,0BACEA,UAAS,+GACP2U,EAAkB3B,QAAUlC,EAAgB,EACxC,eACA,cAHG,YAKP6D,EAAkB1N,SAASC,OAAS1G,EAAc4D,IAC9C,SACA,KAGLiZ,IAAoB1I,EAAkB3B,QACrC,0BAAMhT,UAAU,YACd,kBAAC,wBAAD,CACE2d,UAAWN,EACXO,KAAM,GACNC,YAAa,EACbC,SAAU,GACVC,OAAQ,CACN,CAAC,UAAW,IACZ,CAAC,UAAW,IAEdC,WAAW,aAIjB,8BACE,kBAAC,GACK,CACF7N,SACAU,oBAAqB8D,EAAkB3B,OACvC7B,cACGwD,EAAkB3B,QACnB7C,EAAO1G,MAAP,OAAc0J,QAAd,IAAcA,OAAd,EAAcA,EAAqBC,cAAc3J,IACnDuH,aACE2D,IACA/B,GAAgB+B,EAAmBxE,EAAO1G,KAE5CqH,gBACAG,6BACAC,4BAA6BuM,MAKpCla,IAAiB/C,EAAc4D,KAC9B,oCACE,uBAAGpE,UAAU,iBAAb,eACA,0BAAMA,UAAU,qCACbyd,GACC,kBAAC,GAAD,CACEna,MAAOma,EAAgBna,MACvBC,aAAcA,EACdC,aAAcmR,EAAkB1N,SAASzD,kBAOrD,yBACExD,UAAS,4BACP2U,EAAkB3B,OAAS,WAAa,gBAG1C,yBAAKhT,UAAU,mDACb,uBAAGA,UAAU,WAAb,mBACA,yBAAKA,UAAU,mCACb,kBAAC,KAAD,CAASA,UAAU,SACnB,8BAAO0d,GACY,IAAlB5M,GACC,0BACE9Q,UAAS,eACP8Q,EAAgB,EAAI,iBAAmB,iBAF3C,IAKIA,EAAgB,EAAI,IAAM,GAC3BA,EANH,QAWJsL,GACAtK,EAAKC,eAAetN,OAAS,GAC3B,4BACEzE,UAAU,2LACV4J,QAAS,WACPuS,GAAoB,KAHxB,uBASHC,GAA8CjM,EAAO1G,IACpD,kBAAC2T,GACK,CACFtL,OACA6C,oBACAxB,sBACAD,WACA7D,SAAUc,EAAO1G,GACjB4T,wB,qBC5GDY,ICpBXC,GDoBWD,GAlDf,YAKW,IAJTxQ,EAIQ,EAJRA,OACA4B,EAGQ,EAHRA,SACA8O,EAEQ,EAFRA,eACAC,EACQ,EADRA,YACQ,EACcjZ,qBADd,mBACEW,GADF,aAEeC,YACrBjG,EACA,CACEuG,QAAS,SAACC,GACRR,GAAS,WACP,MAAMQ,MAGVJ,YAAa,WACPuH,K7BrB6B,SAACA,GACxCC,aAAa2Q,WAAb,UAA2B/Q,GAA3B,YAA4CG,I6BqBpC6Q,CAA0B7Q,GAC1B2Q,OAAYhY,OAXbmY,EAFC,oBAmBR,OAAK9Q,GAAW4B,EASd,kBAACmP,GAAD,CACElQ,UANkB,WACpBiQ,EAAa,CAAEvY,UAAW,CAAEqJ,WAAU5B,aAMpCW,YACE,oDAEG+P,GACC,mFAIN9P,aAAa,aACbF,YAAa,kBAAC,KAAD,MACbK,aAAa,mCApBR,M,kDEaIiQ,G,+MAvCNC,MAAe,CACpBC,UAAU,EACVnY,WAAOJ,G,iEAQgBI,EAAcoY,GACrCzW,QAAQ3B,MAAM,kBAAmBA,EAAOoY,K,+BAIxC,GAAIC,KAAKH,MAAMC,SAAU,CAAC,IAAD,EACjBG,EAAY,UAAGD,KAAKH,MAAMlY,aAAd,aAAG,EAAkB+D,QAAQwU,QAC7C,kBACA,IAEF,OACE,uBAAG/e,UAAU,gDACX,kBAAC,KAAD,CAASA,UAAU,+BACD,mBAAjB8e,EACC,oCAAGA,GAEH,wEACoCA,EADpC,IAEE,6BAFF,8BASR,OAAOD,KAAKG,MAAMxU,Y,gDA9BmBhE,GAErC,MAAO,CAAEmY,UAAU,EAAMnY,a,GARDiI,IAAMwQ,WCbnB,OAA0B,8CCA1B,OAA0B,uCH0CnCC,I,OAAU,SAACC,GACf9S,OAAOH,UAAUgT,SAAW7S,OAAOH,UAAUgT,QAAQC,KAIvD,SAASC,KAAiB,IAAD,EACSja,wBAA6BiB,GADtC,mBAChBiJ,EADgB,KACN+O,EADM,OAECjZ,wBAA2BiB,GAF5B,mBAEhB0L,EAFgB,KAEVuN,EAFU,KAGjBpN,EAAuBJ,GAAwBC,GAC/CqB,EAAsBnB,GAAuBC,GAJ5B,EAKyB9M,oBAAS,GALlC,mBAKhB+W,EALgB,KAKEC,EALF,OASnBhX,oBAAS,GATU,mBAOrBma,EAPqB,KAQrBC,EARqB,KAUf9R,EAAWN,cAAXM,OAVe,EAWDtI,qBAXC,mBAWbW,GAXa,aAaIX,mBAAS,IAAIqa,MAAMC,KAAvCC,EAbgB,sBAcHva,mBAAS,IAAIqa,MAAMG,KAAhCC,EAdgB,oBAgBjBC,EAAe,SAACvZ,GACpBR,GAAS,WACP,MAAMQ,MAlBa,EAsBU8G,YAC/B5N,EACA,CACE6N,YAAa,oBACbhH,QAASwZ,EACT3Z,YAAa,YAAe,IAAZ4L,EAAW,EAAXA,KACduN,EAAQvN,MA5BS,mBAsBhBgO,EAtBgB,KAsBHjU,EAtBG,KAsBHA,QAtBG,EAiCyB9F,YAE7CrG,EAAe,CAChB2G,QAASwZ,IApCY,mBAiChBzQ,EAjCgB,KAiCM2Q,EAjCN,KAiCAza,KAjCA,EAuCHS,YAEjBpG,EAAY,CAAE0G,QAASwZ,IAFnB9Q,EAvCgB,sBA2CJhJ,YAEhBnG,EAAW,CAAEyG,QAASwZ,IAFlB3M,EA3CgB,sBA+CJnN,YAEhBlG,EAAW,CAAEwG,QAASwZ,IAFlBpM,EA/CgB,oBAmDRuM,EAAsBC,YAElCxgB,EAAyB,CAC1BuG,UAAW,CACTyH,SACAyS,KACEnS,GAA0BN,IAAWD,GAAwBC,IAEjE0S,mBAAoB,YAA2B,IAAD,IAAvBC,EAAuB,EAAvBA,iBACrBC,cAAcnC,IACd,IAAMpM,EAAI,UAAGsO,EAAiB9a,YAApB,aAAG,EAAuBgb,YACpCjB,EAAQvN,GACR,IAAMyO,EAAM1O,GAAwBC,GAC9B0O,EAAMxO,GAAuBuO,GAC7BvQ,EAAO,UAAGoQ,EAAiB9a,YAApB,aAAG,EAAuBgb,YAAYtQ,QAC7CyQ,EACJF,GAAOvQ,GAAWmC,GAA+BoO,EAAKvQ,GACpDyQ,GACFlB,GAAoC,KAGpC,OAACzN,QAAD,IAACA,OAAD,EAACA,EAAMkB,UACJ,OAAHwN,QAAG,IAAHA,OAAA,EAAAA,EAAKpN,cAAc3J,MAAO4F,GAC1BoR,IAEAf,EAAiBgB,OACjBxB,GAAQ,KACRhB,GAAgByC,aAAY,WAC1Bf,EAAUc,OACVxB,GAAQ,OACP,UA9BD1Y,MA+DR,GA5BA0E,qBAAU,WACJ8U,GACFH,EAAaG,KAEd,CAACA,IAEJ9U,qBAAU,WACR4U,EAAU,CACR9Z,UAAW,CAAEyH,cAEd,CAACqS,EAAWrS,IAEfvC,qBAAU,WACR,GAAIuC,EAAQ,CAAC,IAAD,EACJmT,E9B5I0B,SAACnT,GAAD,OACpCC,aAAaM,QAAb,UAAwBV,GAAxB,YAAyCG,I8B2IdoT,CAAuBpT,GACxCqT,EAAW,OAAGf,QAAH,IAAGA,GAAH,UAAGA,EAAegB,iBAAlB,aAAG,EAA0BtX,GAE1CmX,GACFxC,EAAYwC,GAGVE,K9BvJ0B,SAACrT,EAAgB4B,GACnD3B,aAAaI,QAAb,UAAwBR,GAAxB,YAAyCG,GAAU4B,G8BuJ7C2R,CAAqBvT,EAAQqT,GAC7B1C,EAAY0C,OAGf,CAACrT,EAAQsS,IAERlU,EACF,OAAO,wBAAI7L,UAAU,8BAAd,cAGT,IAAK8R,EACH,OACE,uBAAG9R,UAAU,gDACX,kBAAC,KAAD,CAAmBA,UAAU,kBAD/B,oBAMJ,IAAMmQ,EAAS2B,EAAK9B,QAAQsD,MAAK,SAACuG,GAAD,OAAOA,EAAEpQ,KAAO4F,KAI3C+M,MAHiC,OAAGnK,QAAH,IAAGA,OAAH,EAAGA,EAAsBI,QAAQiB,MACtE,SAAChQ,GAAD,OAAWA,EAAM+L,WAAaA,MAG1B8O,KAAmBrM,EAAKC,eAAetN,OACvCwP,GAAckK,MAAoBhO,GAAUA,EAAOY,QACnDkQ,GtB/JgC,SAACnP,GAAD,oBACtCA,QADsC,IACtCA,OADsC,EACtCA,EAAMC,gBAAmB,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMC,sBAAN,eAAsBtN,SAAUqN,EAAKkB,OAAS,EAAI,IsB8JzCkO,CAAyBpP,GASjD6C,KAPFsM,KACDnP,EAAKkB,SACFoJ,KAA+CnI,IAChDA,MACGhC,IACDqN,IACAnN,GAA+BF,EAAsBH,EAAK9B,UAE7DiR,GACAhP,EAEJ,OACE,yBACEjS,UAAS,8CACPiU,KAAgBkK,GACZ,eACA,gCAGN,yBAAKne,UAAU,6BACXme,IACA,kBAAC,GAAD,CACEnO,QAAS8B,EAAK9B,QACdC,SAAU5D,OAAON,SAASnF,KAC1BmI,UAAWA,EACXtB,OAAQqE,EAAKrI,GACb2F,aAAcA,EACdC,SAAUA,EACV1D,SAAUmG,EAAKnG,WAGlBwS,IAAkBxJ,IACjB,kBAAC,GACK,CACF7C,OACA6C,qBACAxB,sBACA9D,WACA4E,iBAILA,KAAW,OAAIU,SAAJ,IAAIA,QAAJ,EAAIA,GAAmB3B,UAAWlB,EAAKkB,QACjD,4BACEhT,UAAU,uIACV4J,QAAS,WACP2V,GAAoC,KAHxC,uBAUHtN,GAAwB5C,GACvB,kBAAC4M,GACK,CACFnK,OACA4B,iBAAkBD,EAClBxB,uBACA9B,SACA+L,mBACAC,sBACAC,iDAIJtK,EAAKkB,QAAU7C,IAAW8D,IAAeU,IACzC,kBAAC,GACK,CACF7C,OACA6C,qBACAzB,WACA/C,SACApB,YACAqN,8CACAD,sBACAhJ,wBAKN,kBAAC,GAAoB,CAAE1F,SAAQ4B,WAAU8O,kBAAgBC,iBAahD+C,OARf,WACE,OACE,kBAAC,GAAD,KACE,kBAAC/B,GAAD,QI1QN,SAASgC,KACP,OAAO,8CAmBMC,OAhBf,WACE,OACE,yBAAKrhB,UAAU,qHACb,kBAAC,IAAD,CAAMshB,GAAG,IAAIthB,UAAU,2BAAvB,mBAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuhB,KAAK,IAAIC,UAAWtU,GAAOuU,OAAK,IACvC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,GAAMD,OAAK,IAC7C,kBAAC,IAAD,CAAOF,KAAK,sBAAsBC,UAAWtU,GAAOuU,OAAK,IACzD,kBAAC,IAAD,CAAOD,UAAWJ,QCPNtZ,QACW,cAA7BuE,OAAON,SAAS4V,UAEe,UAA7BtV,OAAON,SAAS4V,UAEhBtV,OAAON,SAAS4V,SAASC,MACvB,2DCjBC,IAAMC,GACXC,oCCeIC,I,OAAW,IAAIC,IAAS,CAC5BC,IAAI,OAAD,OAASJ,GAAT,aAICK,GAAS,IAAIC,IAAc,CAC/BF,IAAI,KAAD,OAAOJ,GAAP,UACHO,QAAS,CACPC,WAAW,KAITC,GAAOC,aAEX,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACeC,YAC1BD,GADME,EADK,EACLA,KAAMC,EADD,EACCA,UAGd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3CT,GACAH,IAGIa,GAAS,IAAIC,IAAa,CAC9BP,QACAQ,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBN,OAAQA,IACtB,kBAAC,IAAD,KACE,kBAAC,GAAD,SAINO,SAASC,eAAe,SFqFpB,kBAAmBlX,WACrBA,UAAUmX,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAld,GACL2B,QAAQ3B,MAAMA,EAAM+D,c","file":"static/js/main.7a989af9.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n    $language: String!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n      language: $language\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n      language\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      setNames\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n              toleranceRadius\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n        bettingState\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      setNames\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n              toleranceRadius\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n        bettingState\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/landing-page-image-1.02af88eb.png\";","export default __webpack_public_path__ + \"static/media/landing-page-image-2.3b5d2efa.png\";","export default __webpack_public_path__ + \"static/media/landing-page-image-3.c7951858.png\";","export default __webpack_public_path__ + \"static/media/landing-page-image-4.428c6f8f.png\";","export default __webpack_public_path__ + \"static/media/landing-page-image-phone.9eb55053.png\";","import React from \"react\";\n\nimport backgroundImage1 from \"../../../assets/landing-page-image-1.png\";\nimport backgroundImage2 from \"../../../assets/landing-page-image-2.png\";\nimport backgroundImage3 from \"../../../assets/landing-page-image-3.png\";\nimport backgroundImage4 from \"../../../assets/landing-page-image-4.png\";\nimport backgroundImagePhone from \"../../../assets/landing-page-image-phone.png\";\n\nexport default function PictureHalf() {\n  return (\n    <div className=\"grid grid-cols-3 gap-4 grid-flow-row-dense py-4 md:pb-12 h-full relative lg:overflow-hidden\">\n      <div className=\"col-span-2 row-span-3 rounded-lg flex justify-center items-center p-5 bg-beige\">\n        <img src={backgroundImage3} className=\"rounded-xl\" alt=\"background\" />\n      </div>\n      <div className=\"col-span-1 row-span-2 rounded-lg flex justify-center items-center p-5 bg-beige\">\n        <img src={backgroundImage4} className=\"rounded-xl\" alt=\"background\" />\n      </div>\n      <div className=\"col-span-2 row-span-3 rounded-lg flex justify-center items-center p-5 bg-beige\">\n        <img src={backgroundImage1} className=\"rounded-xl\" alt=\"background\" />\n      </div>\n      <div className=\"col-span-1 row-span-5 rounded-tl-lg rounded-br-full flex justify-center items-center p-5 bg-blue-200\" />\n      <div className=\"col-span-2 row-span-2 overflow-hidden rounded-lg flex justify-center items-center p-5 bg-beige\">\n        <img src={backgroundImage2} className=\"rounded-xl\" alt=\"background\" />\n      </div>\n\n      <div className=\"absolute rounded-2xl h-3/4 w-2/3 self-center justify-self-center flex justify-center\">\n        <img\n          src={backgroundImagePhone}\n          className=\"rounded-xl h-full\"\n          alt=\"background\"\n        />\n      </div>\n    </div>\n  );\n}\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport enum BettingStates {\n  CHECKED = \"CHECKED\",\n  CALLED = \"CALLED\",\n  RAISED = \"RAISED\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n  toleranceRadius?: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n  bettingState?: BettingStates;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  alternatives?: [string, string, string, string];\n  hiddenAlternatives?: string[];\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n  difference?: number;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  setNames: string[];\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n  language: string;\n}\n","const countryListAlpha2 = {\n  GB: \"English\",\n  FR: \"French\",\n  ES: \"Spanish\",\n  CN: \"Chinese\",\n  DE: \"German\",\n  ZA: \"Africaans\",\n  AL: \"Albanian\",\n  DZ: \"Algerian\",\n  SA: \"Arab\",\n  AM: \"Armenian\",\n  BD: \"Bangladeshi\",\n  BG: \"Bulgarian\",\n  KH: \"Cambodian\",\n  HR: \"Croatian\",\n  CZ: \"Czech\",\n  DK: \"Danish\",\n  NL: \"Dutch\",\n  EE: \"Estonian\",\n  FI: \"Finnish\",\n  GR: \"Greek\",\n  IL: \"Hebrew\",\n  HU: \"Hungarian\",\n  IN: \"Indian\",\n  IT: \"Italian\",\n  JP: \"Japanese\",\n  KR: \"Korean\",\n  LV: \"Latvian\",\n  LT: \"Lithuanian\",\n  MY: \"Malaysian\",\n  MN: \"Mongolian\",\n  NO: \"Norwegian\",\n  PL: \"Polish\",\n  BR: \"Portuguese\",\n  RO: \"Romanian\",\n  RU: \"Russian\",\n  RS: \"Serbian\",\n  SK: \"Slovakian\",\n  SI: \"Slovenian\",\n  SE: \"Swedish\",\n  TH: \"Thai\",\n  TR: \"Turkish\",\n  VN: \"Vietnamese\",\n};\n\nexport default countryListAlpha2;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\n\ninterface Props {\n  guess: Answer;\n  questionType: QuestionTypes;\n  alternatives?: Question[\"alternatives\"];\n}\n\nexport default function Guess({ guess, questionType, alternatives }: Props) {\n  if (!guess) return null;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      const number =\n        typeof guess.numerical === \"number\"\n          ? guess.numerical\n          : parseFloat(guess.numerical || \"\");\n      if (isNaN(number)) {\n        return null;\n      }\n      return <span>{new Intl.NumberFormat().format(number)}</span>;\n    case QuestionTypes.DATE:\n      if (!guess.numerical) {\n        return null;\n      }\n      return (\n        <span>\n          {moment(guess.numerical.toString(), \"YYYYMMDD\").format(\n            \"MMM DD, YYYY\"\n          )}\n        </span>\n      );\n    case QuestionTypes.GEO:\n      return <span>{`[${guess.geo?.latitude}, ${guess.geo?.longitude}]`}</span>;\n    case QuestionTypes.MULTIPLE_CHOICE:\n      if (alternatives?.length !== 4) {\n        throw new Error(\"missing alternatives for multiple choice question\");\n      }\n      return <span>{alternatives[guess.numerical ?? -1]}</span>;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n}\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Question, QuestionTypes } from \"../../../interfaces\";\nimport countryCodes from \"../../../assets/countryCodes\";\nimport processCsvData from \"./processCsvData\";\nimport Guess from \"../../Game/Guess\";\n\nexport interface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number | string;\n  latitude?: number;\n  longitude?: number;\n  toleranceRadius?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n  multiple_choice_alternative1?: string;\n  multiple_choice_alternative2?: string;\n  multiple_choice_alternative3?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setShownLanguage: React.Dispatch<React.SetStateAction<string>>;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({\n  open,\n  handleClose,\n  fetchSets,\n  setSelectedSets,\n  setShownLanguage,\n}: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n  const [language, setLanguage] = useState<string>();\n  const [_, setError] = useState();\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n      language,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      setShownLanguage(language || \"GB\");\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: (err) => {\n      setError(() => {\n        throw err;\n      });\n    },\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(processCsvData(rows));\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p className=\"mb-3\">\n        An example of the file format can be found{\" \"}\n        <a\n          className=\"text-blue-700 hover:text-blue-900\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"flex\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"rounded-md bg-white border border-gray-400 px-4 py-2 mr-4\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n        <select\n          className=\"rounded-md bg-white border border-gray-400 px-4 py-2\"\n          required\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          <option selected>Language...</option>\n          {Object.keys(countryCodes).map((code) => (\n            <option key={code} value={code}>\n              {countryCodeToFlagEmoji(code)}{\" \"}\n              {countryCodes[code as keyof typeof countryCodes]}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h3 className=\"text-2xl mb-3 mt-5\">Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p className=\"my-3\">\n            Question: <b>{q.question}</b>\n          </p>\n\n          {q.type !== QuestionTypes.MULTIPLE_CHOICE && (\n            <>\n              <p className=\"my-3\">\n                Answer:{\" \"}\n                <b>\n                  <Guess\n                    guess={q.answer}\n                    questionType={q.type}\n                    alternatives={q.alternatives}\n                  />\n                </b>\n              </p>\n              {q.answer.geo?.toleranceRadius && (\n                <p className=\"my-3\">\n                  Tolerance radius in km: <b>{q.answer.geo.toleranceRadius}</b>\n                </p>\n              )}\n            </>\n          )}\n          {!!q.hints?.length && (\n            <p className=\"my-3\">\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {!!q.alternatives?.length && (\n            <p className=\"my-3\">\n              Alternatives:{\" \"}\n              {q.alternatives.map((alt, i) => (\n                <>\n                  <br />\n                  <span key={alt}>\n                    <b className={i === 0 ? \"text-green-500\" : \"\"}>{alt}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p className=\"my-3\">\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr className=\"my-3\" />\n        </div>\n      ))}\n      <div className=\"flex\">\n        <input\n          type=\"checkbox\"\n          className=\"mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"ml-2\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <div className=\"flex mt-3\">\n        <button\n          className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n          disabled={!setName || !language}\n          onClick={() => {\n            uploadQuestions();\n          }}\n        >\n          Upload\n        </button>\n        <button\n          className=\"border-2 boder-gray-800 rounded-lg font-bold hover:text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-gray-800 ml-3\"\n          onClick={() => {\n            setShowCSVInput(true);\n          }}\n        >\n          Upload new file\n        </button>\n      </div>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"flex justify-center items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"flex py-6 px-6 md:px-8 my-2 md:my-6 mx-2 md:mx-6 lg:mx-10 max-h-full bg-white rounded-md focus:outline-none\">\n        <div className=\"overflow-y-auto flex-shrink-0 max-w-full flex flex-col\">\n          <h3 className=\"text-2xl mb-2\">\n            Upload a CSV file with custom questions\n          </h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport { CSVDataRow } from \".\";\n\nexport default function processCsvData(\n  rows: { data: CSVDataRow }[]\n): Omit<Question, \"id\">[] {\n  return rows.map((row) => {\n    const {\n      question,\n      type,\n      answer: csvAnswer,\n      latitude,\n      longitude,\n      toleranceRadius,\n      hint1,\n      hint2,\n      explanation,\n      multiple_choice_alternative1,\n      multiple_choice_alternative2,\n      multiple_choice_alternative3,\n    } = row.data;\n    const hints = [hint1, hint2].filter(Boolean) as string[];\n    const answer: Answer = {};\n    let alternatives: Question[\"alternatives\"];\n    switch (type) {\n      case QuestionTypes.NUMERICAL:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.DATE:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.GEO:\n        answer.geo = {\n          latitude: latitude as number,\n          longitude: longitude as number,\n          toleranceRadius: toleranceRadius,\n        };\n        break;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        answer.numerical = 0;\n        alternatives = [\n          csvAnswer as string,\n          multiple_choice_alternative1 as string,\n          multiple_choice_alternative2 as string,\n          multiple_choice_alternative3 as string,\n        ];\n        break;\n      default:\n        throw new Error(\"invalid question type\");\n    }\n    return {\n      question,\n      type,\n      answer,\n      hints,\n      explanation,\n      alternatives,\n    };\n  });\n}\n","import React from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { FaTimes } from \"react-icons/fa\";\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  children: React.ReactNode;\n}\n\nfunction UploadModal({ open, handleClose, children }: Props) {\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"flex justify-center items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"bg-white flex flex-col h-full relative rounded-md border border-gray-500 lg:w-2/3 md:w-3/4 overflow-y-auto py-5 px-8 focus:outline-none max-w-2xl\">\n        <button onClick={handleClose} className=\"absolute top-4 right-4\">\n          <FaTimes />\n        </button>\n        {children}\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { QueryLazyOptions, useMutation } from \"@apollo/react-hooks\";\nimport { FiCopy } from \"react-icons/fi\";\nimport UploadModal from \"../UploadModal\";\nimport { Game, Set } from \"../../../interfaces\";\nimport { CREATE_GAME_QUERY } from \"../../../api/queries\";\nimport Modal from \"../../shared/Modal\";\nimport countryCodes from \"../../../assets/countryCodes\";\n\nimport \"./styles.css\";\n\ninterface Props {\n  sets: Set[];\n  open: boolean;\n  handleOpen: () => void;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nfunction StartGameModal({\n  sets,\n  open,\n  handleClose,\n  handleOpen,\n  fetchSets,\n}: Props) {\n  const history = useHistory();\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [selectedSets, setSelectedSets] = useState<string[]>([]);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [languages, setLanguages] = useState<string[]>([]);\n  const [_, setError] = useState();\n\n  useEffect(() => {\n    const languages =\n      sets\n        .reduce<string[]>((uniqueLanguages, s) => {\n          if (!uniqueLanguages.includes(s.language)) {\n            uniqueLanguages.push(s.language);\n          }\n          return uniqueLanguages;\n        }, [])\n        .sort((a, b) => {\n          if (a === \"GB\") {\n            return -1;\n          }\n          return parseInt(a) - parseInt(b);\n        }) || [];\n    setLanguages(languages);\n    setShownLanguage(languages.includes(\"GB\") ? \"GB\" : languages[0]);\n    if (sets.length === 1) {\n      setSelectedSets([sets[0].setName]);\n    }\n  }, [sets]);\n\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: (err) => {\n      setError(() => {\n        throw err;\n      });\n    },\n  });\n\n  const { pathname } = history.location;\n  const isPrivateSetRoute = pathname !== \"/\";\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <>\n      <Modal open={open} handleClose={handleClose}>\n        <h2 className=\"text-2xl font-bold my-4\">\n          Select a set of questions to start a game\n        </h2>\n        {isPrivateSetRoute && (\n          <p className=\"text-sm font-semibold my-3 px-6 py-3 bg-yellow-100 border border-yellow-300 rounded-xl\">\n            Make sure you copy and save this URL in order to start games with\n            this question set at any time:\n            <br />\n            <button\n              onClick={async () => {\n                await navigator.clipboard.writeText(window.location.href);\n              }}\n              className=\"flex items-center text-blue-600 hover:text-blue-800 focus:outline-none font-bold\"\n            >\n              {window.location.href} <FiCopy className=\"ml-2 text-lg\" />\n            </button>\n          </p>\n        )}\n        <p className=\"my-2 font-semibold\">Languages:</p>\n        <div className=\"flex mb-3\">\n          {languages.map((language) => (\n            <span\n              key={language}\n              className={`text-4xl mx-1 px-5 rounded-full border border-gray-800 hover:bg-gray-800 ${\n                language === shownLanguage\n                  ? \"bg-gray-800\"\n                  : \"opacity-50 hover:opacity-100\"\n              }`}\n              onClick={() => {\n                setShownLanguage(language);\n              }}\n              style={{\n                cursor: language === shownLanguage ? \"default\" : \"pointer\",\n              }}\n            >\n              {countryCodeToFlagEmoji(language)}\n            </span>\n          ))}\n        </div>\n        {Object.keys(countryCodes).includes(shownLanguage) && (\n          <p className=\"mt-3 font-semibold\">\n            {countryCodes[shownLanguage as keyof typeof countryCodes]} question\n            sets:\n          </p>\n        )}\n        <div className=\"set-container my-4\">\n          {sets\n            .filter((s) => s.language === shownLanguage)\n            .map((set) => (\n              <span\n                key={set.setName}\n                className={`flex justify-center items-center rounded-md text-center px-4 py-3 border border-gray-800 hover:bg-gray-800 hover:text-white cursor-pointer ${\n                  selectedSets?.includes(set.setName)\n                    ? \"bg-gray-800 text-white\"\n                    : \"\"\n                }`}\n                style={{\n                  gridColumn: `span ${Math.round(\n                    Math.pow(set.setName.length, 0.35)\n                  )}`,\n                }}\n                onClick={(e) => {\n                  if (e.metaKey) {\n                    if (selectedSets?.includes(set.setName)) {\n                      setSelectedSets(\n                        selectedSets.filter(\n                          (setName) => set.setName !== setName\n                        )\n                      );\n                    } else {\n                      setSelectedSets([set.setName, ...selectedSets]);\n                    }\n                  } else {\n                    setSelectedSets([set.setName]);\n                  }\n                }}\n              >\n                {set.setName} ({set.numberOfQuestions})\n              </span>\n            ))}\n        </div>\n\n        <p className=\"mt-auto\">\n          You can also upload your own set of questions{\" \"}\n          <button\n            onClick={() => {\n              setIsUploadModalOpen(true);\n              handleClose();\n            }}\n            className=\"text-blue-600 hover:text-blue-800 focus:outline-none font-bold\"\n          >\n            here\n          </button>\n          .\n        </p>\n\n        <button\n          className=\"mt-3 bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600 mr-auto\"\n          onClick={handleCreateGame}\n          disabled={!selectedSets.length}\n        >\n          {loading ? \"Loading...\" : \"Play for Free\"}\n        </button>\n      </Modal>\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          handleOpen();\n          setIsUploadModalOpen(false);\n        }}\n        setShownLanguage={setShownLanguage}\n        setSelectedSets={setSelectedSets}\n        fetchSets={fetchSets}\n      />\n    </>\n  );\n}\n\nexport default StartGameModal;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { Set } from \"../../../interfaces\";\nimport StartGameModal from \"../StartGameModal\";\n\ninterface Props {\n  sets?: Set[];\n  setName?: string;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nexport default function ActionableHalf({\n  sets = [],\n  setName,\n  fetchSets,\n}: Props) {\n  const history = useHistory();\n  const [isCreateGameModalOpen, setIsCreateGameModalOpen] = useState(false);\n\n  useEffect(() => {\n    const { pathname } = history.location;\n    const isPrivateSetRoute = pathname !== \"/\";\n    if (isPrivateSetRoute) {\n      setIsCreateGameModalOpen(true);\n    }\n  }, [history]);\n\n  return (\n    <>\n      <div className=\"flex flex-col justify-end h-full py-8 lg:pb-32 lg:pt-0\">\n        <h1 className=\"text-5xl\">\n          <span className=\"font-light italic\">You think you know things?</span>\n          <br />\n          Let's make it interesting then!\n        </h1>\n        <p className=\"text-xl mt-3\">\n          <b>Free</b> poker-like trivia game.\n        </p>\n        <button\n          onClick={() => {\n            setIsCreateGameModalOpen(true);\n          }}\n          className=\"border border-blue-600 rounded-full font-bold text-3xl text-blue-600 hover:text-white text-center px-8 py-4 transition duration-300 ease-in-out hover:bg-blue-600 mt-8 mr-auto focus:outline-none\"\n        >\n          Create Game\n        </button>\n        <p className=\"mt-10\">\n          Check out the rules{\" \"}\n          <a\n            className=\"text-blue-700 hover:text-blue-900 p-0\"\n            href=\"https://docs.google.com/document/d/13pwz8yzrPdY1DcQqXvhejJAxXdWdPrvxR6GUxg5PJPs/edit?usp=sharing\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            here\n          </a>\n          .\n        </p>\n      </div>\n      <StartGameModal\n        sets={sets}\n        fetchSets={fetchSets}\n        open={isCreateGameModalOpen}\n        handleOpen={() => {\n          setIsCreateGameModalOpen(true);\n        }}\n        handleClose={() => {\n          setIsCreateGameModalOpen(false);\n        }}\n      />\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { Set } from \"../../interfaces\";\nimport { GET_SETS_QUERY } from \"../../api/queries\";\nimport PictureHalf from \"./PictureHalf\";\nimport ActionableHalf from \"./ActionableHalf\";\n\nimport \"./styles.css\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const [_, setError] = useState();\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: (err) => {\n      setError(() => {\n        throw err;\n      });\n    },\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-x-8 relative landing-page\">\n      <ActionableHalf {...{ sets: sets?.sets, setName, fetchSets }} />\n      <PictureHalf />\n    </div>\n  );\n}\n\nexport default Lobby;\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  // clear stoage when joining a new game\n  localStorage.clear();\n\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import React from \"react\";\n\ninterface Props {\n  playerName?: string;\n}\n\nfunction PlayerSpot({ playerName }: Props) {\n  return (\n    <div className=\"rounded-xl border-2 px-3 h-16 w-36 flex items-center justify-center shadow\">\n      <span className=\"overflow-hidden text-overflow-ellipsis\">\n        {playerName}\n      </span>\n    </div>\n  );\n}\n\nexport default PlayerSpot;\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface Props {\n  buttonLabel: string | React.ReactNode;\n  dialogTitle: string | React.ReactNode;\n  confirmLabel: string;\n  onConfirm: () => void;\n  isDisabled?: boolean;\n  btnClassName?: string;\n}\n\nexport default ({\n  buttonLabel,\n  dialogTitle,\n  confirmLabel,\n  onConfirm,\n  isDisabled,\n  btnClassName,\n}: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        className={\n          btnClassName ||\n          \"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        }\n        onClick={handleClickOpen}\n        disabled={isDisabled}\n      >\n        {buttonLabel}\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>{dialogTitle}</DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button\n              className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n              onClick={handleConfirm}\n            >\n              {confirmLabel}\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Game } from \"../../../../interfaces\";\nimport ConformDialogButton from \"../../../shared/ConfirmDialogButton\";\n\nexport type StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface Props {\n  gameId: Game[\"id\"];\n  startGame: StartGame;\n  isDisabled: boolean;\n}\n\nfunction StartGameButton({ startGame, gameId, isDisabled }: Props) {\n  const onConfirm = () => {\n    startGame({ variables: { gameId } });\n  };\n  return (\n    <ConformDialogButton\n      onConfirm={onConfirm}\n      dialogTitle=\"Are you sure you want to start the game? Once it's started no more players can join.\"\n      confirmLabel=\"Start Game\"\n      buttonLabel=\"Start Game\"\n      isDisabled={isDisabled}\n    />\n  );\n}\n\nexport default StartGameButton;\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.css\";\n\ninterface Props extends DrawerProps {\n  children: ReactNode;\n  onClose?: () => void;\n}\n\nexport default function DrawerComp({\n  children,\n  onClose,\n  ...drawerProps\n}: Props) {\n  return (\n    <Drawer\n      {...{\n        ...drawerProps,\n      }}\n    >\n      <div className=\"flex items-center flex-col bg-gray-200 py-4 min-h-52\">\n        {onClose && (\n          <span\n            id=\"drawer-close\"\n            className=\"ml-auto mr-3 -mb-4 -mt-2\"\n            onClick={onClose}\n          >\n            ╳\n          </span>\n        )}\n\n        <div className=\"container px-5 pb-5 flex flex-col md:max-w-screen-md\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n}\n","import React, { useState } from \"react\";\nimport Drawer from \"../../shared/Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nexport type CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default function NameInputDrawer({\n  createPlayer,\n  gameId,\n  playerId,\n}: Props) {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!playerId) {\n      createPlayer({ variables: { input: { gameId, playerName: name } } });\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"Your name\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"temporary\"\n    >\n      <>\n        <p className=\"font-bold\">Enter your name</p>\n        <p className=\"mt-4 text-sm\">Username</p>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"bg-white border border-gray-400 px-4\"\n            placeholder=\"Your name\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <button\n            type=\"submit\"\n            disabled={!name.length}\n            className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </div>\n      </>\n    </Drawer>\n  );\n}\n","import React from \"react\";\nimport { FiCopy } from \"react-icons/fi\";\nimport PlayerSpot from \"./PlayerSpot\";\nimport { Game, Player } from \"../../../interfaces\";\nimport StartGameButton, { StartGame } from \"./StartGameButton\";\nimport NameInputDrawer, { CreatePlayer } from \"../NameInputDrawer\";\n\ninterface Props {\n  players: Player[];\n  gameLink: string;\n  startGame: StartGame;\n  gameId: Game[\"id\"];\n  createPlayer: CreatePlayer;\n  playerId?: Player[\"id\"];\n  setNames: Game[\"setNames\"];\n}\n\nexport const maxNumberOfPlayers = 12;\n\nfunction PreGameLobby({\n  players,\n  gameLink,\n  startGame,\n  gameId,\n  createPlayer,\n  playerId,\n  setNames,\n}: Props) {\n  return (\n    <>\n      <div className=\"flex flex-col items-center font-semibold mt-4 px-5 mx-auto md:max-w-screen-md\">\n        <h5>Share this link with friends who want to join the game</h5>\n        <div className=\"flex items-center justify-between w-full break-all px-4 md:px-10 py-4 mt-4 bg-gray-200 rounded-md\">\n          <span className=\"w-3/4\">{gameLink}</span>\n          <button\n            className=\"text-blue-500 hover:text-blue-600 p-2 ripple focus:outline-none text-2xl\"\n            onClick={async () => {\n              await navigator.clipboard.writeText(window.location.href);\n            }}\n          >\n            <FiCopy />\n          </button>\n        </div>\n        <h4 className=\"mt-4 self-start text-lg\">\n          Question Set{setNames.length > 1 ? \"s\" : \"\"}: {setNames.join(\", \")}\n        </h4>\n        <p className=\"mt-20 self-start\">Players</p>\n        <p className=\"text-xs font-normal self-start w-full pb-2 border-b-2 border-grey-200\">\n          {maxNumberOfPlayers - players.length} Open spot\n          {maxNumberOfPlayers - players.length === 1 ? \"\" : \"s\"}\n        </p>\n        <hr />\n        <div className=\"mt-8 grid gap-8 w-full sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n          {players.map((player) => (\n            <PlayerSpot key={player.id} playerName={player?.name} />\n          ))}\n        </div>\n        {playerId && (\n          <div className=\"mt-16 self-start\">\n            <StartGameButton\n              startGame={startGame}\n              gameId={gameId}\n              isDisabled={players.length <= 1}\n            />\n          </div>\n        )}\n      </div>\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n    </>\n  );\n}\n\nexport default PreGameLobby;\n","import React from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { AiOutlineQuestion } from \"react-icons/ai\";\nimport { GiLaurelsTrophy, GiPartyPopper } from \"react-icons/gi\";\nimport {\n  FaBell,\n  FaRegLightbulb,\n  FaSadCry,\n  FaSkullCrossbones,\n} from \"react-icons/fa\";\nimport { FiArrowUp, FiMinus } from \"react-icons/fi\";\nimport { CgMore } from \"react-icons/cg\";\nimport { GrClose, GrMoney } from \"react-icons/gr\";\nimport { BettingStates, Player } from \"../../../../interfaces\";\n\nconst StatusWithTooltip = ({\n  tooltipTitle,\n  children,\n}: {\n  tooltipTitle: string;\n  children: React.ReactNode;\n}) => (\n  <Tooltip title={tooltipTitle}>\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst actionIcons = {\n  [BettingStates.RAISED]: (\n    <StatusWithTooltip tooltipTitle=\"Raised\">\n      <FiArrowUp />\n    </StatusWithTooltip>\n  ),\n  [BettingStates.CALLED]: (\n    <StatusWithTooltip tooltipTitle=\"Called\">\n      <FiMinus />\n    </StatusWithTooltip>\n  ),\n  [BettingStates.CHECKED]: (\n    <StatusWithTooltip tooltipTitle=\"Checked\">\n      <FiMinus />\n    </StatusWithTooltip>\n  ),\n};\n\ninterface Props {\n  player: Player;\n  isQuestionRoundOver: boolean;\n  isWinningPlayer?: boolean;\n  changeInMoney?: number;\n  hasFolded: boolean;\n  isDead?: boolean;\n  isTurnPlayer: boolean;\n  playerHasPlacedTheirGuess?: boolean;\n  allPlayersPlacedTheirGuess?: boolean;\n  playerIsAllIn?: boolean;\n}\n\nfunction Status({\n  player,\n  isWinningPlayer,\n  isQuestionRoundOver,\n  changeInMoney,\n  isDead,\n  hasFolded,\n  allPlayersPlacedTheirGuess,\n  playerHasPlacedTheirGuess,\n  isTurnPlayer,\n  playerIsAllIn,\n}: Props) {\n  if (isDead) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Out\">\n        <FaSkullCrossbones />\n      </StatusWithTooltip>\n    );\n  }\n  if (hasFolded) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Folded\">\n        <GrClose />\n      </StatusWithTooltip>\n    );\n  }\n  if (playerIsAllIn) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"All in\">\n        <GrMoney />\n      </StatusWithTooltip>\n    );\n  }\n  if (isQuestionRoundOver) {\n    if (isWinningPlayer) {\n      return <GiLaurelsTrophy />;\n    }\n    if (changeInMoney && changeInMoney > 0) {\n      return <GiPartyPopper />;\n    }\n    if (changeInMoney && changeInMoney < 0) {\n      return <FaSadCry />;\n    }\n    return null;\n  }\n  if (!allPlayersPlacedTheirGuess) {\n    if (playerHasPlacedTheirGuess) {\n      return (\n        <StatusWithTooltip tooltipTitle=\"Already submitted guess\">\n          <FaRegLightbulb />\n        </StatusWithTooltip>\n      );\n    } else {\n      return (\n        <StatusWithTooltip tooltipTitle=\"Not yet submitted guess\">\n          <AiOutlineQuestion />\n        </StatusWithTooltip>\n      );\n    }\n  }\n  if (isTurnPlayer) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Player's turn\">\n        <FaBell className=\"text-red-600\" />\n      </StatusWithTooltip>\n    );\n  }\n  const playerAction = player.bettingState;\n  if (playerAction && actionIcons[playerAction]) {\n    return actionIcons[playerAction];\n  }\n  return (\n    <StatusWithTooltip tooltipTitle=\"Waiting for turn\">\n      <CgMore />\n    </StatusWithTooltip>\n  );\n}\n\nexport default Status;\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) => {\n  if (questionRound.isOver) {\n    return true;\n  }\n  if (questionRound.question.type === QuestionTypes.MULTIPLE_CHOICE) {\n    return questionRound.bettingRounds.length >= 4;\n  }\n  return (\n    questionRound.question.hints.length + 1 < questionRound.bettingRounds.length\n  );\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport { FaRegLightbulb } from \"react-icons/fa\";\nimport { GrMoney } from \"react-icons/gr\";\nimport Status from \"./Status\";\nimport {\n  BettingRound,\n  Guess,\n  Player,\n  Question,\n  QuestionTypes,\n} from \"../../../../interfaces\";\nimport { calculateBettingRoundSpendingForPlayer } from \"../../helpers\";\nimport FormattedGuess from \"../../Guess\";\n\nimport \"./styles.css\";\n\nconst playerSeatingOrder = [1, 9, 5, 2, 11, 4, 8, 10, 6, 3, 12, 7];\n\ninterface Props {\n  player: Player;\n  numberOfPlayers: number;\n  currentBettingRound?: BettingRound;\n  changeInMoney?: number;\n  index: number;\n  isTurnPlayer: boolean;\n  isGameOver: boolean;\n  isAppPlayer: boolean;\n  isWinningPlayer?: boolean;\n  isQuestionRoundOver: boolean;\n  isShowdown: boolean;\n  hasFolded: boolean;\n  isSpectator: boolean;\n  allPlayersPlacedTheirGuess?: boolean;\n  guess?: Guess;\n  question?: Question;\n}\n\nconst PlayerComp = ({\n  player,\n  index,\n  numberOfPlayers,\n  isTurnPlayer,\n  isAppPlayer,\n  isWinningPlayer,\n  isQuestionRoundOver,\n  isShowdown,\n  currentBettingRound,\n  changeInMoney,\n  hasFolded,\n  isSpectator,\n  allPlayersPlacedTheirGuess,\n  guess,\n  question,\n  isGameOver,\n}: Props) => {\n  const isTurnPlayerClass =\n    isTurnPlayer && !isQuestionRoundOver ? \"isTurnPlayer\" : \"\";\n  const isAppPlayerClass = isAppPlayer ? \"bg-blue-200\" : \"bg-gray-200\";\n  const isDeadClass = player.isDead ? \"is-dead\" : \"\";\n\n  const bettingRoundSpending = currentBettingRound\n    ? calculateBettingRoundSpendingForPlayer(currentBettingRound, player.id)\n    : 0;\n  const revealGuess =\n    question?.type !== QuestionTypes.GEO &&\n    (isSpectator || (!!isQuestionRoundOver && isShowdown && !hasFolded));\n\n  const positionIndex = playerSeatingOrder.filter((i) => i <= numberOfPlayers)[\n    index\n  ];\n\n  let playerMoney = player.money;\n  if (isQuestionRoundOver && !isGameOver) {\n    playerMoney += bettingRoundSpending;\n  }\n\n  return (\n    <div\n      className={`player player-${positionIndex} shadow-md ${isTurnPlayerClass} ${isAppPlayerClass} ${isDeadClass} md:absolute`}\n    >\n      <span\n        className={`status text-gray-900 shadow-lg ${\n          isQuestionRoundOver && changeInMoney && changeInMoney > 0\n            ? \"bg-green-500\"\n            : \"bg-gray-400\"\n        }`}\n      >\n        <Status\n          {...{\n            player,\n            isWinningPlayer,\n            isTurnPlayer,\n            changeInMoney,\n            isQuestionRoundOver,\n            isDead: player.isDead,\n            hasFolded,\n            allPlayersPlacedTheirGuess,\n            playerHasPlacedTheirGuess: !!guess,\n            playerIsAllIn: !player.isDead && player.money === 0,\n          }}\n        />\n      </span>\n      <div className=\"info\">\n        <span className=\"name\">{player.name}</span>\n        <div className=\"flex items-center\">\n          <GrMoney className=\"mr-1\" />\n          <span>{playerMoney}</span>\n          {isQuestionRoundOver && changeInMoney && (\n            <span\n              className={`ml-1 ${\n                changeInMoney > 0 ? \"text-green-500\" : \"text-red-500\"\n              }`}\n            >\n              ({changeInMoney > 0 ? \"+\" : \"\"}\n              {changeInMoney})\n            </span>\n          )}\n        </div>\n        <div className=\"inner-info grid absolute text-sm left-48 md:left-auto sm:-right-3 md:right-0 md:text-lg md:grid-flow-auto text-gray-800 md:w-full\">\n          {!isQuestionRoundOver && !!bettingRoundSpending && (\n            <div className=\"flex items-center\">\n              <span className=\"mx-1\">\n                <GrMoney />\n              </span>\n              <span>{bettingRoundSpending}</span>\n            </div>\n          )}\n          {revealGuess && question?.type && guess?.guess && (\n            <div className=\"flex items-center\">\n              <span className=\"mx-1\">\n                <FaRegLightbulb />\n              </span>\n              <FormattedGuess\n                {...{\n                  guess: guess?.guess,\n                  questionType: question.type,\n                  alternatives: question.alternatives,\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerComp;\n","import React from \"react\";\nimport { GrMoney } from \"react-icons/gr\";\nimport { QuestionRound } from \"../../../../interfaces\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  isGameFull: boolean;\n}\n\nexport default function Pot({ usedQuestionRound, isGameFull }: Props) {\n  const totalPot = usedQuestionRound?.bettingRounds.reduce((sum, br) => {\n    br.bets.forEach((bet) => {\n      sum += bet.amount;\n    });\n    return sum;\n  }, 0);\n\n  const positioning = isGameFull\n    ? \"md:-right-5 md:-top-10\"\n    : \"md:left-24 md:bottom-20\";\n\n  return (\n    <div\n      className={`text-2xl md:text-3xl self-start z-1003 md:absolute ${positioning}`}\n    >\n      <div className=\"flex -mb-3\">\n        <span className=\"mx-1\">\n          <GrMoney />\n        </span>\n        <span>{totalPot}</span>\n      </div>\n      <span className=\"text-xs md:text-sm\">In Pot</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default function Hints({ usedQuestionRound }: Props) {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"flex flex-col\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport Guess from \"../Guess\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default function Question({ game, usedQuestionRound }: QuestionProps) {\n  const noHints =\n    usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE &&\n    usedQuestionRound.bettingRounds.length <= 1 &&\n    !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {[QuestionTypes.NUMERICAL, QuestionTypes.DATE].includes(\n        usedQuestionRound.question.type\n      ) &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                <Guess\n                  guess={usedQuestionRound.question.answer}\n                  questionType={usedQuestionRound.question.type}\n                />\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n}\n","import React, { ReactNode, useState } from \"react\";\nimport { LatLng, latLngBounds } from \"leaflet\";\nimport {\n  FeatureGroup,\n  MapContainer,\n  Marker,\n  Polyline,\n  TileLayer,\n  Circle,\n  Tooltip,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport { equals } from \"ramda\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.css\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface MarkerType {\n  label?: JSX.Element | string;\n  position: GeoCoordinate;\n  isAnswer?: boolean;\n  distanceToAnswer?: number;\n  radiusInKilometres?: number;\n}\n\ninterface Props {\n  markers?: MarkerType[];\n  handleOnClick?: HandleOnClick;\n  className?: string;\n}\n\nconst getNumberOfDecimals = (val: number = 0) => {\n  if (val > 1000) {\n    return 0;\n  }\n  if (val > 100) {\n    return 1;\n  }\n  if (val > 1) {\n    return 2;\n  }\n  return 4;\n};\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position && <Marker position={position} />;\n}\n\nfunction MarkerContainer({\n  children,\n  markers,\n}: {\n  children: ReactNode;\n  markers: MarkerType[];\n}) {\n  const map = useMap();\n  const bounds = latLngBounds([]);\n  markers?.forEach((data) => {\n    bounds.extend([data.position.latitude, data.position.longitude]);\n  });\n  bounds.isValid() &&\n    map.flyToBounds(bounds, {\n      // todo: make padding dependend on zoom level\n      padding: [10, 10],\n      maxZoom: markers.length > 1 ? 15 : 5,\n    });\n\n  return <FeatureGroup>{children}</FeatureGroup>;\n}\n\nexport default React.memo(\n  ({ markers = [], handleOnClick, className }: Props) => {\n    const answerMarker = markers.find((m) => m.isAnswer);\n    const distanceLines =\n      !!answerMarker &&\n      markers\n        .filter((m) => !m.isAnswer && m.distanceToAnswer)\n        .map((m) => ({\n          line: [\n            new LatLng(m.position.latitude, m.position.longitude),\n            new LatLng(\n              answerMarker.position.latitude,\n              answerMarker.position.longitude\n            ),\n          ],\n          label: m.distanceToAnswer?.toFixed(\n            getNumberOfDecimals(m.distanceToAnswer)\n          ),\n        }));\n\n    return (\n      <MapContainer\n        center={[0, 0]}\n        zoom={1}\n        maxBounds={[\n          [-90, -180],\n          [90, 180],\n        ]}\n        maxBoundsViscosity={1}\n        scrollWheelZoom={true}\n        className={className}\n      >\n        <TileLayer\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n        />\n        {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n        {distanceLines &&\n          distanceLines.map(({ line, label }) => (\n            <Polyline\n              key={line.toString()}\n              positions={line}\n              color=\"#393d4e\"\n              weight={2}\n            >\n              {label && (\n                <Tooltip\n                  className=\"distance-label\"\n                  direction=\"center\"\n                  permanent\n                >\n                  {label} km\n                </Tooltip>\n              )}\n            </Polyline>\n          ))}\n        {markers.length && (\n          <MarkerContainer markers={markers}>\n            {markers.map(({ position, label, radiusInKilometres }) => {\n              if (radiusInKilometres) {\n                return (\n                  <Circle\n                    center={[position.latitude, position.longitude]}\n                    radius={radiusInKilometres * 1000}\n                    key={position.latitude}\n                  >\n                    {label && (\n                      <Tooltip direction=\"center\" permanent>\n                        {label}\n                      </Tooltip>\n                    )}\n                  </Circle>\n                );\n              }\n              return (\n                <Marker\n                  alt=\"position marker\"\n                  position={[position.latitude, position.longitude]}\n                  key={position.latitude}\n                >\n                  {label && (\n                    <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                      {label}\n                    </Tooltip>\n                  )}\n                </Marker>\n              );\n            })}\n          </MarkerContainer>\n        )}\n      </MapContainer>\n    );\n  },\n  (prevProps, nextProps) => equals(prevProps.markers, nextProps.markers)\n);\n","import React from \"react\";\nimport { AiFillCheckCircle } from \"react-icons/ai\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { MarkerType } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound: QuestionRound;\n  isSpectator: Boolean;\n  className?: string;\n}\n\nexport default function GuessMap({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n  className,\n}: Props) {\n  const questionType = usedQuestionRound.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound.guesses.find(\n    (g) => g.playerId === playerId\n  );\n\n  let mapMarkers: MarkerType[] = playerGuess?.guess.geo\n    ? [\n        {\n          position: playerGuess.guess.geo,\n          label: \"You\",\n          distanceToAnswer: playerGuess.difference,\n        },\n      ]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound.isOver && usedQuestionRound.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound.guesses.reduce<MarkerType[]>(\n        (acc, { guess, playerId: pId, difference }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({\n              position: guess.geo,\n              label,\n              distanceToAnswer: difference,\n            });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: <AiFillCheckCircle className=\"text-green-500 text-2xl\" />,\n      isAnswer: true,\n      radiusInKilometres: usedQuestionRound.question.answer.geo.toleranceRadius,\n    });\n  }\n\n  return <Map className={className} markers={mapMarkers} />;\n}\n","import React from \"react\";\nimport { QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\n\nimport \"./index.css\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  handleClick?: (i: number) => void;\n  guess?: number;\n}\n\nexport default function MultipleChoiceOptions({\n  usedQuestionRound,\n  handleClick,\n  guess,\n}: Props) {\n  if (usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE) {\n    return null;\n  }\n  if (usedQuestionRound.question.alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n  const alternatives = usedQuestionRound.question.alternatives.map((alt) => ({\n    value: alt,\n    active: !usedQuestionRound.question.hiddenAlternatives?.includes(alt),\n  }));\n\n  const revealAnswer = getRevealAnswer(usedQuestionRound);\n  const answer = usedQuestionRound.question.answer.numerical;\n\n  return (\n    <div className=\"mc-container my-2\">\n      {alternatives.map((alt, i) => {\n        let optionClassName =\n          \"text-center border-2 border-blue-600 rounded-lg shadow px-4 py-3 font-bold focus:outline-none\";\n        if (!handleClick) {\n          optionClassName += \" no-pointer\";\n        }\n        if (alt.active) {\n          if (handleClick) {\n            optionClassName += \" hover:bg-blue-600 hover:text-white\";\n            if (guess === i) {\n              optionClassName += \" text-white bg-blue-600\";\n            } else {\n              optionClassName += \" text-blue-600\";\n            }\n          } else {\n            optionClassName += \" text-blue-600\";\n          }\n        } else {\n          optionClassName += \" text-blue-600\";\n        }\n        return (\n          <button\n            key={`${alt.value}_${i}`}\n            className={optionClassName}\n            onClick={() => handleClick && handleClick(i)}\n            disabled={!alt.active || (revealAnswer && i !== answer)}\n          >\n            {alt.value}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PlayerComp from \"./Player\";\nimport Pot from \"./Pot\";\nimport Question from \"../Question\";\nimport {\n  BettingRound,\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { hasPlayerFolded, haveAllPlayersPlacedTheirGuess } from \"../helpers\";\nimport GuessMap from \"../GuessMap\";\nimport MultipleChoiceOptions from \"../MultipleChoiceOptions\";\n\nimport \"./styles.css\";\nimport { getWinningPlayerArray } from \"./helpers\";\nimport { maxNumberOfPlayers } from \"../PreGameLobby\";\ninterface Props {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId?: Player[\"id\"];\n  isSpectator: boolean;\n}\n\nconst PokerTable = ({\n  game,\n  usedQuestionRound,\n  currentBettingRound,\n  playerId,\n  isSpectator,\n}: Props) => {\n  const isGeoQuestion = usedQuestionRound?.question.type === QuestionTypes.GEO;\n  const isMultipleChoiceQuestion =\n    usedQuestionRound?.question.type === QuestionTypes.MULTIPLE_CHOICE;\n  const allPlayersPlacedTheirGuess =\n    usedQuestionRound &&\n    game.players &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n  const winningPlayerIds = getWinningPlayerArray(game) || [];\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      {isGeoQuestion && (\n        <Question\n          {...{\n            game,\n            usedQuestionRound,\n          }}\n        />\n      )}\n      <div className=\"relative w-full md:w-4/5 my-6\">\n        <div\n          className={`poker-table ${\n            isGeoQuestion ? \"md:p-0 md:overflow-hidden\" : \"md:px-48 md:py-24\"\n          } rounded-full flex md:justify-center flex-col-reverse md:flex-col md:items-center md:w-full md:border-8 md:border-white md:shadow-xl`}\n        >\n          <div className=\"grid gap-y-6 mt-7 px-5 md:mt-0 md:px-0\">\n            {game.players.map((player, index) => {\n              const { changeInMoney } =\n                usedQuestionRound.results?.find(\n                  ({ playerId }) => player.id === playerId\n                ) || {};\n              const hasFolded = !!(\n                usedQuestionRound &&\n                hasPlayerFolded(usedQuestionRound, player.id)\n              );\n              const guess = usedQuestionRound.guesses.find(\n                (g) => g.playerId === player.id\n              );\n              return (\n                <PlayerComp\n                  key={player.id}\n                  {...{\n                    player,\n                    index,\n                    numberOfPlayers: game.players.length,\n                    currentBettingRound,\n                    changeInMoney,\n                    isAppPlayer: player.id === playerId,\n                    isTurnPlayer:\n                      player.id === currentBettingRound?.currentPlayer.id,\n                    isQuestionRoundOver: !!usedQuestionRound?.isOver,\n                    isShowdown: !!usedQuestionRound?.isShowdown,\n                    hasFolded,\n                    isSpectator,\n                    allPlayersPlacedTheirGuess,\n                    guess,\n                    question: usedQuestionRound.question,\n                    isWinningPlayer: winningPlayerIds.includes(player.id),\n                    isGameOver: game.isOver,\n                  }}\n                />\n              );\n            })}\n          </div>\n          <div className=\"flex flex-col gap-2 justify-center items-center w-full h-full\">\n            {!isGeoQuestion && (\n              <div>\n                <Pot\n                  usedQuestionRound={usedQuestionRound}\n                  isGameFull={game.players.length === maxNumberOfPlayers}\n                />\n                <Question\n                  {...{\n                    game,\n                    usedQuestionRound,\n                  }}\n                />\n              </div>\n            )}\n            {isGeoQuestion && (\n              <div className=\"flex flex-col-reverse w-full\">\n                <GuessMap\n                  {...{\n                    usedQuestionRound,\n                    isSpectator,\n                    playerId,\n                    players: game.players,\n                    className: \"map\",\n                  }}\n                />\n                <Pot\n                  usedQuestionRound={usedQuestionRound}\n                  isGameFull={game.players.length === maxNumberOfPlayers}\n                />\n              </div>\n            )}\n            {isMultipleChoiceQuestion && (\n              <MultipleChoiceOptions\n                {...{\n                  usedQuestionRound,\n                  alternatives:\n                    usedQuestionRound?.question.alternatives?.map((alt) => ({\n                      value: alt,\n                      active: !usedQuestionRound.question.hiddenAlternatives?.includes(\n                        alt\n                      ),\n                    })) || [],\n                  guess: usedQuestionRound?.guesses.find(\n                    (g) => g.playerId === playerId\n                  )?.guess.numerical,\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokerTable;\n","import { Game } from \"../../../interfaces\";\n\nexport const getWinningPlayerArray = (game: Game) => {\n  if (game.isOver) {\n    return game.players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [game.players[0]]\n      )\n      .map((p) => p.id);\n  }\n};\n","import React, { useState } from \"react\";\nimport { QuestionTypes } from \"../../../../interfaces\";\nimport FormattedGuess from \"../../Guess\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default function NumberInput({ handleSubmit }: Props) {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <input\n          value={guess}\n          onChange={(e) => {\n            const value = parseFloat(e.target.value);\n            if (value === 0) setGuess(0);\n            else setGuess(value || e.target.value);\n          }}\n          onKeyUp={(e) => {\n            if (e.which === 13) {\n              handleSubmit(guess);\n              setGuess(\"\");\n            }\n          }}\n          type=\"number\"\n          className=\"bg-white border border-gray-400 px-4\"\n          placeholder=\"Your answer\"\n          aria-label=\"Your answer\"\n          aria-describedby=\"basic-addon2\"\n          autoFocus\n        />\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          Submit\n        </button>\n        <p className=\"-mt-2 text-sm h-2\">\n          <FormattedGuess\n            {...{\n              guess: {\n                numerical:\n                  typeof guess === \"number\" ? guess : parseFloat(guess || \"\"),\n              },\n              questionType: QuestionTypes.NUMERICAL,\n            }}\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport DatePicker from \"react-date-picker\";\ninterface Props {\n  handleSubmit: (guess: number) => void;\n}\n\nfunction formatDateToString(date: Date) {\n  var mm = date.getMonth() + 1; // getMonth() is zero-based\n  var dd = date.getDate();\n\n  return [\n    date.getFullYear(),\n    (mm > 9 ? \"\" : \"0\") + mm,\n    (dd > 9 ? \"\" : \"0\") + dd,\n  ].join(\"\");\n}\n\nfunction DateInput({ handleSubmit }: Props) {\n  const [guess, setGuess] = useState<Date>();\n\n  const submit = (stringValue?: string) => {\n    if (stringValue) {\n      const value = parseInt(stringValue.replaceAll(\"-\", \"\"));\n      if (value) {\n        handleSubmit(value);\n        setGuess(undefined);\n      }\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      <DatePicker\n        className=\"bg-white\"\n        dayPlaceholder=\"DD\"\n        monthPlaceholder=\"MM\"\n        yearPlaceholder=\"YYYY\"\n        calendarClassName=\"hidden\"\n        showLeadingZeros={true}\n        calendarIcon={null}\n        value={guess}\n        onChange={(date: Date | Date[]) => {\n          setGuess(date as Date);\n        }}\n      />\n      <button\n        type=\"submit\"\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        disabled={!guess}\n        onClick={() => {\n          if (guess) {\n            submit(formatDateToString(guess));\n          }\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n}\n\nexport default DateInput;\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        onClick={() => {\n          if (guess) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport MultipleChoiceOptions from \"../../MultipleChoiceOptions\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  alternatives?: {\n    value: string;\n    active: boolean;\n  }[];\n  handleSubmit: (guess: number) => void;\n}\n\nexport default function MultipleChoiceInput({\n  usedQuestionRound,\n  handleSubmit,\n  alternatives,\n}: Props) {\n  const [guess, setGuess] = useState<number>();\n  if (alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n\n  return (\n    <>\n      <MultipleChoiceOptions\n        usedQuestionRound={usedQuestionRound}\n        handleClick={setGuess}\n        guess={guess}\n      />\n      <button\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        onClick={() => {\n          if (guess || guess === 0) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess && guess !== 0}\n      >\n        Submit\n      </button>\n    </>\n  );\n}\n","import React from \"react\";\nimport Drawer from \"../../shared/Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport DateInput from \"./DateInput\";\nimport MapInput from \"./MapInput\";\nimport MultipleChoiceInput from \"./MultipleChoiceInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  player?: Player;\n  addGuessMutation: AddGuess;\n  showAnswerDrawer: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n}\n\nexport default function AnswerDrawer({\n  currentQuestionRound,\n  player,\n  addGuessMutation,\n  game,\n  showAnswerDrawer,\n  setShowAnswerDrawer,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n}: QuestionProps) {\n  if (!player || player.isDead) {\n    return null;\n  }\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        player.id\n      );\n      setShowAnswerDrawer(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, player.id);\n    setShowAnswerDrawer(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.DATE:\n        return <DateInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        const alternatives = currentQuestionRound.question.alternatives?.map(\n          (alt) => ({ value: alt, active: true })\n        );\n        return (\n          <MultipleChoiceInput\n            usedQuestionRound={currentQuestionRound}\n            alternatives={alternatives}\n            handleSubmit={handleNumberInputSubmit}\n          />\n        );\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      onClose={() => {\n        setShowAnswerDrawer(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        (showAnswerDrawer || game.questionRounds.length === 1) &&\n        !hasPlayerPlacedGuessInCurrentQuestionRound\n      }\n      variant=\"temporary\"\n    >\n      <>\n        <p className=\"font-bold\">{currentQuestionRound.question.question}</p>\n        <p className=\"mt-4 text-sm\">Your answer</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n}\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default function ActionButton({\n  text,\n  handleOnClick,\n  isDisabled,\n}: ActionButtonProps) {\n  return (\n    <button\n      className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-3 py-3 md:px-4 md:py-3 transition duration-300 ease-in-out hover:bg-blue-600 w-full text-xs md:text-base\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../../shared/Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../../helpers\";\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default function RaiseInputDrawer({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"bg-white border border-gray-400 px-4\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <button\n            disabled={\n              !!moneyRemaining &&\n              (amount < amountToCall || amount > moneyRemaining)\n            }\n            className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </div>\n        <div className=\"flex\">\n          {moneyRemaining && (\n            <>\n              {[5, 10, 20, 50]\n                .filter((amount) => amount < moneyRemaining)\n                .map((amount) => (\n                  <span\n                    key={amount}\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setAmount(amount)}\n                    className=\"mt-2 text-white bg-blue-500 mr-2 px-4 rounded-2xl hover:bg-blue-600\"\n                  >\n                    {amount}\n                  </span>\n                ))}\n              <span\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setAmount(moneyRemaining)}\n                className=\"mt-2 text-white bg-blue-500 mr-2 px-4 rounded-2xl hover:bg-blue-600\"\n              >\n                All in\n              </span>\n            </>\n          )}\n        </div>\n      </>\n    </Drawer>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n} from \"../../../../interfaces\";\nimport {\n  PlaceBet,\n  call,\n  raise,\n  fold,\n  calculateAmountToCall,\n} from \"../../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n  isAppPlayerTurn: boolean;\n}\n\nexport default function ActionButtons({\n  game,\n  usedQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  isAppPlayerTurn,\n}: ActionButtonsProps) {\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  if (!usedQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n\n  return (\n    <div className=\"grid md:grid-cols-3 gap-3 md:gap-4\">\n      <ActionButton\n        text={amountToCall > 0 ? `Call for ${amountToCall}` : \"Check\"}\n        handleOnClick={() => {\n          call(placeBet, game, playerId);\n        }}\n        isDisabled={!isAppPlayerTurn}\n      />\n      <ActionButton\n        text=\"Raise\"\n        handleOnClick={() => {\n          setShowRaiseDrawer(true);\n        }}\n        isDisabled={\n          (player?.money && amountToCall >= player?.money) || !isAppPlayerTurn\n        }\n      />\n      <ActionButton\n        text=\"Fold\"\n        handleOnClick={() => {\n          fold(placeBet, game, playerId);\n        }}\n        isDisabled={!isAppPlayerTurn}\n      />\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\nimport { GrMoney } from \"react-icons/gr\";\nimport {\n  QuestionRound,\n  BettingRound,\n  Player,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"./ActionButtons\";\nimport {\n  calculateBettingRoundSpendingForPlayer,\n  hasPlayerFolded,\n  haveAllPlayersPlacedTheirGuess,\n} from \"../helpers\";\nimport FormattedGuess from \"../Guess\";\nimport Status from \"../PokerTable/Player/Status\";\n\ninterface Props\n  extends Omit<\n    ActionButtonsProps,\n    \"currentQuestionRound\" | \"playerId\" | \"isAppPlayerTurn\"\n  > {\n  player: Player;\n  usedQuestionRound: QuestionRound;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  currentBettingRound?: BettingRound;\n}\n\nconst Footer = ({\n  game,\n  usedQuestionRound,\n  player,\n  placeBet,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n  setShowAnswerDrawer,\n  currentBettingRound,\n}: Props) => {\n  const isAppPlayerTurn =\n    currentBettingRound?.currentPlayer.id === player.id &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n\n  const appPlayerAnswer = usedQuestionRound.guesses.find(\n    (guess) => guess.playerId === player.id\n  );\n\n  let appPlayerMoney = game.players.find((p) => p.id === player.id)?.money ?? 0;\n  const bettingRoundSpending =\n    (currentBettingRound &&\n      calculateBettingRoundSpendingForPlayer(currentBettingRound, player.id)) ||\n    0;\n  if (usedQuestionRound.isOver && player.id && currentBettingRound) {\n    appPlayerMoney += bettingRoundSpending;\n  }\n\n  const questionType = usedQuestionRound.question.type;\n\n  const { changeInMoney = 0 } =\n    usedQuestionRound?.results?.find(\n      ({ playerId }) => player.id === playerId\n    ) || {};\n\n  const allPlayersPlacedTheirGuess =\n    usedQuestionRound &&\n    game.players &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n\n  return (\n    <footer className=\"fixed shadow-top-md bottom-0 left-0 w-full h-44 bg-gray-200 px-4 flex flex-col items-center justify-end z-1003\">\n      <div className=\"w-full flex flex-col items-end md:items-center justify-center max-w-xl my-auto\">\n        <div className=\"absolute left-4 md:left-10 top-0 flex flex-col items-center max-w-2xs text-center\">\n          <span\n            className={`absolute shadow-top-md top-0 h-20 w-20 -mt-10 rounded-full flex items-center justify-center text-4xl ${\n              usedQuestionRound.isOver && changeInMoney > 0\n                ? \"bg-green-500\"\n                : \"bg-gray-400\"\n            } ${\n              usedQuestionRound.question.type === QuestionTypes.GEO\n                ? \"left-0\"\n                : \"\"\n            }`}\n          >\n            {isAppPlayerTurn && !usedQuestionRound.isOver && (\n              <span className=\"absolute\">\n                <CountdownCircleTimer\n                  isPlaying={isAppPlayerTurn}\n                  size={80}\n                  strokeWidth={5}\n                  duration={15}\n                  colors={[\n                    [\"#004777\", 0.5],\n                    [\"#A30000\", 1],\n                  ]}\n                  trailColor=\"#9ca3af\"\n                />\n              </span>\n            )}\n            <span>\n              <Status\n                {...{\n                  player,\n                  isQuestionRoundOver: usedQuestionRound.isOver,\n                  isTurnPlayer:\n                    !usedQuestionRound.isOver &&\n                    player.id === currentBettingRound?.currentPlayer.id,\n                  hasFolded: !!(\n                    usedQuestionRound &&\n                    hasPlayerFolded(usedQuestionRound, player.id)\n                  ),\n                  changeInMoney,\n                  allPlayersPlacedTheirGuess,\n                  playerHasPlacedTheirGuess: !!appPlayerAnswer,\n                }}\n              />\n            </span>\n          </span>\n          {questionType !== QuestionTypes.GEO && (\n            <>\n              <p className=\"text-xs mt-12\">Your Answer</p>\n              <span className=\"text-2xl overflow-hidden max-h-24\">\n                {appPlayerAnswer && (\n                  <FormattedGuess\n                    guess={appPlayerAnswer.guess}\n                    questionType={questionType}\n                    alternatives={usedQuestionRound.question.alternatives}\n                  />\n                )}\n              </span>\n            </>\n          )}\n        </div>\n        <div\n          className={`flex items-center ${\n            usedQuestionRound.isOver ? \"flex-col\" : \"md:flex-col\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center mr-3 sm:mr-5 md:mr-0\">\n            <p className=\"text-xs\">Available money</p>\n            <div className=\"flex items-center mb-6 text-2xl\">\n              <GrMoney className=\"mx-1\" />\n              <span>{appPlayerMoney}</span>\n              {changeInMoney !== 0 && (\n                <span\n                  className={`ml-2 ${\n                    changeInMoney > 0 ? \"text-green-500\" : \"text-red-500\"\n                  }`}\n                >\n                  ({changeInMoney > 0 ? \"+\" : \"\"}\n                  {changeInMoney})\n                </span>\n              )}\n            </div>\n          </div>\n          {!hasPlayerPlacedGuessInCurrentQuestionRound &&\n            game.questionRounds.length > 1 && (\n              <button\n                className=\"new-question-button bg-blue-500 rounded-lg font-bold text-white text-center px-3 py-2 md:px-4 md:py-3 text-xs md:text-base transition duration-300 ease-in-out hover:bg-blue-600 mx-auto\"\n                onClick={() => {\n                  setShowAnswerDrawer(true);\n                }}\n              >\n                Answer New Question\n              </button>\n            )}\n          {hasPlayerPlacedGuessInCurrentQuestionRound && player.id && (\n            <ActionButtons\n              {...{\n                game,\n                usedQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId: player.id,\n                isAppPlayerTurn,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\nimport ConfirmDialogButton from \"../../shared/ConfirmDialogButton\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nfunction LeaveGameButton({\n  gameId,\n  playerId,\n  gameHasStarted,\n  setPlayerId,\n}: Props) {\n  const [_, setError] = useState();\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: (err) => {\n        setError(() => {\n          throw err;\n        });\n      },\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n  };\n\n  return (\n    <ConfirmDialogButton\n      onConfirm={handleConfirm}\n      dialogTitle={\n        <>\n          Are you sure?\n          {gameHasStarted && (\n            <p>If you leave the game, you cannot join again later.</p>\n          )}\n        </>\n      }\n      confirmLabel=\"Leave Game\"\n      buttonLabel={<ExitToAppOutlinedIcon />}\n      btnClassName=\"leave-game btn btn-link btn-lg\"\n    />\n  );\n}\n\nexport default LeaveGameButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport { AiFillFileUnknown } from \"react-icons/ai\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PreGameLobby from \"./PreGameLobby\";\nimport PokerTable from \"./PokerTable\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport ErrorBoundary from \"../ErrorBoundary\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\n// @ts-ignore\nimport notificationSound from \"../../assets/turn-notification.mp3\";\n// @ts-ignore\nimport alertSound from \"../../assets/turn-alert.wav\";\n\nimport \"./styles.css\";\n\nconst vibrate = (t: number) => {\n  window.navigator.vibrate && window.navigator.vibrate(t);\n};\nlet soundInterval: NodeJS.Timeout;\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showAnswerDrawer, setShowAnswerDrawer] = useState(false);\n  const [\n    showNewQuestionRoundForSpectator,\n    setShowNewQuestionRoundForSpectator,\n  ] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [_, setError] = useState();\n\n  const [playNotification] = useState(new Audio(notificationSound));\n  const [playAlert] = useState(new Audio(alertSound));\n\n  const errorHandler = (err: Error) => {\n    setError(() => {\n      throw err;\n    });\n  };\n\n  const [fetchGame, { loading }] = useLazyQuery<{ game: Game }>(\n    GET_GAME_BY_ID,\n    {\n      fetchPolicy: \"cache-and-network\",\n      onError: errorHandler,\n      onCompleted: ({ game }) => {\n        setGame(game);\n      },\n    }\n  );\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      clearInterval(soundInterval);\n      const game = subscriptionData.data?.gameUpdated;\n      setGame(game);\n      const cqr = getCurrentQuestionRound(game);\n      const cbr = getCurrentBettingRound(cqr);\n      const players = subscriptionData.data?.gameUpdated.players;\n      const allPlayersPlacedTheirBet =\n        cqr && players && haveAllPlayersPlacedTheirGuess(cqr, players);\n      if (allPlayersPlacedTheirBet) {\n        setShowNewQuestionRoundForSpectator(false);\n      }\n      if (\n        !game?.isOver &&\n        cbr?.currentPlayer.id === playerId &&\n        allPlayersPlacedTheirBet\n      ) {\n        playNotification.play();\n        vibrate(200);\n        soundInterval = setInterval(() => {\n          playAlert.play();\n          vibrate(200);\n        }, 15000);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (loading) {\n    return <h3 className=\"text-lg mt-6 font-semibold\">Loading...</h3>;\n  }\n\n  if (!game) {\n    return (\n      <p className=\"text-lg mt-6 flex items-center font-semibold\">\n        <AiFillFileUnknown className=\"text-4xl mr-2\" /> Game not found.\n      </p>\n    );\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !showNewQuestionRoundForSpectator &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <div\n      className={`p-2 flex flex-col md:justify-center ${\n        isSpectator || !gameHasStarted\n          ? \"min-h-screen\"\n          : \"min-h-screen-minus-52 mb-52\"\n      }`}\n    >\n      <div className=\"flex flex-col md:my-auto\">\n        {!gameHasStarted && (\n          <PreGameLobby\n            players={game.players}\n            gameLink={window.location.href}\n            startGame={startGame}\n            gameId={game.id}\n            createPlayer={createPlayer}\n            playerId={playerId}\n            setNames={game.setNames}\n          />\n        )}\n        {gameHasStarted && usedQuestionRound && (\n          <PokerTable\n            {...{\n              game,\n              usedQuestionRound,\n              currentBettingRound,\n              playerId,\n              isSpectator,\n            }}\n          />\n        )}\n        {isSpectator && usedQuestionRound?.isOver && !game.isOver && (\n          <button\n            className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600 mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRoundForSpectator(true);\n            }}\n          >\n            Show Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            player,\n            showAnswerDrawer,\n            setShowAnswerDrawer,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && player && !isSpectator && usedQuestionRound && (\n        <Footer\n          {...{\n            game,\n            usedQuestionRound,\n            placeBet,\n            player,\n            startGame,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n            setShowAnswerDrawer,\n            currentBettingRound,\n          }}\n        />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </div>\n  );\n}\n\nfunction GameWithErrorBoundary() {\n  return (\n    <ErrorBoundary>\n      <GameComponent />\n    </ErrorBoundary>\n  );\n}\n\nexport default GameWithErrorBoundary;\n","import { Error } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { BiError } from \"react-icons/bi\";\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  public state: State = {\n    hasError: false,\n    error: undefined,\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      const errorMessage = this.state.error?.message.replace(\n        \"GraphQL error: \",\n        \"\"\n      );\n      return (\n        <p className=\"text-lg mt-6 flex items-center font-semibold\">\n          <BiError className=\"text-4xl text-red-600 mr-3\" />\n          {errorMessage === \"Game not found\" ? (\n            <>{errorMessage}</>\n          ) : (\n            <>\n              A technical error has occurred: \"{errorMessage}\"\n              <br /> Try to refresh the page.\n            </>\n          )}\n        </p>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/turn-notification.e2e956ce.mp3\";","export default __webpack_public_path__ + \"static/media/turn-alert.11acdad1.wav\";","import React from \"react\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div className=\"mx-auto flex flex-col max-w-full sm:max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl px-3\">\n      <Link to=\"/\" className=\"mt-4 text-3xl font-bold\">\n        Certainty Poker\n      </Link>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nimport \"./index.css\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}