{"version":3,"sources":["api/queries.ts","api/errorHandler.ts","components/Lobby/UploadModal/index.tsx","components/Lobby/index.tsx","interfaces.ts","storage.ts","components/Game/helpers/helpers.ts","components/Game/PlayerTable/Avatar/index.tsx","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/Map/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/GuessMap/index.tsx","components/Game/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","styles","card","maxHeight","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","useMutation","variables","questions","onCompleted","push","undefined","uploadQuestions","content","className","onDrop","d","map","row","question","answer","hints","hint1","hint2","explanation","onError","file","inputElem","reason","log","config","header","addRemoveButton","removeButtonColor","value","onChange","e","target","type","placeholder","aria-label","required","q","key","h","explantion","id","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","style","Lobby","QuestionTypes","useParams","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","setNames","createGame","errorHandler","loading","useLazyQuery","fetchPolicy","sets","useEffect","handleCreateGame","a","length","to","pathname","color","window","host","set","includes","gridColumn","Math","round","pow","metaKey","filter","numberOfQuestions","setFingerprintToStorage","gameId","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","Size","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","Object","values","hasPlayerFolded","foldedPlayerIds","getRevealAnswer","questionRound","isOver","getGuess","guess","questionType","NUMERICAL","numerical","GEO","geo","latitude","longitude","Error","raise","placeBet","currentBettingRound","currentPlayer","moneyOfPlayer","find","money","input","min","addGuess","addGuessMutation","name","isFolded","gameIsOver","size","isDealer","isPlayerTurn","showPreviousQuestionRoundResults","lg","winningPlayerIds","usedQuestionRound","isSpectator","sort","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","winners","p","hasFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","revealGuess","isShowdown","Avatar","dealerId","md","role","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","handleSubmit","setGuess","parseFloat","onKeyUp","which","aria-describedby","autoFocus","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","markers","handleOnClick","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","label","Tooltip","direction","offset","permanent","Map","showNewQuestionRound","setShowNewQuestionRound","canAddGuess","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","anchor","variant","NumberInput","MapInput","getInput","emojiRegex","createPlayer","playerName","newName","match","text","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","gameHasStarted","setPlayerId","React","setOpen","errorLogger","removeItem","deletePlayerIdFromStorage","removePlayer","Dialog","DialogTitle","DialogActions","playerGuess","g","mapMarkers","pId","GameComponent","setGame","gqlErr","setGqlErr","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","gameUpdated","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","playerGuessInCurrentQuestionRound","hasPlayerPlacedGuessInCurrentQuestionRound","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","GuessMap","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","LeaveGameButton","PageNotFound","App","href","path","component","exact","Game","Boolean","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bf21ca83.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\n\nconst styles = {\n  card: {\n    maxHeight: \"95vh\",\n  },\n};\n\ninterface UploadModalProps {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({\n  open,\n  handleClose,\n  fetchSets,\n  setSelectedSets,\n}: UploadModalProps) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState(0);\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n  });\n\n  const handleOnDrop = (d: any) => {\n    setShowCSVInput(false);\n    setData(\n      d.map((row: any) => {\n        const { question, answer, hint1, hint2, explanation } = row.data;\n        return { question, answer, hints: [hint1, hint2], explanation };\n      })\n    );\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.log(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <h4>Format:</h4>\n      <table className=\"table text-dark table-responsive small\">\n        <tr>\n          <td>question</td>\n          <td>answer</td>\n          <td>hint1</td>\n          <td>hint2</td>\n          <td>explanation</td>\n        </tr>\n        <tr>\n          <td>Example Question?</td>\n          <td>274,84</td>\n          <td>Example hint 1</td>\n          <td>Example hint 2</td>\n          <td>Example explanation (optional)</td>\n        </tr>\n      </table>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-3\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required={true}\n        />\n      </div>\n      <h3>Review your upload:</h3>\n      <hr />\n      {(data || []).map((q: any) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          <p>\n            Answer: <b>{q.answer}</b>\n          </p>\n          <p>\n            Hints:{\" \"}\n            {q.hints.map((h: string) => (\n              <>\n                <br />\n                <span key={h}>\n                  <b>{h}</b>\n                </span>\n              </>\n            ))}\n          </p>\n          {q.explantion && (\n            <p>\n              Explanation: <b>{q.explantion}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this question set of questions will not appear in the\n            list on the start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\" style={styles.card}>\n        <div className=\"card-body text-dark overflow-auto\">\n          <h3>Upload a file with custom questions</h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport { Game, Set } from \"../../interfaces\";\nimport { CREATE_GAME_QUERY, GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport UploadModal from \"./UploadModal\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <p className=\"mt-3\">\n          Start by selecting one or more sets of trivia questions or upload your\n          own{\" \"}\n          <button\n            className=\"btn btn-link p-0\"\n            onClick={() => {\n              setIsUploadModalOpen(true);\n            }}\n          >\n            here ⤴\n          </button>\n          .\n        </p>\n      )}\n      <div className=\"set-container my-4\">\n        {sets?.sets.map((set) => (\n          <span\n            key={set.setName}\n            className={`set badge border-light ${\n              selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n            } ${setName ? \"mr-auto\" : \"\"}`}\n            style={{\n              gridColumn: `span ${Math.round(\n                Math.pow(set.setName.length, 0.35)\n              )}`,\n            }}\n            onClick={(e) => {\n              if (setName) {\n                return;\n              }\n              if (e.metaKey) {\n                if (selectedSets?.includes(set.setName)) {\n                  setSelectedSets(\n                    selectedSets.filter((setName) => set.setName !== setName)\n                  );\n                } else {\n                  setSelectedSets([set.setName, ...selectedSets]);\n                }\n              } else {\n                setSelectedSets([set.setName]);\n              }\n            }}\n          >\n            {set.setName} ({set.numberOfQuestions})\n          </span>\n        ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </>\n  );\n}\n\nexport default Lobby;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n}\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n  Answer,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) =>\n  questionRound.isOver ||\n  questionRound.question.hints.length + 1 < questionRound.bettingRounds.length;\n\nexport const getGuess = (guess: Answer, questionType?: QuestionTypes) => {\n  if (!guess) return;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return guess.numerical;\n    case QuestionTypes.GEO:\n      return `[${guess.geo?.latitude}, ${guess.geo?.longitude}]`;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface Props {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  showPreviousQuestionRoundResults: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n  showPreviousQuestionRoundResults,\n}: Props) => {\n  const isPlayerTurn =\n    !showPreviousQuestionRoundResults &&\n    !gameIsOver &&\n    currentBettingRound?.currentPlayer.id === id;\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span className={isPlayerTurn && size === Size.lg ? \"tada\" : \"\"}>\n        {name}\n      </span>\n      {isPlayerTurn && <span className=\"turn\">{\">\"}</span>}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n  getGuess,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  game: Game;\n  isSpectator: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  game,\n  isSpectator,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n  const questionType = usedQuestionRound?.question.type;\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n        const revealGuess =\n          isSpectator ||\n          (!!usedQuestionRound?.isOver &&\n            usedQuestionRound?.isShowdown &&\n            !hasFolded);\n        const guess = guesses && getGuess(guesses[id], questionType);\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pb-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n                showPreviousQuestionRoundResults: !!usedQuestionRound?.isOver,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {questionType === QuestionTypes.NUMERICAL &&\n                (revealGuess ? (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡 {guess}\n                  </span>\n                ) : (\n                  guesses && (\n                    <span role=\"img\" aria-label=\"answer\">\n                      💡{\" \"}\n                      <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                        {!guess && guess !== 0\n                          ? null\n                          : id === playerId\n                          ? guess\n                          : 432}\n                      </span>\n                    </span>\n                  )\n                ))}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (usedQuestionRound?.isOver && !game.isOver\n                      ? bettingRoundSpending\n                      : 0)}\n                </span>\n                {!usedQuestionRound?.isOver && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {usedQuestionRound?.isOver && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getGuess, getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.bettingRounds.length <= 1 && !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div className=\"mb-4\">\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {usedQuestionRound.question.type !== QuestionTypes.GEO &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                {getGuess(\n                  usedQuestionRound.question.answer,\n                  usedQuestionRound.question.type\n                )}\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport L, {\n  MapContainer,\n  TileLayer,\n  Marker,\n  useMapEvents,\n  Tooltip,\n} from \"react-leaflet\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n}\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position === null ? null : <Marker position={position} />;\n}\n\nexport default ({ markers, handleOnClick }: Props) => {\n  return (\n    <MapContainer\n      center={[0, 0]}\n      zoom={1}\n      scrollWheelZoom={true}\n      className=\"mb-5\"\n    >\n      <TileLayer\n        attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n      />\n      {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n      {markers?.length &&\n        markers.map(({ position, label }) => (\n          <Marker position={[position.latitude, position.longitude]}>\n            {label && (\n              <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                {label}\n              </Tooltip>\n            )}\n          </Marker>\n        ))}\n    </MapContainer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          guess && handleSubmit(guess);\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport MapInput from \"./MapInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  if (player?.isDead) {\n    return null;\n  }\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        playerId\n      );\n      setShowNewQuestionRound(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, playerId);\n    setShowNewQuestionRound(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        id=\"leave-game\"\n        className=\"btn btn-link btn-lg\"\n        onClick={handleClickOpen}\n      >\n        <ExitToAppOutlinedIcon />\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>\n            Are you sure?\n            {gameHasStarted && (\n              <p>If you leave the game, you cannot join again later.</p>\n            )}\n          </DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              Leave Game\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  )?.guess.geo;\n\n  let mapMarkers: Marker[] = playerGuess\n    ? [{ position: playerGuess, label: \"You\" }]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === playerId)?.name || \"\";\n            acc.push({ position: guess.geo, label });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n    });\n  }\n\n  console.log(\"mapMarkers\", mapMarkers);\n  return <Map markers={mapMarkers} />;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport GuessMap from \"./GuessMap\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\n\nimport \"./styles.scss\";\nimport errorLogger from \"../../api/errorHandler\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(true);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      setGame(subscriptionData.data?.gameUpdated);\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <>\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        <div>\n          {usedQuestionRound && (\n            <Question\n              {...{\n                game,\n                usedQuestionRound,\n                playerId,\n              }}\n            />\n          )}\n          <GuessMap\n            {...{\n              usedQuestionRound,\n              isSpectator,\n              playerId,\n              players: game.players,\n            }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound,\n              currentBettingRound,\n              isSpectator,\n              game,\n            }}\n          />\n        </div>\n        {!showNewQuestionRound &&\n          !hasPlayerPlacedGuessInCurrentQuestionRound &&\n          !isSpectator && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto mt-5\"\n              onClick={() => {\n                setShowNewQuestionRound(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && !isSpectator && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      {!gameHasStarted && (\n        <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}