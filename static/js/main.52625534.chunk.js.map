{"version":3,"sources":["api/queries.ts","api/errorHandler.ts","components/Lobby/UploadModal/index.tsx","components/Lobby/index.tsx","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/helpers/queryHelpers.ts","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","err","console","error","message","UploadModal","open","handleClose","fetchSets","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","privateGameLink","setPrivateGameLink","useMutation","variables","questions","onCompleted","undefined","uploadQuestions","content","className","onDrop","d","map","row","question","answer","hints","hint1","hint2","explanation","onError","file","inputElem","reason","log","config","header","addRemoveButton","removeButtonColor","value","onChange","e","target","type","placeholder","aria-label","required","q","key","h","explantion","id","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","to","style","color","window","location","host","Lobby","Size","useParams","history","useHistory","selectedSets","setSelectedSets","isUploadModalOpen","setIsUploadModalOpen","setNames","createGame","push","errorHandler","loading","useLazyQuery","fetchPolicy","sets","useEffect","handleCreateGame","a","length","set","includes","gridColumn","Math","round","pow","metaKey","filter","numberOfQuestions","setFingerprintToStorage","gameId","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","Object","values","getRevealAnswer","questionRound","isOver","raise","placeBet","currentBettingRound","currentPlayer","Error","moneyOfPlayer","find","money","input","min","name","isFolded","gameIsOver","size","isDealer","winningPlayerIds","usedQuestionRound","revealAnswers","sort","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","guess","winners","p","hasFolded","foldedPlayerIds","hasPlayerFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","Avatar","dealerId","lg","md","role","styles","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","addGuessMutation","showNewQuestionRound","setShowNewQuestionRound","setGuess","canAddGuess","handleSubmit","addGuess","anchor","variant","parseFloat","onKeyUp","which","aria-describedby","emojiRegex","createPlayer","playerName","newName","match","text","handleOnClick","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","GameComponent","setPlayerId","setGame","gqlErr","setGqlErr","errorLogger","fetchGame","newPlayerData","addPlayerLoading","startGameLoading","placeBetLoading","addGuessLoading","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","gameUpdated","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","hasPlayerPlacedGuessInCurrentQuestionRound","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","PageNotFound","App","href","path","component","exact","Game","Boolean","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.52625534.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n          explanation\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n          explanation\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { Link } from \"react-router-dom\";\n\ninterface UploadModalProps {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets }: UploadModalProps) {\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState(0);\n  const [privateGameLink, setPrivateGameLink] = useState(\"\");\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        setPrivateGameLink(`/questions/${setName}`);\n      } else {\n        fetchSets();\n        handleClose();\n      }\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n  });\n\n  const handleOnDrop = (d: any) => {\n    setShowCSVInput(false);\n    setData(\n      d.map((row: any) => {\n        const { question, answer, hint1, hint2, explanation } = row.data;\n        return { question, answer, hints: [hint1, hint2], explanation };\n      })\n    );\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.log(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <h4>Format:</h4>\n      <table className=\"table text-dark table-responsive small\">\n        <tr>\n          <td>question</td>\n          <td>answer</td>\n          <td>hint1</td>\n          <td>hint2</td>\n          <td>explanation</td>\n        </tr>\n        <tr>\n          <td>Example Question?</td>\n          <td>274,84</td>\n          <td>Example hint 1</td>\n          <td>Example hint 2</td>\n          <td>Example explanation (optional)</td>\n        </tr>\n      </table>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-3\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required={true}\n        />\n      </div>\n      <h5>Review questions:</h5>\n      {(data || []).map((q: any) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          <p>\n            Answer: <b>{q.answer}</b>\n          </p>\n          <p>\n            Hints:{\" \"}\n            {q.hints.map((h: string) => (\n              <>\n                <br />\n                <span key={h}>\n                  <b>{h}</b>,{\" \"}\n                </span>\n              </>\n            ))}\n          </p>\n          {q.explantion && (\n            <p>\n              Explanation: <b>{q.explantion}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this question set of questions will not appear in the\n            list on the start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\">\n        <div className=\"card-body text-dark\">\n          <h3>Upload a file with custom questions</h3>\n          {privateGameLink ? (\n            <p>\n              Upload successful. To start a game with those questions you must\n              go to{\" \"}\n              <Link\n                onClick={() => {\n                  handleClose();\n                }}\n                to={privateGameLink}\n                style={{ color: \"#dfae06\" }}\n              >{`${window.location.host}${privateGameLink}`}</Link>\n              .\n              <br />\n              You can only start the game from there so make sure you save this\n              link.\n              <br />\n              The questions will be available for 90 days.\n            </p>\n          ) : (\n            content\n          )}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Game, Set } from \"../../interfaces\";\nimport { CREATE_GAME_QUERY, GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport UploadModal from \"./UploadModal\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const history = useHistory();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <>\n      {!setName && (\n        <p className=\"mt-3\">\n          Start by selecting one or more sets of trivia questions or upload your\n          own{\" \"}\n          <button\n            className=\"btn btn-link p-0\"\n            onClick={() => {\n              setIsUploadModalOpen(true);\n            }}\n          >\n            here ⤴\n          </button>\n          .\n        </p>\n      )}\n      <div className=\"set-container my-4\">\n        {sets?.sets.map((set) => (\n          <span\n            key={set.setName}\n            className={`set badge border-light ${\n              selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n            } ${setName ? \"mr-auto\" : \"\"}`}\n            style={{\n              gridColumn: `span ${Math.round(\n                Math.pow(set.setName.length, 0.35)\n              )}`,\n            }}\n            onClick={(e) => {\n              if (setName) {\n                return;\n              }\n              if (e.metaKey) {\n                if (selectedSets?.includes(set.setName)) {\n                  setSelectedSets(\n                    selectedSets.filter((setName) => set.setName !== setName)\n                  );\n                } else {\n                  setSelectedSets([set.setName, ...selectedSets]);\n                }\n              } else {\n                setSelectedSets([set.setName]);\n              }\n            }}\n          >\n            {set.setName} ({set.numberOfQuestions})\n          </span>\n        ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n      />\n    </>\n  );\n}\n\nexport default Lobby;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface PlayerTableProps {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n}: PlayerTableProps) => {\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span>{name}</span>\n      {!gameIsOver && currentBettingRound?.currentPlayer.id === id && (\n        <span className=\"turn\">{\">\"}</span>\n      )}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length === remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) =>\n  questionRound.isOver ||\n  questionRound.question.hints.length + 1 < questionRound.bettingRounds.length;\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  revealAnswers: boolean;\n  game: Game;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  revealAnswers,\n  game,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pt-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {revealAnswers ? (\n                <span role=\"img\" aria-label=\"answer\">\n                  💡 {guesses[id]}\n                </span>\n              ) : (\n                guesses && (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡{\" \"}\n                    <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                      {!guesses[id] && guesses[id] !== 0\n                        ? null\n                        : id === playerId\n                        ? guesses[id]\n                        : 432}\n                    </span>\n                  </span>\n                )\n              )}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (revealAnswers && !game.isOver ? bettingRoundSpending : 0)}\n                </span>\n                {!revealAnswers && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {revealAnswers && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.8em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.5em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"2em\",\n  },\n  title: {\n    fontSize: \"0.7em\",\n  },\n  answer: {\n    fontSize: \"2em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.bettingRounds.length <= 1 && !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.6em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {getRevealAnswer(usedQuestionRound) && (\n        <>\n          <p style={styles.answer}>\n            Answer: <b>{usedQuestionRound.question.answer}</b>\n          </p>\n          {usedQuestionRound.question.explanation && (\n            <p>{usedQuestionRound.question.explanation}</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  if (player?.isDead) {\n    return null;\n  }\n  const [guess, setGuess] = useState<number | string>(\"\");\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n\n  const handleSubmit = () => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(addGuessMutation, game, guess, playerId);\n      setGuess(\"\");\n      setShowNewQuestionRound(false);\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={guess}\n            onChange={(e) => {\n              const value = parseFloat(e.target.value);\n              if (value === 0) setGuess(0);\n              else setGuess(value || e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            disabled={!canAddGuess}\n            type=\"number\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Your answer\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={\n                !canAddGuess ||\n                typeof guess === \"string\" ||\n                (!guess && guess !== 0)\n              }\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import { Player, Game, GuessInput } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: number,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n} from \"./helpers\";\n\nimport \"./styles.scss\";\nimport errorLogger from \"../../api/errorHandler\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(true);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [\n    createPlayer,\n    { data: newPlayerData, loading: addPlayerLoading },\n  ] = useMutation<{ addPlayer: Player }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame, { loading: startGameLoading }] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet, { loading: placeBetLoading }] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess, { loading: addGuessLoading }] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      setGame(subscriptionData.data?.gameUpdated);\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const previousQuestionRound =\n    (!hasPlayerPlacedGuessInCurrentQuestionRound && !player?.isDead) ||\n    (!((currentQuestionRound?.bettingRounds[0].bets.length || 0) > 2) &&\n      player?.isDead)\n      ? getPreviousQuestionRound(game)\n      : undefined;\n\n  return (\n    <>\n      {(addPlayerLoading ||\n        startGameLoading ||\n        placeBetLoading ||\n        addGuessLoading) && <p>Loading...</p>}\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        {currentQuestionRound && playerId && (\n          <Question\n            {...{\n              game,\n              usedQuestionRound: previousQuestionRound || currentQuestionRound,\n              playerId,\n            }}\n          />\n        )}\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound: previousQuestionRound || currentQuestionRound,\n              currentBettingRound,\n              revealAnswers: game.isOver || !!previousQuestionRound,\n              game,\n            }}\n          />\n        </div>\n        {!showNewQuestionRound &&\n          !hasPlayerPlacedGuessInCurrentQuestionRound &&\n          !player?.isDead && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto mt-5\"\n              onClick={() => {\n                setShowNewQuestionRound(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}