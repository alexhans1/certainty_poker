{"version":3,"sources":["components/Lobby/index.tsx","api/queries.ts","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/helpers/queryHelpers.ts","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","Lobby","history","useHistory","useMutation","createGame","loading","data","error","console","useEffect","push","id","handleCreateGame","a","className","onClick","Size","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","setFingerprintToStorage","gameId","value","Math","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","filter","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","Object","values","getRevealAnswer","questionRound","isOver","question","hints","raise","placeBet","currentBettingRound","currentPlayer","Error","moneyOfPlayer","find","money","variables","input","min","name","isFolded","gameIsOver","size","isDealer","winningPlayerIds","usedQuestionRound","revealAnswers","sort","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","guess","winners","map","p","hasFolded","foldedPlayerIds","includes","hasPlayerFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","key","Avatar","dealerId","lg","md","role","aria-label","styles","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","style","slice","hint","answer","noHints","totalQuestions","questions","Hints","explanation","children","onClose","drawerProps","Drawer","addGuessMutation","showNewQuestionRound","setShowNewQuestionRound","useState","setGuess","canAddGuess","handleSubmit","addGuess","anchor","open","variant","onChange","e","parseFloat","target","onKeyUp","which","disabled","type","placeholder","aria-describedby","emojiRegex","createPlayer","setName","playerName","newName","match","text","handleOnClick","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","round","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","GameComponent","undefined","setPlayerId","setGame","useParams","useLazyQuery","fetchPolicy","fetchGame","fetchGameData","fetchGameError","newPlayerData","addPlayerLoading","addPlayerError","startGameLoading","startGameError","placeBetLoading","placeBetError","addGuessLoading","addGuessError","useSubscription","hash","gameData","subscriptionError","gameUpdated","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","hasPlayerPlacedGuessInCurrentQuestionRound","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","PageNotFound","App","href","path","component","exact","Game","Boolean","window","location","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0db9c4f0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { Game } from \"../../interfaces\";\n\nconst CREATE_GAME_QUERY = gql`\n  mutation createGame {\n    createGame {\n      id\n    }\n  }\n`;\n\nfunction Lobby() {\n  const history = useHistory();\n  const [createGame, { loading, data, error }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY);\n  if (error) {\n    console.error(error);\n  }\n  useEffect(() => {\n    if (data && !loading) {\n      history.push(`/${data.createGame.id}`);\n    }\n  }, [history, data, loading]);\n  const handleCreateGame = async () => {\n    createGame();\n  };\n  return (\n    <>\n      <p className=\"mt-3\">Start a new game or open a link of an existing game.</p>\n      <button className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\" onClick={handleCreateGame}>\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n    </>\n  );\n}\n\nexport default Lobby;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n          explanation\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n          explanation\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface PlayerTableProps {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n}: PlayerTableProps) => {\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span>{name}</span>\n      {!gameIsOver && currentBettingRound?.currentPlayer.id === id && (\n        <span className=\"turn\">{\">\"}</span>\n      )}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length === remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) =>\n  questionRound.isOver ||\n  questionRound.question.hints.length + 1 < questionRound.bettingRounds.length;\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  revealAnswers: boolean;\n  game: Game;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  revealAnswers,\n  game,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pt-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {revealAnswers ? (\n                <span role=\"img\" aria-label=\"answer\">\n                  💡 {guesses[id]}\n                </span>\n              ) : (\n                guesses && (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡{\" \"}\n                    <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                      {!guesses[id] && guesses[id] !== 0\n                        ? null\n                        : id === playerId\n                        ? guesses[id]\n                        : 432}\n                    </span>\n                  </span>\n                )\n              )}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (revealAnswers && !game.isOver ? bettingRoundSpending : 0)}\n                </span>\n                {!revealAnswers && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {revealAnswers && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.8em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.5em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"2em\",\n  },\n  title: {\n    fontSize: \"0.7em\",\n  },\n  answer: {\n    fontSize: \"2em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.bettingRounds.length <= 1 && !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.6em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {getRevealAnswer(usedQuestionRound) && (\n        <>\n          <p style={styles.answer}>\n            Answer: <b>{usedQuestionRound.question.answer}</b>\n          </p>\n          {usedQuestionRound.question.explanation && (\n            <p>{usedQuestionRound.question.explanation}</p>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  if (player?.isDead) {\n    return null;\n  }\n  const [guess, setGuess] = useState<number | string>(\"\");\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n\n  const handleSubmit = () => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(addGuessMutation, game, guess, playerId);\n      setGuess(\"\");\n      setShowNewQuestionRound(false);\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={guess}\n            onChange={(e) => {\n              const value = parseFloat(e.target.value);\n              if (value === 0) setGuess(0);\n              else setGuess(value || e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            disabled={!canAddGuess}\n            type=\"number\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Your answer\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={\n                !canAddGuess ||\n                typeof guess === \"string\" ||\n                (!guess && guess !== 0)\n              }\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import { Player, Game, GuessInput } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: number,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n} from \"./helpers\";\n\nimport \"./styles.scss\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(true);\n  const { gameId } = useParams<{ gameId: string }>();\n\n  const [\n    fetchGame,\n    { data: fetchGameData, error: fetchGameError },\n  ] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const [\n    createPlayer,\n    { data: newPlayerData, loading: addPlayerLoading, error: addPlayerError },\n  ] = useMutation<{ addPlayer: Player }>(CREATE_PLAYER);\n\n  const [\n    startGame,\n    { loading: startGameLoading, error: startGameError },\n  ] = useMutation<{ startGame: Game }>(START_GAME);\n\n  const [\n    placeBet,\n    { loading: placeBetLoading, error: placeBetError },\n  ] = useMutation<{ placeBet: Game }>(PLACE_BET);\n\n  const [\n    addGuess,\n    { loading: addGuessLoading, error: addGuessError },\n  ] = useMutation<{ addGuess: Game }>(ADD_GUESS);\n\n  const { data: gameData, error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n  });\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    setGame(gameData?.gameUpdated || fetchGameData?.game);\n  }, [fetchGameData, gameData, setGame]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (\n    fetchGameError ||\n    addPlayerError ||\n    startGameError ||\n    placeBetError ||\n    subscriptionError ||\n    addGuessError\n  ) {\n    console.error(\n      fetchGameError ||\n        addPlayerError ||\n        startGameError ||\n        placeBetError ||\n        subscriptionError ||\n        addGuessError\n    );\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const previousQuestionRound =\n    (!hasPlayerPlacedGuessInCurrentQuestionRound && !player?.isDead) ||\n    (!((currentQuestionRound?.bettingRounds[0].bets.length || 0) > 2) &&\n      player?.isDead)\n      ? getPreviousQuestionRound(game)\n      : undefined;\n\n  return (\n    <>\n      {(addPlayerLoading ||\n        startGameLoading ||\n        placeBetLoading ||\n        addGuessLoading) && <p>Loading...</p>}\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        {currentQuestionRound && playerId && (\n          <Question\n            {...{\n              game,\n              usedQuestionRound: previousQuestionRound || currentQuestionRound,\n              playerId,\n            }}\n          />\n        )}\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound: previousQuestionRound || currentQuestionRound,\n              currentBettingRound,\n              revealAnswers: game.isOver || !!previousQuestionRound,\n              game,\n            }}\n          />\n        </div>\n        {!showNewQuestionRound &&\n          !hasPlayerPlacedGuessInCurrentQuestionRound &&\n          !player?.isDead && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto mt-5\"\n              onClick={() => {\n                setShowNewQuestionRound(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}