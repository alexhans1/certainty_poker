{"version":3,"sources":["api/queries.ts","interfaces.ts","api/errorHandler.ts","assets/certainty_poker_bg.png","components/Lobby/PictureHalf/index.tsx","assets/countryCodes.ts","components/Game/Guess/index.tsx","components/Lobby/UploadModal/index.tsx","components/Lobby/UploadModal/processCsvData.ts","components/Lobby/ActionableHalf/index.tsx","components/Lobby/index.tsx","storage.ts","components/Game/PreGameLobby/PlayerSpot.tsx","components/shared/ConfirmDialogButton/index.tsx","components/Game/PreGameLobby/StartGameButton/index.tsx","components/Drawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/PreGameLobby/index.tsx","components/Game/PokerTable/Player/Status.tsx","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","components/Game/PokerTable/Player/index.tsx","components/Game/PokerTable/Pot/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Game/Map/index.tsx","components/Game/GuessMap/index.tsx","components/Game/MultipleChoiceOptions/index.tsx","components/Game/PokerTable/index.tsx","components/Game/PokerTable/helpers.ts","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/AnswerDrawer/DateInput/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/Footer/ActionButtons/Button/index.tsx","components/Game/Footer/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/Footer/ActionButtons/index.tsx","components/Game/Footer/index.tsx","components/Game/index.tsx","components/Game/LeaveGameButton/index.tsx","assets/turn-notification.mp3","assets/turn-alert.wav","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["QuestionTypes","BettingStates","CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","className","src","Image","alt","countryListAlpha2","GB","FR","ES","CN","DE","ZA","AL","DZ","SA","AM","BD","BG","KH","HR","CZ","DK","NL","EE","FI","GR","IL","HU","IN","IT","JP","KR","LV","LT","MY","MN","NO","PL","BR","RO","RU","RS","SK","SI","SE","TH","TR","VN","Guess","guess","questionType","alternatives","NUMERICAL","number","numerical","parseFloat","isNaN","Intl","NumberFormat","format","DATE","moment","toString","GEO","geo","latitude","longitude","MULTIPLE_CHOICE","length","Error","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","language","setLanguage","useMutation","variables","questions","onCompleted","push","undefined","onError","errorLogger","uploadQuestions","content","target","rel","href","onDrop","rows","map","row","question","type","csvAnswer","answer","toleranceRadius","hint1","hint2","explanation","multiple_choice_alternative1","multiple_choice_alternative2","multiple_choice_alternative3","hints","filter","Boolean","processCsvData","file","inputElem","reason","config","header","addRemoveButton","removeButtonColor","value","onChange","e","placeholder","aria-label","required","autoFocus","selected","Object","keys","countryCodes","code","key","countryCodeToFlagEmoji","q","h","i","id","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","ActionableHalf","sets","languages","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","shownLanguage","setShownLanguage","setNames","createGame","errorHandler","loading","handleCreateGame","a","to","pathname","style","color","window","host","cursor","s","set","includes","gridColumn","Math","round","pow","metaKey","numberOfQuestions","Lobby","useParams","useLazyQuery","fetchPolicy","useEffect","reduce","uniqueLanguages","sort","b","parseInt","PictureHalf","PLAYER_ID_KEY","FINGERPRINT_KEY","setFingerprintToStorage","gameId","localStorage","clear","random","substring","setItem","getFingerprintFromStorage","getItem","PlayerSpot","playerName","buttonLabel","dialogTitle","confirmLabel","onConfirm","isDisabled","btnClassName","React","setOpen","Dialog","DialogTitle","DialogActions","startGame","DrawerComp","children","drawerProps","Drawer","NameInputDrawer","createPlayer","playerId","name","handleSubmit","input","title","anchor","variant","onKeyUp","which","aria-describedby","PreGameLobby","players","gameLink","navigator","clipboard","writeText","player","StartGameButton","StatusWithTooltip","tooltipTitle","Tooltip","actionIcons","RAISED","CALLED","CHECKED","Status","isWinningPlayer","isQuestionRoundOver","changeInMoney","isDead","hasFolded","allPlayersPlacedTheirGuess","playerHasPlacedTheirGuess","isTurnPlayer","playerIsAllIn","playerAction","bettingState","calculateBettingRoundSpendingForPlayer","bettingRound","bets","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","remainingPlayers","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","max","values","hasPlayerFolded","foldedPlayerIds","getRevealAnswer","questionRound","isOver","raise","placeBet","currentBettingRound","currentPlayer","moneyOfPlayer","find","money","min","addGuess","addGuessMutation","playerSeatingOrder","PlayerComp","index","numberOfPlayers","isAppPlayer","isShowdown","isSpectator","isGameOver","isTurnPlayerClass","isAppPlayerClass","isDeadClass","bettingRoundSpending","revealGuess","positionIndex","playerMoney","Pot","usedQuestionRound","isGameFull","totalPot","br","forEach","positioning","styles","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","Hints","numberOfHints","slice","hint","Question","noHints","totalQuestions","getNumberOfDecimals","val","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","MarkerContainer","markers","useMap","bounds","latLngBounds","extend","isValid","flyToBounds","padding","maxZoom","FeatureGroup","memo","handleOnClick","answerMarker","m","isAnswer","distanceLines","distanceToAnswer","line","LatLng","label","toFixed","MapContainer","center","zoom","maxBounds","maxBoundsViscosity","scrollWheelZoom","TileLayer","attribution","url","Polyline","positions","weight","direction","permanent","radiusInKilometres","Circle","radius","offset","prevProps","nextProps","equals","GuessMap","playerGuess","g","mapMarkers","difference","pId","p","Map","MultipleChoiceOptions","handleClick","active","hiddenAlternatives","revealAnswer","optionClassName","PokerTable","isGeoQuestion","isMultipleChoiceQuestion","winningPlayerIds","winners","getWinningPlayerArray","results","Player","NumberInput","setGuess","submit","stringValue","replaceAll","MultipleChoiceInput","AnswerDrawer","showAnswerDrawer","setShowAnswerDrawer","hasPlayerPlacedGuessInCurrentQuestionRound","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","DateInput","MapInput","getInput","ActionButton","text","RaiseInputDrawer","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","ActionButtons","isAppPlayerTurn","call","fold","soundInterval","Footer","appPlayerAnswer","appPlayerMoney","gameHasStarted","setPlayerId","removeItem","deletePlayerIdFromStorage","removePlayer","ConfirmDialogButton","vibrate","t","GameComponent","setGame","showNewQuestionRoundForSpectator","setShowNewQuestionRoundForSpectator","gqlErr","setGqlErr","Audio","notificationSound","playNotification","alertSound","playAlert","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","clearInterval","gameUpdated","cqr","cbr","allPlayersPlacedTheirBet","play","setInterval","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","previousQuestionRound","getPreviousQuestionRound","LeaveGameButton","PageNotFound","App","path","component","exact","Game","hostname","match","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fe9867bc.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n    $language: String!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n      language: $language\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n      language\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n              toleranceRadius\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n        bettingState\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n              toleranceRadius\n            }\n          }\n          alternatives\n          hiddenAlternatives\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n          difference\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n        bettingState\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport enum BettingStates {\n  CHECKED = \"CHECKED\",\n  CALLED = \"CALLED\",\n  RAISED = \"RAISED\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n  toleranceRadius?: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n  bettingState?: BettingStates;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  alternatives?: [string, string, string, string];\n  hiddenAlternatives?: string[];\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n  difference?: number;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n  language: string;\n}\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","export default __webpack_public_path__ + \"static/media/certainty_poker_bg.24a8fc3a.png\";","import React from \"react\";\n\nimport Image from \"../../../assets/certainty_poker_bg.png\";\n\nexport default () => {\n  return (\n    <div className=\"image-container\">\n      <img src={Image} alt=\"background\" />\n    </div>\n  );\n};\n","const countryListAlpha2 = {\n  GB: \"English\",\n  FR: \"French\",\n  ES: \"Spainish\",\n  CN: \"Chinese\",\n  DE: \"German\",\n  ZA: \"Africaans\",\n  AL: \"Albanian\",\n  DZ: \"Algerian\",\n  SA: \"Arab\",\n  AM: \"Armenian\",\n  BD: \"Bangladeshi\",\n  BG: \"Bulgarian\",\n  KH: \"Cambodian\",\n  HR: \"Croatian\",\n  CZ: \"Czech\",\n  DK: \"Danish\",\n  NL: \"Dutch\",\n  EE: \"Estonian\",\n  FI: \"Finnish\",\n  GR: \"Greek\",\n  IL: \"Hebrew\",\n  HU: \"Hungarian\",\n  IN: \"Indian\",\n  IT: \"Italian\",\n  JP: \"Japanese\",\n  KR: \"Korean\",\n  LV: \"Latvian\",\n  LT: \"Lithuanian\",\n  MY: \"Malaysian\",\n  MN: \"Mongolian\",\n  NO: \"Norwegian\",\n  PL: \"Polish\",\n  BR: \"Portuguese\",\n  RO: \"Romanian\",\n  RU: \"Russian\",\n  RS: \"Serbian\",\n  SK: \"Slovakian\",\n  SI: \"Slovenian\",\n  SE: \"Swedish\",\n  TH: \"Thai\",\n  TR: \"Turkish\",\n  VN: \"Vietnamese\",\n};\n\nexport default countryListAlpha2;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\n\ninterface Props {\n  guess: Answer;\n  questionType: QuestionTypes;\n  alternatives?: Question[\"alternatives\"];\n}\n\nexport default function Guess({ guess, questionType, alternatives }: Props) {\n  if (!guess) return null;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      const number =\n        typeof guess.numerical === \"number\"\n          ? guess.numerical\n          : parseFloat(guess.numerical || \"\");\n      if (isNaN(number)) {\n        return null;\n      }\n      return <span>{new Intl.NumberFormat().format(number)}</span>;\n    case QuestionTypes.DATE:\n      if (!guess.numerical) {\n        return null;\n      }\n      return (\n        <span>\n          {moment(guess.numerical.toString(), \"YYYYMMDD\").format(\n            \"MMM DD, YYYY\"\n          )}\n        </span>\n      );\n    case QuestionTypes.GEO:\n      return <span>{`[${guess.geo?.latitude}, ${guess.geo?.longitude}]`}</span>;\n    case QuestionTypes.MULTIPLE_CHOICE:\n      if (alternatives?.length !== 4) {\n        throw new Error(\"missing alternatives for multiple choice question\");\n      }\n      return <span>{alternatives[guess.numerical ?? -1]}</span>;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n}\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Question, QuestionTypes } from \"../../../interfaces\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport countryCodes from \"../../../assets/countryCodes\";\nimport processCsvData from \"./processCsvData\";\nimport Guess from \"../../Game/Guess\";\n\nexport interface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number | string;\n  latitude?: number;\n  longitude?: number;\n  toleranceRadius?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n  multiple_choice_alternative1?: string;\n  multiple_choice_alternative2?: string;\n  multiple_choice_alternative3?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets, setSelectedSets }: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n  const [language, setLanguage] = useState<string>();\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n      language,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: errorLogger,\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(processCsvData(rows));\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p className=\"mb-3\">\n        An example of the file format can be found{\" \"}\n        <a\n          className=\"text-blue-700 hover:text-blue-900\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"flex\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"rounded-md bg-white border border-gray-400 px-4 py-2 mr-4\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n        <select\n          className=\"rounded-md bg-white border border-gray-400 px-4 py-2\"\n          required\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          <option selected>Language...</option>\n          {Object.keys(countryCodes).map((code) => (\n            <option key={code} value={code}>\n              {countryCodeToFlagEmoji(code)}{\" \"}\n              {countryCodes[code as keyof typeof countryCodes]}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h3 className=\"text-2xl mb-3 mt-5\">Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p className=\"my-3\">\n            Question: <b>{q.question}</b>\n          </p>\n\n          {q.type !== QuestionTypes.MULTIPLE_CHOICE && (\n            <>\n              <p className=\"my-3\">\n                Answer:{\" \"}\n                <b>\n                  <Guess\n                    guess={q.answer}\n                    questionType={q.type}\n                    alternatives={q.alternatives}\n                  />\n                </b>\n              </p>\n              {q.answer.geo?.toleranceRadius && (\n                <p className=\"my-3\">\n                  Tolerance radius in km: <b>{q.answer.geo.toleranceRadius}</b>\n                </p>\n              )}\n            </>\n          )}\n          {!!q.hints?.length && (\n            <p className=\"my-3\">\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {!!q.alternatives?.length && (\n            <p className=\"my-3\">\n              Alternatives:{\" \"}\n              {q.alternatives.map((alt, i) => (\n                <>\n                  <br />\n                  <span key={alt}>\n                    <b className={i === 0 ? \"text-green-500\" : \"\"}>{alt}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p className=\"my-3\">\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr className=\"my-3\" />\n        </div>\n      ))}\n      <div className=\"flex\">\n        <input\n          type=\"checkbox\"\n          className=\"mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"ml-2\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <div className=\"flex mt-3\">\n        <button\n          className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n          disabled={!setName || !language}\n          onClick={() => {\n            uploadQuestions();\n          }}\n        >\n          Upload\n        </button>\n        <button\n          className=\"border-2 boder-gray-800 rounded-lg font-bold hover:text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-gray-800 ml-3\"\n          onClick={() => {\n            setShowCSVInput(true);\n          }}\n        >\n          Upload new file\n        </button>\n      </div>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"flex justify-center items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"flex py-6 px-6 md:px-8 my-2 md:my-6 mx-2 md:mx-6 lg:mx-10 max-h-full bg-white rounded-md focus:outline-none\">\n        <div className=\"overflow-y-auto flex-shrink-0 max-w-full flex flex-col\">\n          <h3 className=\"text-2xl mb-2\">\n            Upload a CSV file with custom questions\n          </h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport { CSVDataRow } from \".\";\n\nexport default function processCsvData(\n  rows: { data: CSVDataRow }[]\n): Omit<Question, \"id\">[] {\n  return rows.map((row) => {\n    const {\n      question,\n      type,\n      answer: csvAnswer,\n      latitude,\n      longitude,\n      toleranceRadius,\n      hint1,\n      hint2,\n      explanation,\n      multiple_choice_alternative1,\n      multiple_choice_alternative2,\n      multiple_choice_alternative3,\n    } = row.data;\n    const hints = [hint1, hint2].filter(Boolean) as string[];\n    const answer: Answer = {};\n    let alternatives: Question[\"alternatives\"];\n    switch (type) {\n      case QuestionTypes.NUMERICAL:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.DATE:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.GEO:\n        answer.geo = {\n          latitude: latitude as number,\n          longitude: longitude as number,\n          toleranceRadius: toleranceRadius,\n        };\n        break;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        answer.numerical = 0;\n        alternatives = [\n          csvAnswer as string,\n          multiple_choice_alternative1 as string,\n          multiple_choice_alternative2 as string,\n          multiple_choice_alternative3 as string,\n        ];\n        break;\n      default:\n        throw new Error(\"invalid question type\");\n    }\n    return {\n      question,\n      type,\n      answer,\n      hints,\n      explanation,\n      alternatives,\n    };\n  });\n}\n","import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { QueryLazyOptions, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { Game, Set } from \"../../../interfaces\";\nimport { CREATE_GAME_QUERY } from \"../../../api/queries\";\nimport errorHandler from \"../../../api/errorHandler\";\nimport UploadModal from \"../UploadModal\";\n\nimport \"./styles.css\";\n\ninterface Props {\n  sets?: Set[];\n  setName?: string;\n  languages: string[];\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nexport default function ActionableHalf({\n  sets = [],\n  setName,\n  languages,\n  fetchSets,\n}: Props) {\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <div className=\"actionable-container px-4 py-2\">\n      <a href=\"/\" className=\"mr-auto text-3xl font-bold\">\n        Certainty Poker\n      </a>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <>\n          <h1 className=\"py-5\">\n            You think you know things?\n            <br />\n            Let's make it interesting then!\n          </h1>\n          <p>\n            Certainty Poker is a social (distance) trivia game that doesn't just\n            test if you know things but also how certain you are about what you\n            think you know.\n          </p>\n          <p>\n            Start by selecting a set of trivia questions, create the game and\n            share the link to join with your friends!\n            <br />\n            You don't like our questions? Upload your own{\" \"}\n            <button\n              className=\"text-blue-700 hover:text-blue-900 p-0\"\n              onClick={() => {\n                setIsUploadModalOpen(true);\n              }}\n            >\n              here ⤴\n            </button>\n            .\n          </p>\n        </>\n      )}\n      <div className=\"flex my-3\">\n        {languages.map((language) => (\n          <span\n            key={language}\n            className={`text-4xl mx-1 ${\n              language === shownLanguage ? \"\" : \"text-black-50\"\n            }`}\n            onClick={() => {\n              setShownLanguage(language);\n            }}\n            style={{\n              cursor: language === shownLanguage ? \"default\" : \"pointer\",\n            }}\n          >\n            {countryCodeToFlagEmoji(language)}\n          </span>\n        ))}\n      </div>\n      <div className=\"set-container my-4\">\n        {sets\n          .filter((s) => s.language === shownLanguage)\n          .map((set) => (\n            <span\n              key={set.setName}\n              className={`flex justify-center items-center rounded-md text-center px-4 py-3 border border-gray-800 hover:bg-gray-800 hover:text-white cursor-pointer ${\n                selectedSets?.includes(set.setName)\n                  ? \"bg-gray-800 text-white\"\n                  : \"\"\n              } ${setName ? \"mr-auto\" : \"\"}`}\n              style={{\n                gridColumn: `span ${Math.round(\n                  Math.pow(set.setName.length, 0.35)\n                )}`,\n              }}\n              onClick={(e) => {\n                if (setName) {\n                  return;\n                }\n                if (e.metaKey) {\n                  if (selectedSets?.includes(set.setName)) {\n                    setSelectedSets(\n                      selectedSets.filter((setName) => set.setName !== setName)\n                    );\n                  } else {\n                    setSelectedSets([set.setName, ...selectedSets]);\n                  }\n                } else {\n                  setSelectedSets([set.setName]);\n                }\n              }}\n            >\n              {set.setName} ({set.numberOfQuestions})\n            </span>\n          ))}\n      </div>\n      <button\n        className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600 mx-auto\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n      <p className=\"mt-4\">\n        Don't know the rules? Find them{\" \"}\n        <a\n          className=\"text-blue-700 hover:text-blue-900 p-0\"\n          href=\"https://docs.google.com/document/d/13pwz8yzrPdY1DcQqXvhejJAxXdWdPrvxR6GUxg5PJPs/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <p className=\"text-smaller\">\n        TL;DR:\n        <br />\n        Answer trivia different types of questions. Then bet some poker chips on\n        how sure you are your answer is right. If you are unsure, you'd better\n        fold or put on your best poker face. You're a 100%? Then risk it and go\n        All In. If you are closest to the correct answer, you win whatever is in\n        the pot. Unless you've folded, of course.\n      </p>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { Set } from \"../../interfaces\";\nimport { GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport PictureHalf from \"./PictureHalf\";\nimport ActionableHalf from \"./ActionableHalf\";\n\nimport \"./styles.css\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const languages =\n    sets?.sets\n      .reduce<string[]>((uniqueLanguages, s) => {\n        if (!uniqueLanguages.includes(s.language)) {\n          uniqueLanguages.push(s.language);\n        }\n        return uniqueLanguages;\n      }, [])\n      .sort((a, b) => {\n        if (a === \"GB\") {\n          return -1;\n        }\n        return parseInt(a) - parseInt(b);\n      }) || [];\n\n  return (\n    <div className=\"grid-container\">\n      <ActionableHalf\n        {...{ sets: sets?.sets, languages, setName, fetchSets }}\n      />\n      <PictureHalf />\n    </div>\n  );\n}\n\nexport default Lobby;\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  // clear stoage when joining a new game\n  localStorage.clear();\n\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import React from \"react\";\n\ninterface Props {\n  playerName?: string;\n}\n\nfunction PlayerSpot({ playerName }: Props) {\n  return (\n    <div className=\"rounded-xl border-2 px-3 h-16 w-36 flex items-center justify-center shadow\">\n      <span className=\"overflow-hidden text-overflow-ellipsis\">\n        {playerName}\n      </span>\n    </div>\n  );\n}\n\nexport default PlayerSpot;\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface Props {\n  buttonLabel: string | React.ReactNode;\n  dialogTitle: string | React.ReactNode;\n  confirmLabel: string;\n  onConfirm: () => void;\n  isDisabled?: boolean;\n  btnClassName?: string;\n}\n\nexport default ({\n  buttonLabel,\n  dialogTitle,\n  confirmLabel,\n  onConfirm,\n  isDisabled,\n  btnClassName,\n}: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        className={\n          btnClassName ||\n          \"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        }\n        onClick={handleClickOpen}\n        disabled={isDisabled}\n      >\n        {buttonLabel}\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>{dialogTitle}</DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button\n              className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n              onClick={handleConfirm}\n            >\n              {confirmLabel}\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Game } from \"../../../../interfaces\";\nimport ConformDialogButton from \"../../../shared/ConfirmDialogButton\";\n\nexport type StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface Props {\n  gameId: Game[\"id\"];\n  startGame: StartGame;\n  isDisabled: boolean;\n}\n\nexport default ({ startGame, gameId, isDisabled }: Props) => {\n  const onConfirm = () => {\n    startGame({ variables: { gameId } });\n  };\n  return (\n    <ConformDialogButton\n      onConfirm={onConfirm}\n      dialogTitle=\"Are you sure you want to start the game? Once it's started no more players can join.\"\n      confirmLabel=\"Start Game\"\n      buttonLabel=\"Start Game\"\n      isDisabled={isDisabled}\n    />\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.css\";\n\ninterface Props extends DrawerProps {\n  children: ReactNode;\n  onClose?: () => void;\n}\n\nexport default function DrawerComp({\n  children,\n  onClose,\n  ...drawerProps\n}: Props) {\n  return (\n    <Drawer\n      {...{\n        ...drawerProps,\n      }}\n    >\n      <div className=\"flex items-center flex-col bg-gray-200 py-4 min-h-52\">\n        {onClose && (\n          <span\n            id=\"drawer-close\"\n            className=\"ml-auto mr-3 -mb-4 -mt-2\"\n            onClick={onClose}\n          >\n            ╳\n          </span>\n        )}\n\n        <div className=\"container px-5 pb-5 flex flex-col md:max-w-screen-md\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n}\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nexport type CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default function NameInputDrawer({\n  createPlayer,\n  gameId,\n  playerId,\n}: Props) {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!playerId) {\n      createPlayer({ variables: { input: { gameId, playerName: name } } });\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"Your name\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"temporary\"\n    >\n      <>\n        <p className=\"font-bold\">Enter your name</p>\n        <p className=\"mt-4 text-sm\">Username</p>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"bg-white border border-gray-400 px-4\"\n            placeholder=\"Your name\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <button\n            type=\"submit\"\n            disabled={!name.length}\n            className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </div>\n      </>\n    </Drawer>\n  );\n}\n","import React from \"react\";\nimport { FiCopy } from \"react-icons/fi\";\nimport PlayerSpot from \"./PlayerSpot\";\nimport { Game, Player } from \"../../../interfaces\";\nimport StartGameButton, { StartGame } from \"./StartGameButton\";\nimport NameInputDrawer, { CreatePlayer } from \"../NameInputDrawer\";\n\ninterface Props {\n  players: Player[];\n  gameLink: string;\n  startGame: StartGame;\n  gameId: Game[\"id\"];\n  createPlayer: CreatePlayer;\n  playerId?: Player[\"id\"];\n}\n\nexport const maxNumberOfPlayers = 12;\n\nfunction PreGameLobby({\n  players,\n  gameLink,\n  startGame,\n  gameId,\n  createPlayer,\n  playerId,\n}: Props) {\n  return (\n    <>\n      <div className=\"flex flex-col items-center font-semibold mt-4 px-5 mx-auto md:max-w-screen-md\">\n        <h5>Share this link with friends who want to join the game</h5>\n        <div className=\"flex items-center justify-between w-full break-all px-4 md:px-10 py-4 mt-4 bg-gray-200 rounded-md\">\n          <span className=\"w-3/4\">{gameLink}</span>\n          <button\n            className=\"text-blue-500 hover:text-blue-600 p-2 ripple focus:outline-none text-2xl\"\n            onClick={async () => {\n              await navigator.clipboard.writeText(window.location.href);\n            }}\n          >\n            <FiCopy />\n          </button>\n        </div>\n        <p className=\"mt-20 self-start\">Players</p>\n        <p className=\"text-xs font-normal self-start w-full pb-2 border-b-2 border-grey-200\">\n          {maxNumberOfPlayers - players.length} Open spot\n          {maxNumberOfPlayers - players.length === 1 ? \"\" : \"s\"}\n        </p>\n        <hr />\n        <div className=\"mt-8 grid gap-8 w-full sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\">\n          {players.map((player) => (\n            <PlayerSpot key={player.id} playerName={player?.name} />\n          ))}\n        </div>\n        {playerId && (\n          <div className=\"mt-16 self-start\">\n            <StartGameButton\n              startGame={startGame}\n              gameId={gameId}\n              isDisabled={players.length <= 1}\n            />\n          </div>\n        )}\n      </div>\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n    </>\n  );\n}\n\nexport default PreGameLobby;\n","import React from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { AiOutlineQuestion } from \"react-icons/ai\";\nimport { GiLaurelsTrophy, GiPartyPopper } from \"react-icons/gi\";\nimport {\n  FaBell,\n  FaRegLightbulb,\n  FaSadCry,\n  FaSkullCrossbones,\n} from \"react-icons/fa\";\nimport { FiArrowUp, FiMinus } from \"react-icons/fi\";\nimport { CgMore } from \"react-icons/cg\";\nimport { GrClose, GrMoney } from \"react-icons/gr\";\nimport { BettingStates, Player } from \"../../../../interfaces\";\n\nconst StatusWithTooltip = ({\n  tooltipTitle,\n  children,\n}: {\n  tooltipTitle: string;\n  children: React.ReactNode;\n}) => (\n  <Tooltip title={tooltipTitle}>\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst actionIcons = {\n  [BettingStates.RAISED]: (\n    <StatusWithTooltip tooltipTitle=\"Raised\">\n      <FiArrowUp />\n    </StatusWithTooltip>\n  ),\n  [BettingStates.CALLED]: (\n    <StatusWithTooltip tooltipTitle=\"Called\">\n      <FiMinus />\n    </StatusWithTooltip>\n  ),\n  [BettingStates.CHECKED]: (\n    <StatusWithTooltip tooltipTitle=\"Checked\">\n      <FiMinus />\n    </StatusWithTooltip>\n  ),\n};\n\ninterface Props {\n  player: Player;\n  isQuestionRoundOver: boolean;\n  isWinningPlayer?: boolean;\n  changeInMoney?: number;\n  hasFolded: boolean;\n  isDead?: boolean;\n  isTurnPlayer: boolean;\n  playerHasPlacedTheirGuess?: boolean;\n  allPlayersPlacedTheirGuess?: boolean;\n  playerIsAllIn?: boolean;\n}\n\nfunction Status({\n  player,\n  isWinningPlayer,\n  isQuestionRoundOver,\n  changeInMoney,\n  isDead,\n  hasFolded,\n  allPlayersPlacedTheirGuess,\n  playerHasPlacedTheirGuess,\n  isTurnPlayer,\n  playerIsAllIn,\n}: Props) {\n  if (isDead) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Out\">\n        <FaSkullCrossbones />\n      </StatusWithTooltip>\n    );\n  }\n  if (hasFolded) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Folded\">\n        <GrClose />\n      </StatusWithTooltip>\n    );\n  }\n  if (playerIsAllIn) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"All in\">\n        <GrMoney />\n      </StatusWithTooltip>\n    );\n  }\n  if (isWinningPlayer && isQuestionRoundOver) {\n    return <GiLaurelsTrophy />;\n  }\n  if (isQuestionRoundOver && changeInMoney && changeInMoney > 0) {\n    return <GiPartyPopper />;\n  }\n  if (isQuestionRoundOver && changeInMoney && changeInMoney < 0) {\n    return <FaSadCry />;\n  }\n  if (!allPlayersPlacedTheirGuess) {\n    if (playerHasPlacedTheirGuess) {\n      return (\n        <StatusWithTooltip tooltipTitle=\"Already submitted guess\">\n          <FaRegLightbulb />\n        </StatusWithTooltip>\n      );\n    } else {\n      return (\n        <StatusWithTooltip tooltipTitle=\"Not yet submitted guess\">\n          <AiOutlineQuestion />\n        </StatusWithTooltip>\n      );\n    }\n  }\n  if (isTurnPlayer) {\n    return (\n      <StatusWithTooltip tooltipTitle=\"Player's turn\">\n        <FaBell className=\"text-red-600\" />\n      </StatusWithTooltip>\n    );\n  }\n  const playerAction = player.bettingState;\n  if (playerAction && actionIcons[playerAction]) {\n    return actionIcons[playerAction];\n  }\n  return (\n    <StatusWithTooltip tooltipTitle=\"Waiting for turn\">\n      <CgMore />\n    </StatusWithTooltip>\n  );\n}\n\nexport default Status;\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) => {\n  if (questionRound.isOver) {\n    return true;\n  }\n  if (questionRound.question.type === QuestionTypes.MULTIPLE_CHOICE) {\n    return questionRound.bettingRounds.length >= 4;\n  }\n  return (\n    questionRound.question.hints.length + 1 < questionRound.bettingRounds.length\n  );\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport { FaRegLightbulb } from \"react-icons/fa\";\nimport { GrMoney } from \"react-icons/gr\";\nimport Status from \"./Status\";\nimport {\n  BettingRound,\n  Guess,\n  Player,\n  Question,\n  QuestionTypes,\n} from \"../../../../interfaces\";\nimport { calculateBettingRoundSpendingForPlayer } from \"../../helpers\";\nimport FormattedGuess from \"../../Guess\";\n\nimport \"./styles.css\";\n\nconst playerSeatingOrder = [1, 9, 5, 2, 11, 4, 8, 10, 6, 3, 12, 7];\n\ninterface Props {\n  player: Player;\n  numberOfPlayers: number;\n  currentBettingRound?: BettingRound;\n  changeInMoney?: number;\n  index: number;\n  isTurnPlayer: boolean;\n  isGameOver: boolean;\n  isAppPlayer: boolean;\n  isWinningPlayer?: boolean;\n  isQuestionRoundOver: boolean;\n  isShowdown: boolean;\n  hasFolded: boolean;\n  isSpectator: boolean;\n  allPlayersPlacedTheirGuess?: boolean;\n  guess?: Guess;\n  question?: Question;\n}\n\nconst PlayerComp = ({\n  player,\n  index,\n  numberOfPlayers,\n  isTurnPlayer,\n  isAppPlayer,\n  isWinningPlayer,\n  isQuestionRoundOver,\n  isShowdown,\n  currentBettingRound,\n  changeInMoney,\n  hasFolded,\n  isSpectator,\n  allPlayersPlacedTheirGuess,\n  guess,\n  question,\n  isGameOver,\n}: Props) => {\n  const isTurnPlayerClass =\n    isTurnPlayer && !isQuestionRoundOver ? \"isTurnPlayer\" : \"\";\n  const isAppPlayerClass = isAppPlayer ? \"bg-blue-200\" : \"bg-gray-200\";\n  const isDeadClass = player.isDead ? \"is-dead\" : \"\";\n\n  const bettingRoundSpending = currentBettingRound\n    ? calculateBettingRoundSpendingForPlayer(currentBettingRound, player.id)\n    : 0;\n  const revealGuess =\n    question?.type !== QuestionTypes.GEO &&\n    (isSpectator || (!!isQuestionRoundOver && isShowdown && !hasFolded));\n\n  const positionIndex = playerSeatingOrder.filter((i) => i <= numberOfPlayers)[\n    index\n  ];\n\n  let playerMoney = player.money;\n  if (isQuestionRoundOver && !isGameOver) {\n    playerMoney += bettingRoundSpending;\n  }\n\n  return (\n    <div\n      className={`player player-${positionIndex} shadow-md ${isTurnPlayerClass} ${isAppPlayerClass} ${isDeadClass} md:absolute`}\n    >\n      <span\n        className={`status text-gray-900 shadow-lg ${\n          isQuestionRoundOver && changeInMoney && changeInMoney > 0\n            ? \"bg-green-500\"\n            : \"bg-gray-400\"\n        }`}\n      >\n        <Status\n          {...{\n            player,\n            isWinningPlayer,\n            isTurnPlayer,\n            changeInMoney,\n            isQuestionRoundOver,\n            isDead: player.isDead,\n            hasFolded,\n            allPlayersPlacedTheirGuess,\n            playerHasPlacedTheirGuess: !!guess,\n            playerIsAllIn: !player.isDead && player.money === 0,\n          }}\n        />\n      </span>\n      <div className=\"info\">\n        <span className=\"name\">{player.name}</span>\n        <div className=\"flex items-center\">\n          <GrMoney className=\"mr-1\" />\n          <span>{playerMoney}</span>\n          {isQuestionRoundOver && changeInMoney && (\n            <span\n              className={`ml-1 ${\n                changeInMoney > 0 ? \"text-green-500\" : \"text-red-500\"\n              }`}\n            >\n              ({changeInMoney > 0 ? \"+\" : \"\"}\n              {changeInMoney})\n            </span>\n          )}\n        </div>\n        <div className=\"inner-info grid absolute text-sm left-48 md:left-auto sm:-right-3 md:right-0 md:text-lg md:grid-flow-auto text-gray-800 md:w-full\">\n          {!isQuestionRoundOver && !!bettingRoundSpending && (\n            <div className=\"flex items-center\">\n              <span className=\"mx-1\">\n                <GrMoney />\n              </span>\n              <span>{bettingRoundSpending}</span>\n            </div>\n          )}\n          {revealGuess && question?.type && guess?.guess && (\n            <div className=\"flex items-center\">\n              <span className=\"mx-1\">\n                <FaRegLightbulb />\n              </span>\n              <FormattedGuess\n                {...{\n                  guess: guess?.guess,\n                  questionType: question.type,\n                  alternatives: question.alternatives,\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerComp;\n","import React from \"react\";\nimport { GrMoney } from \"react-icons/gr\";\nimport { QuestionRound } from \"../../../../interfaces\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  isGameFull: boolean;\n}\n\nexport default function Pot({ usedQuestionRound, isGameFull }: Props) {\n  const totalPot = usedQuestionRound?.bettingRounds.reduce((sum, br) => {\n    br.bets.forEach((bet) => {\n      sum += bet.amount;\n    });\n    return sum;\n  }, 0);\n\n  const positioning = isGameFull\n    ? \"md:-right-5 md:-top-10\"\n    : \"md:left-24 md:bottom-20\";\n\n  return (\n    <div\n      className={`text-2xl md:text-3xl self-start z-1003 md:absolute ${positioning}`}\n    >\n      <div className=\"flex -mb-3\">\n        <span className=\"mx-1\">\n          <GrMoney />\n        </span>\n        <span>{totalPot}</span>\n      </div>\n      <span className=\"text-xs md:text-sm\">In Pot</span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default function Hints({ usedQuestionRound }: Props) {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"flex flex-col\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport Guess from \"../Guess\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default function Question({ game, usedQuestionRound }: QuestionProps) {\n  const noHints =\n    usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE &&\n    usedQuestionRound.bettingRounds.length <= 1 &&\n    !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {[QuestionTypes.NUMERICAL, QuestionTypes.DATE].includes(\n        usedQuestionRound.question.type\n      ) &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                <Guess\n                  guess={usedQuestionRound.question.answer}\n                  questionType={usedQuestionRound.question.type}\n                />\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n}\n","import React, { ReactNode, useState } from \"react\";\nimport { LatLng, latLngBounds } from \"leaflet\";\nimport {\n  FeatureGroup,\n  MapContainer,\n  Marker,\n  Polyline,\n  TileLayer,\n  Circle,\n  Tooltip,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport { equals } from \"ramda\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.css\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface MarkerType {\n  label?: JSX.Element | string;\n  position: GeoCoordinate;\n  isAnswer?: boolean;\n  distanceToAnswer?: number;\n  radiusInKilometres?: number;\n}\n\ninterface Props {\n  markers?: MarkerType[];\n  handleOnClick?: HandleOnClick;\n  className?: string;\n}\n\nconst getNumberOfDecimals = (val: number = 0) => {\n  if (val > 1000) {\n    return 0;\n  }\n  if (val > 100) {\n    return 1;\n  }\n  if (val > 1) {\n    return 2;\n  }\n  return 4;\n};\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position && <Marker position={position} />;\n}\n\nfunction MarkerContainer({\n  children,\n  markers,\n}: {\n  children: ReactNode;\n  markers: MarkerType[];\n}) {\n  const map = useMap();\n  const bounds = latLngBounds([]);\n  markers?.forEach((data) => {\n    bounds.extend([data.position.latitude, data.position.longitude]);\n  });\n  bounds.isValid() &&\n    map.flyToBounds(bounds, {\n      // todo: make padding dependend on zoom level\n      padding: [10, 10],\n      maxZoom: markers.length > 1 ? 15 : 5,\n    });\n\n  return <FeatureGroup>{children}</FeatureGroup>;\n}\n\nexport default React.memo(\n  ({ markers = [], handleOnClick, className }: Props) => {\n    const answerMarker = markers.find((m) => m.isAnswer);\n    const distanceLines =\n      !!answerMarker &&\n      markers\n        .filter((m) => !m.isAnswer && m.distanceToAnswer)\n        .map((m) => ({\n          line: [\n            new LatLng(m.position.latitude, m.position.longitude),\n            new LatLng(\n              answerMarker.position.latitude,\n              answerMarker.position.longitude\n            ),\n          ],\n          label: m.distanceToAnswer?.toFixed(\n            getNumberOfDecimals(m.distanceToAnswer)\n          ),\n        }));\n\n    return (\n      <MapContainer\n        center={[0, 0]}\n        zoom={1}\n        maxBounds={[\n          [-90, -180],\n          [90, 180],\n        ]}\n        maxBoundsViscosity={1}\n        scrollWheelZoom={true}\n        className={className}\n      >\n        <TileLayer\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n        />\n        {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n        {distanceLines &&\n          distanceLines.map(({ line, label }) => (\n            <Polyline\n              key={line.toString()}\n              positions={line}\n              color=\"#393d4e\"\n              weight={2}\n            >\n              {label && (\n                <Tooltip\n                  className=\"distance-label\"\n                  direction=\"center\"\n                  permanent\n                >\n                  {label} km\n                </Tooltip>\n              )}\n            </Polyline>\n          ))}\n        {markers.length && (\n          <MarkerContainer markers={markers}>\n            {markers.map(({ position, label, radiusInKilometres }) => {\n              if (radiusInKilometres) {\n                return (\n                  <Circle\n                    center={[position.latitude, position.longitude]}\n                    radius={radiusInKilometres * 1000}\n                    key={position.latitude}\n                  >\n                    {label && (\n                      <Tooltip direction=\"center\" permanent>\n                        {label}\n                      </Tooltip>\n                    )}\n                  </Circle>\n                );\n              }\n              return (\n                <Marker\n                  alt=\"position marker\"\n                  position={[position.latitude, position.longitude]}\n                  key={position.latitude}\n                >\n                  {label && (\n                    <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                      {label}\n                    </Tooltip>\n                  )}\n                </Marker>\n              );\n            })}\n          </MarkerContainer>\n        )}\n      </MapContainer>\n    );\n  },\n  (prevProps, nextProps) => equals(prevProps.markers, nextProps.markers)\n);\n","import React from \"react\";\nimport { AiFillCheckCircle } from \"react-icons/ai\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { MarkerType } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound: QuestionRound;\n  isSpectator: Boolean;\n  className?: string;\n}\n\nexport default function GuessMap({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n  className,\n}: Props) {\n  const questionType = usedQuestionRound.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound.guesses.find(\n    (g) => g.playerId === playerId\n  );\n\n  let mapMarkers: MarkerType[] = playerGuess?.guess.geo\n    ? [\n        {\n          position: playerGuess.guess.geo,\n          label: \"You\",\n          distanceToAnswer: playerGuess.difference,\n        },\n      ]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound.isOver && usedQuestionRound.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound.guesses.reduce<MarkerType[]>(\n        (acc, { guess, playerId: pId, difference }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({\n              position: guess.geo,\n              label,\n              distanceToAnswer: difference,\n            });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: <AiFillCheckCircle className=\"text-green-500 text-2xl\" />,\n      isAnswer: true,\n      radiusInKilometres: usedQuestionRound.question.answer.geo.toleranceRadius,\n    });\n  }\n\n  return <Map className={className} markers={mapMarkers} />;\n}\n","import React from \"react\";\nimport { QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\n\nimport \"./index.css\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  handleClick?: (i: number) => void;\n  guess?: number;\n}\n\nexport default function MultipleChoiceOptions({\n  usedQuestionRound,\n  handleClick,\n  guess,\n}: Props) {\n  if (usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE) {\n    return null;\n  }\n  if (usedQuestionRound.question.alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n  const alternatives = usedQuestionRound.question.alternatives.map((alt) => ({\n    value: alt,\n    active: !usedQuestionRound.question.hiddenAlternatives?.includes(alt),\n  }));\n\n  const revealAnswer = getRevealAnswer(usedQuestionRound);\n  const answer = usedQuestionRound.question.answer.numerical;\n\n  return (\n    <div className=\"mc-container my-2\">\n      {alternatives.map((alt, i) => {\n        let optionClassName =\n          \"text-center border-2 border-blue-600 rounded-lg shadow px-4 py-3 font-bold focus:outline-none\";\n        if (!handleClick) {\n          optionClassName += \" no-pointer\";\n        }\n        if (alt.active) {\n          if (handleClick) {\n            optionClassName += \" hover:bg-blue-600 hover:text-white\";\n            if (guess === i) {\n              optionClassName += \" text-white bg-blue-600\";\n            } else {\n              optionClassName += \" text-blue-600\";\n            }\n          } else {\n            optionClassName += \" text-blue-600\";\n          }\n        } else {\n          optionClassName += \" text-blue-600\";\n        }\n        return (\n          <button\n            key={`${alt.value}_${i}`}\n            className={optionClassName}\n            onClick={() => handleClick && handleClick(i)}\n            disabled={!alt.active || (revealAnswer && i !== answer)}\n          >\n            {alt.value}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport PlayerComp from \"./Player\";\nimport Pot from \"./Pot\";\nimport Question from \"../Question\";\nimport {\n  BettingRound,\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { hasPlayerFolded, haveAllPlayersPlacedTheirGuess } from \"../helpers\";\nimport GuessMap from \"../GuessMap\";\nimport MultipleChoiceOptions from \"../MultipleChoiceOptions\";\n\nimport \"./styles.css\";\nimport { getWinningPlayerArray } from \"./helpers\";\nimport { maxNumberOfPlayers } from \"../PreGameLobby\";\ninterface Props {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId?: Player[\"id\"];\n  isSpectator: boolean;\n}\n\nconst PokerTable = ({\n  game,\n  usedQuestionRound,\n  currentBettingRound,\n  playerId,\n  isSpectator,\n}: Props) => {\n  const isGeoQuestion = usedQuestionRound?.question.type === QuestionTypes.GEO;\n  const isMultipleChoiceQuestion =\n    usedQuestionRound?.question.type === QuestionTypes.MULTIPLE_CHOICE;\n  const allPlayersPlacedTheirGuess =\n    usedQuestionRound &&\n    game.players &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n  const winningPlayerIds = getWinningPlayerArray(game) || [];\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      {isGeoQuestion && (\n        <Question\n          {...{\n            game,\n            usedQuestionRound,\n          }}\n        />\n      )}\n      <div className=\"relative w-full md:w-4/5 my-6\">\n        <div\n          className={`poker-table ${\n            isGeoQuestion ? \"md:p-0 md:overflow-hidden\" : \"md:px-48 md:py-24\"\n          } rounded-full flex md:justify-center flex-col-reverse md:flex-col md:items-center md:w-full md:border-8 md:border-white md:shadow-xl`}\n        >\n          <div className=\"grid gap-y-6 mt-7 px-5 md:mt-0 md:px-0\">\n            {game.players.map((player, index) => {\n              const { changeInMoney } =\n                usedQuestionRound.results?.find(\n                  ({ playerId }) => player.id === playerId\n                ) || {};\n              const hasFolded = !!(\n                usedQuestionRound &&\n                hasPlayerFolded(usedQuestionRound, player.id)\n              );\n              const guess = usedQuestionRound.guesses.find(\n                (g) => g.playerId === player.id\n              );\n              return (\n                <PlayerComp\n                  key={player.id}\n                  {...{\n                    player,\n                    index,\n                    numberOfPlayers: game.players.length,\n                    currentBettingRound,\n                    changeInMoney,\n                    isAppPlayer: player.id === playerId,\n                    isTurnPlayer:\n                      player.id === currentBettingRound?.currentPlayer.id,\n                    isQuestionRoundOver: !!usedQuestionRound?.isOver,\n                    isShowdown: !!usedQuestionRound?.isShowdown,\n                    hasFolded,\n                    isSpectator,\n                    allPlayersPlacedTheirGuess,\n                    guess,\n                    question: usedQuestionRound.question,\n                    isWinningPlayer: winningPlayerIds.includes(player.id),\n                    isGameOver: game.isOver,\n                  }}\n                />\n              );\n            })}\n          </div>\n          <div className=\"flex flex-col gap-2 justify-center items-center w-full h-full\">\n            {!isGeoQuestion && (\n              <div>\n                <Pot\n                  usedQuestionRound={usedQuestionRound}\n                  isGameFull={game.players.length === maxNumberOfPlayers}\n                />\n                <Question\n                  {...{\n                    game,\n                    usedQuestionRound,\n                  }}\n                />\n              </div>\n            )}\n            {isGeoQuestion && (\n              <div className=\"flex flex-col-reverse w-full\">\n                <GuessMap\n                  {...{\n                    usedQuestionRound,\n                    isSpectator,\n                    playerId,\n                    players: game.players,\n                    className: \"map\",\n                  }}\n                />\n                <Pot\n                  usedQuestionRound={usedQuestionRound}\n                  isGameFull={game.players.length === maxNumberOfPlayers}\n                />\n              </div>\n            )}\n            {isMultipleChoiceQuestion && (\n              <MultipleChoiceOptions\n                {...{\n                  usedQuestionRound,\n                  alternatives:\n                    usedQuestionRound?.question.alternatives?.map((alt) => ({\n                      value: alt,\n                      active: !usedQuestionRound.question.hiddenAlternatives?.includes(\n                        alt\n                      ),\n                    })) || [],\n                  guess: usedQuestionRound?.guesses.find(\n                    (g) => g.playerId === playerId\n                  )?.guess.numerical,\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokerTable;\n","import { Game } from \"../../../interfaces\";\n\nexport const getWinningPlayerArray = (game: Game) => {\n  if (game.isOver) {\n    return game.players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [game.players[0]]\n      )\n      .map((p) => p.id);\n  }\n};\n","import React, { useState } from \"react\";\nimport { QuestionTypes } from \"../../../../interfaces\";\nimport FormattedGuess from \"../../Guess\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default function NumberInput({ handleSubmit }: Props) {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <input\n          value={guess}\n          onChange={(e) => {\n            const value = parseFloat(e.target.value);\n            if (value === 0) setGuess(0);\n            else setGuess(value || e.target.value);\n          }}\n          onKeyUp={(e) => {\n            if (e.which === 13) {\n              handleSubmit(guess);\n              setGuess(\"\");\n            }\n          }}\n          type=\"number\"\n          className=\"bg-white border border-gray-400 px-4\"\n          placeholder=\"Your answer\"\n          aria-label=\"Your answer\"\n          aria-describedby=\"basic-addon2\"\n          autoFocus\n        />\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          Submit\n        </button>\n        <p className=\"-mt-2 text-sm h-2\">\n          <FormattedGuess\n            {...{\n              guess: {\n                numerical:\n                  typeof guess === \"number\" ? guess : parseFloat(guess || \"\"),\n              },\n              questionType: QuestionTypes.NUMERICAL,\n            }}\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<string>();\n\n  const submit = (stringValue?: string) => {\n    if (stringValue) {\n      const value = parseInt(stringValue.replaceAll(\"-\", \"\"));\n      if (value) {\n        handleSubmit(value);\n        setGuess(undefined);\n      }\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          setGuess(e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            submit(guess);\n          }\n        }}\n        type=\"date\"\n        className=\"bg-white border border-gray-400 px-4\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <button\n        type=\"submit\"\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        disabled={!guess}\n        onClick={() => {\n          submit(guess);\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        onClick={() => {\n          if (guess) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport MultipleChoiceOptions from \"../../MultipleChoiceOptions\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  alternatives?: {\n    value: string;\n    active: boolean;\n  }[];\n  handleSubmit: (guess: number) => void;\n}\n\nexport default function MultipleChoiceInput({\n  usedQuestionRound,\n  handleSubmit,\n  alternatives,\n}: Props) {\n  const [guess, setGuess] = useState<number>();\n  if (alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n\n  return (\n    <>\n      <MultipleChoiceOptions\n        usedQuestionRound={usedQuestionRound}\n        handleClick={setGuess}\n        guess={guess}\n      />\n      <button\n        className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n        onClick={() => {\n          if (guess || guess === 0) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess && guess !== 0}\n      >\n        Submit\n      </button>\n    </>\n  );\n}\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport DateInput from \"./DateInput\";\nimport MapInput from \"./MapInput\";\nimport MultipleChoiceInput from \"./MultipleChoiceInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  player?: Player;\n  addGuessMutation: AddGuess;\n  showAnswerDrawer: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n}\n\nexport default function AnswerDrawer({\n  currentQuestionRound,\n  player,\n  addGuessMutation,\n  game,\n  showAnswerDrawer,\n  setShowAnswerDrawer,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n}: QuestionProps) {\n  if (!player || player.isDead) {\n    return null;\n  }\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        player.id\n      );\n      setShowAnswerDrawer(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, player.id);\n    setShowAnswerDrawer(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.DATE:\n        return <DateInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        const alternatives = currentQuestionRound.question.alternatives?.map(\n          (alt) => ({ value: alt, active: true })\n        );\n        return (\n          <MultipleChoiceInput\n            usedQuestionRound={currentQuestionRound}\n            alternatives={alternatives}\n            handleSubmit={handleNumberInputSubmit}\n          />\n        );\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      onClose={() => {\n        setShowAnswerDrawer(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        (showAnswerDrawer || game.questionRounds.length === 1) &&\n        !hasPlayerPlacedGuessInCurrentQuestionRound\n      }\n      variant=\"temporary\"\n    >\n      <>\n        <p className=\"font-bold\">{currentQuestionRound.question.question}</p>\n        <p className=\"mt-4 text-sm\">Your answer</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n}\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default function ActionButton({\n  text,\n  handleOnClick,\n  isDisabled,\n}: ActionButtonProps) {\n  return (\n    <button\n      className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-3 py-3 md:px-4 md:py-3 transition duration-300 ease-in-out hover:bg-blue-600 w-full text-xs md:text-base\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../../helpers\";\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default function RaiseInputDrawer({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"bg-white border border-gray-400 px-4\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <button\n            disabled={\n              !!moneyRemaining &&\n              (amount < amountToCall || amount > moneyRemaining)\n            }\n            className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </div>\n        <div className=\"flex\">\n          {moneyRemaining && (\n            <>\n              {[5, 10, 20, 50]\n                .filter((amount) => amount < moneyRemaining)\n                .map((amount) => (\n                  <span\n                    key={amount}\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setAmount(amount)}\n                    className=\"mt-2 text-white bg-blue-500 mr-2 px-4 rounded-2xl hover:bg-blue-600\"\n                  >\n                    {amount}\n                  </span>\n                ))}\n              <span\n                style={{ cursor: \"pointer\" }}\n                onClick={() => setAmount(moneyRemaining)}\n                className=\"mt-2 text-white bg-blue-500 mr-2 px-4 rounded-2xl hover:bg-blue-600\"\n              >\n                All in\n              </span>\n            </>\n          )}\n        </div>\n      </>\n    </Drawer>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n} from \"../../../../interfaces\";\nimport {\n  PlaceBet,\n  call,\n  raise,\n  fold,\n  calculateAmountToCall,\n} from \"../../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n  isAppPlayerTurn: boolean;\n}\n\nexport default function ActionButtons({\n  game,\n  usedQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  isAppPlayerTurn,\n}: ActionButtonsProps) {\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  if (!usedQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n\n  return (\n    <div className=\"grid md:grid-cols-3 gap-3 md:gap-4\">\n      <ActionButton\n        text={amountToCall > 0 ? `Call for ${amountToCall}` : \"Check\"}\n        handleOnClick={() => {\n          call(placeBet, game, playerId);\n        }}\n        isDisabled={!isAppPlayerTurn}\n      />\n      <ActionButton\n        text=\"Raise\"\n        handleOnClick={() => {\n          setShowRaiseDrawer(true);\n        }}\n        isDisabled={\n          (player?.money && amountToCall >= player?.money) || !isAppPlayerTurn\n        }\n      />\n      <ActionButton\n        text=\"Fold\"\n        handleOnClick={() => {\n          fold(placeBet, game, playerId);\n        }}\n        isDisabled={!isAppPlayerTurn}\n      />\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { GrMoney } from \"react-icons/gr\";\nimport {\n  QuestionRound,\n  BettingRound,\n  Player,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"./ActionButtons\";\nimport {\n  calculateBettingRoundSpendingForPlayer,\n  hasPlayerFolded,\n  haveAllPlayersPlacedTheirGuess,\n} from \"../helpers\";\nimport FormattedGuess from \"../Guess\";\nimport Status from \"../PokerTable/Player/Status\";\n\ninterface Props\n  extends Omit<\n    ActionButtonsProps,\n    \"currentQuestionRound\" | \"playerId\" | \"isAppPlayerTurn\"\n  > {\n  player: Player;\n  usedQuestionRound: QuestionRound;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  currentBettingRound?: BettingRound;\n}\n\nconst Footer = ({\n  game,\n  usedQuestionRound,\n  player,\n  placeBet,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n  setShowAnswerDrawer,\n  currentBettingRound,\n}: Props) => {\n  const isAppPlayerTurn =\n    currentBettingRound?.currentPlayer.id === player.id &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n\n  const appPlayerAnswer = usedQuestionRound.guesses.find(\n    (guess) => guess.playerId === player.id\n  );\n\n  let appPlayerMoney = game.players.find((p) => p.id === player.id)?.money ?? 0;\n  const bettingRoundSpending =\n    (currentBettingRound &&\n      calculateBettingRoundSpendingForPlayer(currentBettingRound, player.id)) ||\n    0;\n  if (usedQuestionRound.isOver && player.id && currentBettingRound) {\n    appPlayerMoney += bettingRoundSpending;\n  }\n\n  const questionType = usedQuestionRound.question.type;\n\n  const { changeInMoney = 0 } =\n    usedQuestionRound?.results?.find(\n      ({ playerId }) => player.id === playerId\n    ) || {};\n\n  const allPlayersPlacedTheirGuess =\n    usedQuestionRound &&\n    game.players &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n\n  return (\n    <footer className=\"fixed shadow-top-md bottom-0 left-0 w-full h-44 bg-gray-200 px-4 flex flex-col items-center justify-end z-1003\">\n      <div className=\"w-full flex flex-col items-end md:items-center justify-center max-w-xl my-auto\">\n        <div className=\"absolute left-4 md:left-10 top-0 flex flex-col items-center max-w-2xs text-center\">\n          <span\n            className={`absolute shadow-top-md top-0 h-20 w-20 -mt-10 rounded-full flex items-center justify-center text-4xl ${\n              usedQuestionRound.isOver && changeInMoney > 0\n                ? \"bg-green-500\"\n                : \"bg-gray-400\"\n            } ${\n              usedQuestionRound.question.type === QuestionTypes.GEO\n                ? \"left-0\"\n                : \"\"\n            }`}\n          >\n            <Status\n              {...{\n                player,\n                isQuestionRoundOver: usedQuestionRound.isOver,\n                isTurnPlayer:\n                  !usedQuestionRound.isOver &&\n                  player.id === currentBettingRound?.currentPlayer.id,\n                hasFolded: !!(\n                  usedQuestionRound &&\n                  hasPlayerFolded(usedQuestionRound, player.id)\n                ),\n                changeInMoney,\n                allPlayersPlacedTheirGuess,\n                playerHasPlacedTheirGuess: !!appPlayerAnswer,\n              }}\n            />\n          </span>\n          {questionType !== QuestionTypes.GEO && (\n            <>\n              <p className=\"text-xs mt-12\">Your Answer</p>\n              <span className=\"text-2xl overflow-hidden max-h-24\">\n                {appPlayerAnswer && (\n                  <FormattedGuess\n                    guess={appPlayerAnswer.guess}\n                    questionType={questionType}\n                    alternatives={usedQuestionRound.question.alternatives}\n                  />\n                )}\n              </span>\n            </>\n          )}\n        </div>\n        <div\n          className={`flex items-center ${\n            usedQuestionRound.isOver ? \"flex-col\" : \"md:flex-col\"\n          }`}\n        >\n          <div className=\"flex flex-col items-center mr-3 sm:mr-5 md:mr-0\">\n            <p className=\"text-xs\">Available money</p>\n            <div className=\"flex items-center mb-6 text-2xl\">\n              <GrMoney className=\"mx-1\" />\n              <span>{appPlayerMoney}</span>\n              {changeInMoney !== 0 && (\n                <span\n                  className={`ml-2 ${\n                    changeInMoney > 0 ? \"text-green-500\" : \"text-red-500\"\n                  }`}\n                >\n                  ({changeInMoney > 0 ? \"+\" : \"\"}\n                  {changeInMoney})\n                </span>\n              )}\n            </div>\n          </div>\n          {!hasPlayerPlacedGuessInCurrentQuestionRound &&\n            game.questionRounds.length > 1 && (\n              <button\n                className=\"new-question-button bg-blue-500 rounded-lg font-bold text-white text-center px-3 py-2 md:px-4 md:py-3 text-xs md:text-base transition duration-300 ease-in-out hover:bg-blue-600 mx-auto\"\n                onClick={() => {\n                  setShowAnswerDrawer(true);\n                }}\n              >\n                Answer New Question\n              </button>\n            )}\n          {hasPlayerPlacedGuessInCurrentQuestionRound && player.id && (\n            <ActionButtons\n              {...{\n                game,\n                usedQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId: player.id,\n                isAppPlayerTurn,\n              }}\n            />\n          )}\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PreGameLobby from \"./PreGameLobby\";\nimport PokerTable from \"./PokerTable\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\nimport errorLogger from \"../../api/errorHandler\";\n// @ts-ignore\nimport notificationSound from \"../../assets/turn-notification.mp3\";\n// @ts-ignore\nimport alertSound from \"../../assets/turn-alert.wav\";\n\nimport \"./styles.css\";\n\nconst vibrate = (t: number) => {\n  window.navigator.vibrate && window.navigator.vibrate(t);\n};\nlet soundInterval: NodeJS.Timeout;\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showAnswerDrawer, setShowAnswerDrawer] = useState(false);\n  const [\n    showNewQuestionRoundForSpectator,\n    setShowNewQuestionRoundForSpectator,\n  ] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n\n  const [playNotification] = useState(new Audio(notificationSound));\n  const [playAlert] = useState(new Audio(alertSound));\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      clearInterval(soundInterval);\n      const game = subscriptionData.data?.gameUpdated;\n      setGame(game);\n      const cqr = getCurrentQuestionRound(game);\n      const cbr = getCurrentBettingRound(cqr);\n      const players = subscriptionData.data?.gameUpdated.players;\n      const allPlayersPlacedTheirBet =\n        cqr && players && haveAllPlayersPlacedTheirGuess(cqr, players);\n      if (allPlayersPlacedTheirBet) {\n        setShowNewQuestionRoundForSpectator(false);\n      }\n      if (\n        !game?.isOver &&\n        cbr?.currentPlayer.id === playerId &&\n        allPlayersPlacedTheirBet\n      ) {\n        playNotification.play();\n        vibrate(200);\n        soundInterval = setInterval(() => {\n          playAlert.play();\n          vibrate(200);\n        }, 15000);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !showNewQuestionRoundForSpectator &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <div\n      className={`p-2 flex flex-col md:justify-center ${\n        isSpectator || !gameHasStarted\n          ? \"min-h-screen\"\n          : \"min-h-screen-minus-52 mb-52\"\n      }`}\n    >\n      <a href=\"/\" className=\"mr-auto text-3xl font-bold\">\n        Certainty Poker\n      </a>\n      <div className=\"flex flex-col md:my-auto\">\n        {!gameHasStarted && (\n          <PreGameLobby\n            players={game.players}\n            gameLink={window.location.href}\n            startGame={startGame}\n            gameId={game.id}\n            createPlayer={createPlayer}\n            playerId={playerId}\n          />\n        )}\n        {gameHasStarted && usedQuestionRound && (\n          <PokerTable\n            {...{\n              game,\n              usedQuestionRound,\n              currentBettingRound,\n              playerId,\n              isSpectator,\n            }}\n          />\n        )}\n        {isSpectator && usedQuestionRound?.isOver && !game.isOver && (\n          <button\n            className=\"bg-blue-500 rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600 mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRoundForSpectator(true);\n            }}\n          >\n            Show Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            player,\n            showAnswerDrawer,\n            setShowAnswerDrawer,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && player && !isSpectator && usedQuestionRound && (\n        <Footer\n          {...{\n            game,\n            usedQuestionRound,\n            placeBet,\n            player,\n            startGame,\n            hasPlayerPlacedGuessInCurrentQuestionRound,\n            setShowAnswerDrawer,\n            currentBettingRound,\n          }}\n        />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </div>\n  );\n}\n\nexport default GameComponent;\n","import React from \"react\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\nimport ConfirmDialogButton from \"../../shared/ConfirmDialogButton\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n  };\n\n  return (\n    <ConfirmDialogButton\n      onConfirm={handleConfirm}\n      dialogTitle={\n        <>\n          Are you sure?\n          {gameHasStarted && (\n            <p>If you leave the game, you cannot join again later.</p>\n          )}\n        </>\n      }\n      confirmLabel=\"Leave Game\"\n      buttonLabel={<ExitToAppOutlinedIcon />}\n      btnClassName=\"leave-game btn btn-link btn-lg\"\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/turn-notification.e2e956ce.mp3\";","export default __webpack_public_path__ + \"static/media/turn-alert.11acdad1.wav\";","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.css\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div className=\"bg-gray-50 dark:bg-gray-700 min-h-screen\">\n      <div\n        id=\"app\"\n        className=\"mx-auto max-w-full sm:max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl\"\n      >\n        <Switch>\n          <Route path=\"/\" component={Lobby} exact />\n          <Route path=\"/:gameId\" component={Game} exact />\n          <Route path=\"/questions/:setName\" component={Lobby} exact />\n          <Route component={PageNotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nimport \"./index.css\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}