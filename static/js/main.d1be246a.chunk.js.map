{"version":3,"sources":["assets/turn-notification.mp3","assets/turn-alert.wav","api/queries.ts","interfaces.ts","api/errorHandler.ts","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/helpers/queryHelpers.ts","assets/countryCodes.ts","components/Lobby/UploadModal/index.tsx","components/Lobby/index.tsx","components/Game/PlayerTable/Avatar/index.tsx","storage.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/Hints/index.tsx","components/Game/Question/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/NumberInput/index.tsx","components/Game/Map/index.tsx","components/Game/index.tsx","components/Game/AnswerDrawer/MapInput/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/LeaveGameButton/index.tsx","components/Game/GuessMap/index.tsx","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["module","exports","QuestionTypes","CREATE_GAME_QUERY","gql","UPLOAD_QUESTION_SET","GET_SETS_QUERY","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","REMOVE_PLAYER","err","console","error","message","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","filter","player","isDead","guesses","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","Math","max","Object","values","hasPlayerFolded","foldedPlayerIds","includes","getRevealAnswer","questionRound","isOver","question","hints","getGuess","guess","questionType","NUMERICAL","numerical","GEO","geo","latitude","longitude","Error","raise","placeBet","currentBettingRound","currentPlayer","id","moneyOfPlayer","find","money","variables","input","gameId","min","addGuess","addGuessMutation","countryListAlpha2","GB","FR","ES","CN","DE","ZA","AL","DZ","SA","AM","BD","BG","KH","HR","CZ","DK","NL","EE","FI","GR","IL","HU","IN","IT","JP","KR","LV","LT","MY","MN","NO","PL","BR","RO","RU","RS","SK","SI","SE","TH","TR","VN","styles","card","maxHeight","UploadModal","open","handleClose","fetchSets","setSelectedSets","history","useHistory","useState","showCSVInput","setShowCSVInput","data","setData","setName","setSetName","isPrivate","setIsPrivate","language","setLanguage","useMutation","questions","onCompleted","push","undefined","onError","errorLogger","uploadQuestions","content","target","rel","href","onDrop","rows","map","row","type","numericalAnswer","answer","hint1","hint2","explanation","Boolean","file","inputElem","reason","config","header","addRemoveButton","removeButtonColor","className","value","onChange","e","placeholder","aria-label","required","autoFocus","selected","keys","countryCodes","code","countryCodeToFlagEmoji","q","key","h","htmlFor","disabled","onClick","Modal","disablePortal","disableEnforceFocus","disableAutoFocus","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","style","Lobby","Size","useParams","location","useLocation","selectedSets","isUploadModalOpen","setIsUploadModalOpen","shownLanguage","setShownLanguage","setNames","createGame","errorHandler","loading","useLazyQuery","fetchPolicy","sets","useEffect","handleCreateGame","a","languages","uniqueLanguages","s","sort","b","parseInt","to","pathname","color","window","host","cursor","set","gridColumn","round","pow","metaKey","numberOfQuestions","setFingerprintToStorage","random","toString","substring","localStorage","setItem","getFingerprintFromStorage","getItem","name","isFolded","gameIsOver","size","isDealer","isPlayerTurn","showPreviousQuestionRoundResults","lg","winningPlayerIds","usedQuestionRound","isSpectator","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","winners","p","hasFolded","moneyDiff","results","changeInMoney","bettingRoundSpending","revealGuess","isShowdown","Avatar","dealerId","md","role","title","fontSize","borderTop","marginTop","paddingTop","currentHint","oldHint","numberOfHints","slice","hint","noHints","totalQuestions","Hints","children","drawerProps","Drawer","handleSubmit","setGuess","parseFloat","onKeyUp","which","aria-describedby","LocationMarker","handleUpdate","position","setPosition","useMapEvents","click","latlng","lat","lng","Marker","soundInterval","markers","handleOnClick","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","label","Tooltip","direction","offset","permanent","Map","showNewQuestionRound","setShowNewQuestionRound","canAddGuess","handleNumberInputSubmit","handleMapInputSubmit","geoCoordinate","anchor","variant","NumberInput","MapInput","getInput","emojiRegex","createPlayer","playerName","newName","match","text","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","pattern","check","call","fold","actionButtonProps","RaiseInputDrawer","revealPreviousAnswers","br","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","gameHasStarted","setPlayerId","React","setOpen","removeItem","deletePlayerIdFromStorage","removePlayer","Dialog","DialogTitle","DialogActions","playerGuess","g","mapMarkers","pId","GameComponent","setGame","showNewQuestionRoundForSpectator","setShowNewQuestionRoundForSpectator","gqlErr","setGqlErr","useSound","require","playNotification","playAlert","fetchGame","newPlayerData","subscriptionError","useSubscription","hash","onSubscriptionData","subscriptionData","clearInterval","gameUpdated","cqr","cbr","allPlayersPlacedTheirBet","navigator","vibrate","setInterval","storedPlayerId","getPlayerIdFromStorage","newPlayerId","addPlayer","setPlayerIdToStorage","playerGuessInCurrentQuestionRound","hasPlayerPlacedGuessInCurrentQuestionRound","previousQuestionRound","getPreviousQuestionRound","fontWeight","paddingBottom","Question","GuessMap","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","LeaveGameButton","PageNotFound","App","path","component","exact","Game","hostname","SERVER_URL","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mVAAAA,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,wC,k9HCGpC,ICHKC,EDGCC,EAAoBC,YAAH,KAQjBC,EAAsBD,YAAH,KAgBnBE,EAAiBF,YAAH,KAUdG,EAAiBH,YAAH,KA6DdI,EAA0BJ,YAAH,KA6DvBK,EAAgBL,YAAH,KAUbM,EAAaN,YAAH,KAMVO,EAAYP,YAAH,KAMTQ,EAAYR,YAAH,KAUTS,EAAgBT,YAAH,KE/LX,WAACU,GACdC,QAAQC,MAAMF,EAAIG,U,oCDDRf,K,UAAAA,E,sBAAAA,E,kCAAAA,E,aAAAA,M,KESL,IAAMgB,EAAyC,SACpDC,EACAC,GAEA,OAAOD,EAAaE,KAAKC,QACvB,SAACC,EAAKC,GAAN,OAAcD,GAAOC,EAAIJ,WAAaA,EAAWI,EAAIC,OAAS,KAC9D,IAISC,EAA0B,SAACC,GAAD,oBACrCA,QADqC,IACrCA,OADqC,EACrCA,EAAMC,gBAAmB,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMC,sBAAN,eAAsBC,QAAS,IAKzCC,EAAyB,SAACC,GAAD,oBACpCA,QADoC,IACpCA,OADoC,EACpCA,EAAsBC,eACA,OAApBD,QAAoB,IAApBA,GAAA,UAAAA,EAAsBC,qBAAtB,eAAqCH,QAAS,IAGrCI,EAAiC,SAC5CF,EACAG,GAEA,IAAMC,EAAmBD,EAAQE,QAAO,SAACC,GAAD,OAAaA,EAAOC,UAC5D,OAAOP,EAAqBQ,QAAQV,QAAUM,EAAiBN,QAGpDW,GAAwB,SACnCrB,EACAC,GAEA,IAAKD,EAAaE,KAAKQ,OAAQ,OAAO,EACtC,IAAMY,EAAmCvB,EACvCC,EACAC,GAGIsB,EAAqCvB,EAAaE,KAAKC,QAC3D,SAACqB,EAAKnB,GAEJ,OADAmB,EAAInB,EAAIJ,WAAauB,EAAInB,EAAIJ,WAAa,GAAKI,EAAIC,OAC5CkB,IAET,IAGF,OACEC,KAAKC,IAAL,MAAAD,KAAI,YAAQE,OAAOC,OAAOL,KAC1BD,GAISO,GAAkB,SAC7BjB,EACAX,GAF6B,cAG1BW,QAH0B,IAG1BA,OAH0B,EAG1BA,EAAsBkB,gBAAgBC,SAAS9B,IAEvC+B,GAAkB,SAACC,GAAD,OAC7BA,EAAcC,QACdD,EAAcE,SAASC,MAAM1B,OAAS,EAAIuB,EAAcpB,cAAcH,QAE3D2B,GAAW,SAACC,EAAeC,GAAkC,IAAD,IACvE,GAAKD,EACL,OAAQC,GACN,KAAKxD,EAAcyD,UACjB,OAAOF,EAAMG,UACf,KAAK1D,EAAc2D,IACjB,MAAM,IAAN,iBAAWJ,EAAMK,WAAjB,aAAW,EAAWC,SAAtB,uBAAmCN,EAAMK,WAAzC,aAAmC,EAAWE,UAA9C,KACF,QACE,MAAM,IAAIC,MAAM,2BCTTC,GAAQ,SACnBzC,EACA0C,EACAxC,EACAP,GACI,IAAD,IACGW,EAAuBL,EAAwBC,GAC/CyC,EAAsBtC,EAAuBC,GACnD,GACGA,IACkB,OAAnBqC,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOlD,EAF5C,CAQA,GADqBoB,GAAsB4B,EAAqBhD,GAC7CK,EACjB,MAAM,IAAIwC,MAAM,iDAGlB,IAAMM,EAAa,oBACjB5C,EAAKO,QAAQsC,MAAK,qBAAGF,KAAgBlD,YADpB,aACjB,EAAgDqD,aAD/B,QACwC,EAE3DN,EAAS,CACPO,UAAW,CACTC,MAAO,CACLC,OAAQjD,EAAK2C,GACblD,SAAUA,EACVK,OAAQmB,KAAKiC,IAAIpD,EAAQ8C,SC1FpBO,GAAW,SACtBC,EACApD,EACA8B,EACArC,GAEA2D,EAAiB,CACfL,UAAW,CACTC,MAAO,CACLC,OAAQjD,EAAK2C,GACblD,SAAUA,EACVqC,aC0BOuB,GA7CW,CACxBC,GAAI,UACJC,GAAI,SACJC,GAAI,WACJC,GAAI,UACJC,GAAI,SACJC,GAAI,YACJC,GAAI,WACJC,GAAI,WACJC,GAAI,OACJC,GAAI,WACJC,GAAI,cACJC,GAAI,YACJC,GAAI,YACJC,GAAI,WACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,WACJC,GAAI,UACJC,GAAI,QACJC,GAAI,SACJC,GAAI,YACJC,GAAI,SACJC,GAAI,UACJC,GAAI,WACJC,GAAI,SACJC,GAAI,UACJC,GAAI,aACJC,GAAI,YACJC,GAAI,YACJC,GAAI,YACJC,GAAI,SACJC,GAAI,aACJC,GAAI,WACJC,GAAI,UACJC,GAAI,UACJC,GAAI,YACJC,GAAI,YACJC,GAAI,UACJC,GAAI,OACJC,GAAI,UACJC,GAAI,cC5BAC,GAAS,CACbC,KAAM,CACJC,UAAW,SAoPAC,OA5Nf,YAAgF,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,gBAC7CC,EAAUC,cAD6D,EAErCC,oBAAS,GAF4B,mBAEtEC,EAFsE,KAExDC,EAFwD,OAGrDF,qBAHqD,mBAGtEG,EAHsE,KAGhEC,EAHgE,OAI/CJ,mBAAS,IAJsC,mBAItEK,EAJsE,KAI7DC,EAJ6D,OAK3CN,mBAAgB,GAL2B,mBAKtEO,EALsE,KAK3DC,EAL2D,OAM7CR,qBAN6C,mBAMtES,EANsE,KAM5DC,EAN4D,OAQxCC,YAAY3I,EAAqB,CACpEqE,UAAW,CACTgE,UACAO,UAAWT,EACXI,YAAaA,EACbE,YAEFI,YAAa,WACPN,EACFT,EAAQgB,KAAR,qBAA2BT,IAE3BT,IAEFC,EAAgB,CAACQ,IACjBV,IACAW,EAAW,IACXF,OAAQW,GACRb,GAAgB,IAElBc,QAASC,IA3BkE,mBAQtEC,EARsE,KAQnDvI,EARmD,KAQnDA,MA6DpBwI,EAAUlB,EACd,oCACE,wEAC6C,IAC3C,uBACEmB,OAAO,SACPC,IAAI,sBACJC,KAAK,wGAHP,QAFF,KAWA,kBAAC,IAAD,CACEC,OArDe,SAACC,GACpBtB,GAAgB,GAChBE,EACEoB,EAAKC,KAAI,SAACC,GAAS,IAAD,EAUZA,EAAIvB,KARNlF,EAFc,EAEdA,SACA0G,EAHc,EAGdA,KACQC,EAJM,EAIdC,OACAnG,EALc,EAKdA,SACAC,EANc,EAMdA,UACAmG,EAPc,EAOdA,MACAC,EARc,EAQdA,MACAC,EATc,EASdA,YAEI9G,EAAQ,CAAC4G,EAAOC,GAAOhI,OAAOkI,SAC9BJ,EAAiB,GASvB,OARID,GAAuC,IAApBA,EACrBC,EAAOtG,UAAYqG,GAElBlG,GAAyB,IAAbA,IACZC,GAA2B,IAAdA,IAEdkG,EAAOpG,IAAM,CAAEC,WAAUC,cAEpB,CACLV,WACA0G,OACAE,SACA3G,QACA8G,oBAyBFhB,QAnBgB,SAACvI,EAAUyJ,EAAWC,EAAgBC,GAC1D1J,QAAQC,MAAMF,IAmBV4J,OAAQ,CAAEC,QAAQ,GAClBC,iBAAe,EACfC,kBAAkB,WAElB,0EAIJ,oCACE,yBAAKC,UAAU,oBACb,2BACEC,MAAOrC,EACPsC,SAAU,SAACC,GACTtC,EAAWsC,EAAExB,OAAOsB,QAEtBf,KAAK,OACLc,UAAU,+BACVI,YAAY,4BACZC,aAAW,4BACXC,UAAQ,EACRC,WAAS,KAGb,yBAAKP,UAAU,oBACb,4BACEA,UAAU,gBACVC,MAAOjC,EACPkC,SAAU,SAACC,GACTlC,EAAYkC,EAAExB,OAAOsB,SAGvB,4BAAQO,UAAQ,GAAhB,eACCxI,OAAOyI,KAAKC,IAAc1B,KAAI,SAAC2B,GAAD,OAC7B,4BAAQV,MAAOU,GACZC,YAAuBD,GAAO,IAC9BD,GAAaC,SAKtB,mDACA,8BACEjD,GAAQ,IAAIsB,KAAI,SAAC6B,GAAD,aAChB,yBAAKC,IAAKD,EAAErI,SAAUwH,UAAU,SAC9B,wCACY,2BAAIa,EAAErI,WAElB,sCACU,2BAAIE,GAASmI,EAAEzB,OAAQyB,EAAE3B,SAElC,UAAA2B,EAAEpI,aAAF,eAAS1B,SACR,oCACS,IACN8J,EAAEpI,MAAMuG,KAAI,SAAC+B,GAAD,OACX,oCACE,6BACA,0BAAMD,IAAKC,GACT,2BAAIA,SAMbF,EAAEtB,aACD,2CACe,2BAAIsB,EAAEtB,cAGvB,iCAGJ,yBAAKS,UAAU,cACb,2BACEd,KAAK,WACLc,UAAU,wBACVxG,GAAG,oBACHyG,MAAOnC,EACPoC,SAAU,WACRnC,EAAaD,EAAY,EAAI,MAGjC,2BAAOkC,UAAU,mBAAmBgB,QAAQ,qBAA5C,wBAEE,6BACA,sHAMJ,4BACEhB,UAAU,kBACViB,UAAWrD,EACXsD,QAAS,WACPzC,MAJJ,UASA,4BACEuB,UAAU,4BACVkB,QAAS,WACPzD,GAAgB,KAHpB,oBAWJ,OACE,kBAAC0D,EAAA,EAAD,CACEC,eAAa,EACbC,qBAAmB,EACnBC,kBAAgB,EAChBrE,KAAMA,EACN+C,UAAU,uDACVuB,QAASrE,EACTsE,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,MAGX,yBAAK5B,UAAU,OAAO6B,MAAOhF,GAAOC,MAClC,yBAAKkD,UAAU,qCACb,uEACCtB,EACAxI,GAAS,yBAAK8J,UAAU,sBAAsB9J,EAAMC,a,OCpFhD2L,ICpKHC,GDoKGD,GA7Jf,WAAkB,IACRlE,EAAYoE,cAAZpE,QACFP,EAAUC,cACV2E,EAAWC,cAHF,EAIyB3E,mBACtCK,EAAU,CAACA,GAAW,IALT,mBAIRuE,EAJQ,KAIM/E,EAJN,OAOmCG,oBAAS,GAP5C,mBAOR6E,EAPQ,KAOWC,EAPX,OAQ2B9E,mBAAS,MARpC,mBAQR+E,EARQ,KAQOC,EARP,OASmBrE,YAE/B7I,EAAmB,CACpBuE,UAAW,CACT4I,SAAUL,GAEZ/D,YAAa,YAAqB,IAAlBqE,EAAiB,EAAjBA,WACdpF,EAAQgB,KAAR,WAAiBoE,EAAWjJ,MAE9B+E,QAASmE,IAlBI,mBASRD,EATQ,KASME,EATN,KASMA,QATN,EAoBqBC,YAEjCpN,EAAgB,CACjBqN,YAAa,WACbtE,QAASmE,EACT9I,UAAW,CAAEgE,aAzBA,mBAoBRT,EApBQ,KAoBW2F,EApBX,KAoBKpF,KAQpBqF,qBAAU,WACR5F,MACC,CAACA,EAAWS,IAEf,IAAMoF,EAAgB,uCAAG,sBAAAC,EAAA,sDACnBd,EAAapL,QACf0L,IAFqB,2CAAH,qDAMhBS,GACA,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMA,KACHtM,QAAiB,SAAC2M,EAAiBC,GAIlC,OAHKD,EAAgB/K,SAASgL,EAAEpF,WAC9BmF,EAAgB9E,KAAK+E,EAAEpF,UAElBmF,IACN,IACFE,MAAK,SAACJ,EAAGK,GACR,MAAU,OAANL,GACM,EAEHM,SAASN,GAAKM,SAASD,QAC1B,GAEV,OACE,oCACG1F,EACC,2FACgE,IAC9D,kBAAC,IAAD,CACE4F,GAAIvB,EAASwB,SACb5B,MAAO,CAAE6B,MAAO,YAFlB,UAGKC,OAAO1B,SAAS2B,MAHrB,OAG4B3B,EAASwB,WALvC,IAOE,6BAPF,gBAQe,6CARf,kEAUE,6BAVF,gDAcA,uBAAGzD,UAAU,QAAb,6EAEM,IACJ,4BACEA,UAAU,mBACVkB,QAAS,WACPmB,GAAqB,KAHzB,eAHF,KAcF,yBAAKrC,UAAU,eACZkD,EAAUlE,KAAI,SAAChB,GAAD,OACb,0BACE8C,IAAK9C,EACLgC,UAAS,wBACPhC,IAAasE,EAAgB,GAAK,iBAEpCpB,QAAS,WACPqB,EAAiBvE,IAEnB6D,MAAO,CACLgC,OAAQ7F,IAAasE,EAAgB,UAAY,YAGlD1B,YAAuB5C,QAI9B,yBAAKgC,UAAU,sBAAf,OACG8C,QADH,IACGA,OADH,EACGA,EAAMA,KACJxL,QAAO,SAAC8L,GAAD,OAAOA,EAAEpF,WAAasE,KAC7BtD,KAAI,SAAC8E,GAAD,OACH,0BACEhD,IAAKgD,EAAIlG,QACToC,UAAS,kCACK,OAAZmC,QAAY,IAAZA,OAAA,EAAAA,EAAc/J,SAAS0L,EAAIlG,UAAW,cAAgB,GAD/C,YAELA,EAAU,UAAY,IAC1BiE,MAAO,CACLkC,WAAW,QAAD,OAAUjM,KAAKkM,MACvBlM,KAAKmM,IAAIH,EAAIlG,QAAQ7G,OAAQ,QAGjCmK,QAAS,SAACf,GACJvC,IAGAuC,EAAE+D,SACJ,OAAI/B,QAAJ,IAAIA,OAAJ,EAAIA,EAAc/J,SAAS0L,EAAIlG,UAC7BR,EACE+E,EAAa7K,QAAO,SAACsG,GAAD,OAAakG,EAAIlG,UAAYA,MAGnDR,EAAgB,CAAC0G,EAAIlG,SAAN,mBAAkBuE,KAGnC/E,EAAgB,CAAC0G,EAAIlG,aAIxBkG,EAAIlG,QA3BP,KA2BkBkG,EAAIK,kBA3BtB,SA+BN,4BACEnE,UAAU,2CACVkB,QAAS8B,EACT/B,UAAWkB,EAAapL,QAEvB4L,EAAU,aAAe,eAG5B,kBAAC,GAAD,CACE1F,KAAMmF,EACNlF,YAAa,WACXmF,GAAqB,IAEvBlF,UAAWA,EACXC,gBAAiBA,M,SEtJZgH,GAA0B,SAACtK,GACtC,IAAMmG,EAAQnI,KAAKuM,SAASC,SAAS,IAAIC,UAAU,GAEnD,OADAC,aAAaC,QAAb,UAdsB,cActB,YAA2C3K,GAAUmG,GAC9CA,GAGIyE,GAA4B,SAAC5K,GAAD,OACvC0K,aAAaG,QAAb,UAnBsB,cAmBtB,YAA2C7K,K,mCDfjCiI,K,QAAAA,E,SAAAA,Q,KAiBG,mBAUD,IATZvI,EASW,EATXA,GACAoL,EAQW,EARXA,KACAtL,EAOW,EAPXA,oBACA9B,EAMW,EANXA,OACAqN,EAKW,EALXA,SACAC,EAIW,EAJXA,WACAC,EAGW,EAHXA,KACAC,EAEW,EAFXA,SAGMC,GADK,EADXC,mCAIGJ,IACkB,OAAnBxL,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOA,EAC5C,OACE,yBAAKwG,UAAS,iBAAY+E,EAAZ,YAAoBvN,GAAUqN,EAAW,OAAS,KAC9D,0BAAM7E,UAAWiF,GAAgBF,IAAShD,GAAKoD,GAAK,OAAS,IAC1DP,GAEFK,GAAgB,0BAAMjF,UAAU,QAAQ,KACxCgF,GAAY,0BAAMhF,UAAU,UAAU,OEH9B,I,OAAA,YAOU,IAgBnBvI,EAOA2N,EA7BJhO,EAMsB,EANtBA,QACAd,EAKsB,EALtBA,SACAgD,EAIsB,EAJtBA,oBACA+L,EAGsB,EAHtBA,kBACAxO,EAEsB,EAFtBA,KACAyO,EACsB,EADtBA,YAEA,IAAKlO,EAAQL,OACX,OAAO,KAELF,EAAK0B,QAEPnB,EACGiM,MAAK,SAACkC,EAAIC,GAAL,OAAYA,EAAG7L,MAAQ4L,EAAG5L,SAC/B8L,SAAQ,SAAClO,EAAQmO,GAChBnO,EAAOoO,KAAOD,EAAI,KAGpBpP,IACFc,EA7BuB,SAACA,EAAmBd,GAC7C,IAAMsP,EAAQ,YAAOxO,GACf6L,EAAI2C,EAASC,OACjBD,EAASE,WAAU,qBAAGtM,KAAgBlD,KACtCsP,EAAS7O,QAEX,MAAM,GAAN,mBAAWkM,GAAX,YAAiB2C,IAuBLG,CAAmB3O,EAASd,IAIpC+O,IACF5N,EAAO,OAAG4N,QAAH,IAAGA,OAAH,EAAGA,EAAmB5N,QAAQjB,QACnC,SAACqB,EAAKc,GAAN,uBAAsBd,EAAtB,gBAA4Bc,EAAMrC,SAAWqC,EAAMA,UACnD,KAIA9B,EAAK0B,SACP6M,EAAmBhO,EAChBZ,QACC,SAACwP,EAASzO,EAAQmO,GAChB,OAAU,IAANA,EAAgBM,EAChBA,EAAQ,GAAGrM,MAAQpC,EAAOoC,MACrB,CAACpC,GAENyO,EAAQ,GAAGrM,QAAUpC,EAAOoC,MACxB,GAAN,mBAAWqM,GAAX,CAAoBzO,IAEfyO,IAET,CAAC5O,EAAQ,KAEV4H,KAAI,SAACiH,GAAD,OAAOA,EAAEzM,OAElB,IAAMZ,EAAY,OAAGyM,QAAH,IAAGA,OAAH,EAAGA,EAAmB7M,SAAS0G,KAEjD,OACE,oCACG9H,EAAQ4H,KAAI,WAAoC0G,GAAO,IAAD,MAAvClM,EAAuC,EAAvCA,GAAIG,EAAmC,EAAnCA,MAAOiL,EAA4B,EAA5BA,KAAMe,EAAsB,EAAtBA,KAAMnO,EAAgB,EAAhBA,OAC/B0O,EACJb,GAAqBnN,GAAgBmN,EAAmB7L,GACpD2M,EAAS,OAAGd,QAAH,IAAGA,GAAH,UAAGA,EAAmBe,eAAtB,iBAAG,EAA4B1M,MAC5C,gBAAGpD,EAAH,EAAGA,SAAH,OAAkBkD,IAAOlD,YADZ,aAAG,EAEf+P,cACGC,EAAuBhN,EACzBlD,EAAuCkD,EAAqBE,GAC5D,EACE+M,EACJjB,MACE,OAACD,QAAD,IAACA,OAAD,EAACA,EAAmB9M,UAArB,OACC8M,QADD,IACCA,OADD,EACCA,EAAmBmB,cAClBN,EACCvN,EAAQlB,GAAWiB,GAASjB,EAAQ+B,GAAKZ,GAE/C,OACE,yBAAKkI,IAAKtH,EAAIwG,UAAU,uCACrBnJ,EAAK0B,QAAU,0BAAMyH,UAAU,QAAQ2F,EAAxB,KAChB,kBAACc,GACK,CACFjN,KACAoL,OACAtL,sBACA9B,SACAqN,SAAUqB,EACVpB,WAAYjO,EAAK0B,OACjByM,UAAc,OAAJnO,QAAI,IAAJA,OAAA,EAAAA,EAAM6P,YAAalN,EAC7BuL,KAAY,IAANW,GAAWpP,EAAWyL,GAAKoD,GAAKpD,GAAK4E,GAC3CzB,oCAAmC,OAACG,QAAD,IAACA,OAAD,EAACA,EAAmB9M,UAG3D,yBACEyH,UAAS,gBAAWxG,IAAOlD,EAAW,GAAK,KAAlC,aACNkB,IAAU0O,IAAc,OAACb,QAAD,IAACA,OAAD,EAACA,EAAmB9M,QAEzC,GADA,SAILK,IAAiBxD,EAAcyD,YAC7B0N,EACC,0BAAMK,KAAK,MAAMvG,aAAW,UAA5B,gBACM1H,GAGNlB,GACE,0BAAMmP,KAAK,MAAMvG,aAAW,UAA5B,eACK,IACH,0BAAML,UAAWxG,IAAOlD,EAAW,GAAK,aACpCqC,GAAmB,IAAVA,EAEPa,IAAOlD,EACPqC,EACA,IAHA,QAQd,yBAAKqH,UAAU,UACb,0BAAM4G,KAAK,MAAMvG,aAAW,SAA5B,eAEG1G,IACmB,OAAjB0L,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB9M,UAAW1B,EAAK0B,OAChC+N,EACA,MAEP,OAACjB,QAAD,IAACA,OAAD,EAACA,EAAmB9M,WAAY+N,GAC/B,0BAAMtG,UAAU,SAAgC,EAAxBsG,IAER,OAAjBjB,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB9M,SAAU4N,GAC5B,0BACEnG,UAAS,eACPmG,EAAY,EAAI,eAAiB,gBAGlCA,MAKQ,QAAhB,EAAAf,SAAA,eAAkBhN,SAASoB,KAC1B,0BAAMwG,UAAU,SAAS4G,KAAK,MAAMvG,aAAW,UAA/C,gBAID7I,IAAWX,EAAK0B,QACf,0BAAMyH,UAAU,QAAQ4G,KAAK,MAAMvG,aAAW,SAA9C,uBC9KRxD,GAAS,CACbgK,MAAO,CACLC,SAAU,QACVC,UAAW,oBACXC,UAAW,QACXC,WAAY,OAEdC,YAAa,CACXJ,SAAU,SAEZK,QAAS,CACPL,SAAU,UAQC,eAAwC,IAArCzB,EAAoC,EAApCA,kBACV5M,EAAQ4M,EAAkB7M,SAASC,MACnC2O,EAAgB/B,EAAkB9M,OACpCE,EAAM1B,OACNe,KAAKiC,IAAIsL,EAAkBnO,cAAcH,OAAS,EAAG0B,EAAM1B,QAC/D,OAAIqQ,EAAgB,EACX,MAEL,OAAC3O,QAAD,IAACA,OAAD,EAACA,EAAO1B,QAIV,yBAAKiJ,UAAU,sBACb,0BAAM6B,MAAOhF,GAAOgK,OAApB,OACOO,EAAgB,GAAK,IAD5B,KACmCA,EADnC,IACmD3O,EAAM1B,OADzD,MAGA,4BACGsO,EAAkB7M,SAASC,MACzB4O,MAAM,EAAGD,GACTpI,KAAI,SAACsI,EAAM5B,GAAP,OACH,wBACE5E,IAAKwG,EACLzF,MACEuF,IAAkB1B,EAAI,GAAMrN,GAAgBgN,GAExCxI,GAAOsK,QADPtK,GAAOqK,aAIZI,QAnBJ,MCtBLzK,GAAS,CACbrE,SAAU,CACRsO,SAAU,SAEZ1H,OAAQ,CACN0H,SAAU,UAIC,eAAiD,IAA9CjQ,EAA6C,EAA7CA,KAAMwO,EAAuC,EAAvCA,kBAChBkC,EACJlC,EAAkBnO,cAAcH,QAAU,IAAMsO,EAAkB9M,OAC9DiP,EAAiB3Q,EAAKC,eAAeC,OAASF,EAAKsH,UAAUpH,OACnE,OACE,yBAAKiJ,UAAU,QACb,uBAAGA,UAAU,OAAO6B,OAAS0F,GAAW,CAAET,SAAU,UAAc,IAAlE,aACajQ,EAAKC,eAAeC,OADjC,IAC0CyQ,EAD1C,MAGA,uBAAG3F,MAAQ0F,GAAW1K,GAAOrE,UAAa,IACvC6M,EAAkB7M,SAASA,UAE9B,kBAACiP,GACK,CACFpC,sBAGHA,EAAkB7M,SAAS0G,OAAS9J,EAAc2D,KACjDV,GAAgBgN,IACd,oCACE,uBAAGxD,MAAOhF,GAAOuC,QAAjB,UACU,IACR,2BACG1G,GACC2M,EAAkB7M,SAAS4G,OAC3BiG,EAAkB7M,SAAS0G,QAIhCmG,EAAkB7M,SAAS+G,aAC1B,2BAAI8F,EAAkB7M,SAAS+G,gB,mBCtC9B,I,OAAA,YAKO,IAJpBmI,EAImB,EAJnBA,SACAb,EAGmB,EAHnBA,MACAtF,EAEmB,EAFnBA,QACGoG,EACgB,+CACnB,OACE,kBAACC,GAAA,EAAD,cAEI5H,UAAW,UACR2H,GAGL,yBAAK3H,UAAU,yCACb,yBAAKA,UAAU,gCAAgCxG,GAAG,gBAChD,0BAAMwG,UAAWuB,EAAU,UAAY,IAAKsF,GAC3CtF,GACC,0BAAM/H,GAAG,eAAewG,UAAU,eAAekB,QAASK,GAA1D,WAMJ,yBAAKvB,UAAU,+CACZ0H,OC7BI,eAA8B,IAA3BG,EAA0B,EAA1BA,aAA0B,EAChBtK,mBAA0B,IADV,mBACnC5E,EADmC,KAC5BmP,EAD4B,KAG1C,OACE,yBAAK9H,UAAU,oBACb,2BACEC,MAAOtH,EACPuH,SAAU,SAACC,GACT,IAAMF,EAAQ8H,WAAW5H,EAAExB,OAAOsB,OACjB6H,EAAH,IAAV7H,EAAsB,EACZA,GAASE,EAAExB,OAAOsB,QAElC+H,QAAS,SAAC7H,GACQ,KAAZA,EAAE8H,QACJJ,EAAalP,GACbmP,EAAS,MAGb5I,KAAK,SACLc,UAAU,+BACVI,YAAY,cACZC,aAAW,cACX6H,mBAAiB,eACjB3H,WAAS,IAEX,yBAAKP,UAAU,sBACb,4BACEd,KAAK,SACLc,UAAU,kBACViB,SAA2B,kBAAVtI,IAAwBA,GAAmB,IAAVA,EAClDuI,QAAS,WACP2G,EAAalP,GACbmP,EAAS,MANb,a,yDCTR,SAASK,GAAT,GAA4E,IAAlDC,EAAiD,EAAjDA,aAAiD,EACzC7K,mBAAc,MAD2B,mBAClE8K,EADkE,KACxDC,EADwD,KASzE,OAPAC,aAAa,CACXC,MADW,SACLrI,GACJmI,EAAYnI,EAAEsI,QACdL,EAAa,CAAEnP,SAAUkH,EAAEsI,OAAOC,IAAKxP,UAAWiH,EAAEsI,OAAOE,SAI3C,OAAbN,EAAoB,KAAO,kBAACO,GAAA,EAAD,CAAQP,SAAUA,IAGvC,ICKXQ,GDLW,eAAwC,IAArCC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,cACzB,OACE,kBAACC,GAAA,EAAD,CACEC,OAAQ,CAAC,EAAG,GACZC,KAAM,EACNC,iBAAiB,EACjBnJ,UAAU,QAEV,kBAACoJ,GAAA,EAAD,CACEC,YAAY,uOACZC,IAAI,yEAELP,GAAiB,kBAACZ,GAAD,CAAgBC,aAAcW,KACxC,OAAPD,QAAO,IAAPA,OAAA,EAAAA,EAAS/R,SACR+R,EAAQ9J,KAAI,gBAAGqJ,EAAH,EAAGA,SAAUkB,EAAb,EAAaA,MAAb,OACV,kBAACX,GAAA,EAAD,CACEP,SAAU,CAACA,EAASpP,SAAUoP,EAASnP,WACvC4H,IAAKuH,EAASpP,UAEbsQ,GACC,kBAACC,GAAA,EAAD,CAASC,UAAU,SAASC,OAAQ,EAAE,GAAI,IAAKC,WAAS,GACrDJ,SEhDF,eAA8B,IAA3B1B,EAA0B,EAA1BA,aAA0B,EAChBtK,qBADgB,mBACnC5E,EADmC,KAC5BmP,EAD4B,KAG1C,OACE,oCACE,kBAAC8B,GAAD,CACEb,cAAe,SAAC9C,GACd6B,EAAS7B,MAGb,4BACEjG,UAAU,0BACVkB,QAAS,WACPvI,GAASkP,EAAalP,IAExBsI,WAAU,OAACtI,QAAD,IAACA,OAAD,EAACA,EAAOM,YAAaN,EAAMO,WALvC,YCKS,eAOO,IANpBjC,EAMmB,EANnBA,qBACAX,EAKmB,EALnBA,SACA2D,EAImB,EAJnBA,iBACApD,EAGmB,EAHnBA,KACAgT,EAEmB,EAFnBA,qBACAC,EACmB,EADnBA,wBAEMvS,EAASV,EAAKO,QAAQsC,MAAK,SAACuM,GAAD,OAAOA,EAAEzM,KAAOlD,KACjD,UAAIiB,QAAJ,IAAIA,OAAJ,EAAIA,EAAQC,OACV,OAAO,KAET,IAAMuS,GAAe9S,EAAqBQ,QAAQiC,MAChD,SAACf,GAAD,OAAWA,EAAMrC,WAAaA,KAG1B0T,EAA0B,SAACrR,IAC1BA,GAAmB,IAAVA,GAAiC,kBAAVA,IACnCqB,GACEC,EACApD,EACA,CACEiC,UAAWH,GAEbrC,GAEFwT,GAAwB,KAItBG,EAAuB,SAACC,GAI5BlQ,GAASC,EAAkBpD,EAHL,CACpBmC,IAAKkR,GAEiC5T,GACxCwT,GAAwB,IAc1B,OACE,kBAAC,GAAD,CACEjD,MAAM,eACNtF,QAAS,WACPuI,GAAwB,IAE1BK,OAAQ,SACRlN,KACE8M,GACAF,KACA,OAAC5S,QAAD,IAACA,OAAD,EAACA,EAAsBQ,QAAQiC,MAC7B,SAACf,GAAD,OAAWA,EAAMrC,WAAaA,MAGlC8T,QAAQ,cAER,oCACE,2BAAInT,EAAqBuB,SAASA,UA5BvB,WACf,OAAQvB,EAAqBuB,SAAS0G,MACpC,KAAK9J,EAAcyD,UACjB,OAAO,kBAACwR,GAAD,CAAaxC,aAAcmC,IACpC,KAAK5U,EAAc2D,IACjB,OAAO,kBAACuR,GAAD,CAAUzC,aAAcoC,IACjC,QACE,MAAM,IAAI9Q,MAAM,yBAsBfoR,MCtFHC,GAAa,imBAgBJ,eAAgD,IAA7CC,EAA4C,EAA5CA,aAAc3Q,EAA8B,EAA9BA,OAAQxD,EAAsB,EAAtBA,SAAsB,EACpCiH,mBAAS,IAD2B,mBACrDqH,EADqD,KAC/ChH,EAD+C,KAGtDiK,EAAe,WACnB4C,EAAa,CAAE7Q,UAAW,CAAEC,MAAO,CAAEC,SAAQ4Q,WAAY9F,OAG3D,OACE,kBAAC,GAAD,CACEiC,MAAM,cACNsD,OAAQ,SACRlN,MAAO3G,EACP8T,QAAQ,aACRpK,UAAU,UAEV,oCACE,2EACA,yBAAKA,UAAU,oBACb,2BACEC,MAAO2E,EACP1E,SAAU,SAACC,GACT,IAAMwK,EAAUxK,EAAExB,OAAOsB,MACnB2K,EAAQD,EAAQC,MAAMJ,IAC5B5M,EAAQgN,EAAQD,EAAUA,EAAQpG,UAAU,EAAG,KAEjDyD,QAAS,SAAC7H,GACQ,KAAZA,EAAE8H,OACJJ,KAGJ3I,KAAK,OACLc,UAAU,+BACVI,YAAY,0BACZC,aAAW,cACX6H,mBAAiB,eACjB3H,WAAS,IAEX,yBAAKP,UAAU,sBACb,4BACEd,KAAK,SACL+B,UAAW2D,EAAK7N,OAChBiJ,UAAU,kBACVkB,QAAS2G,GAJX,eClDG,eAA6D,IAA1DgD,EAAyD,EAAzDA,KAAM9B,EAAmD,EAAnDA,cAAe+B,EAAoC,EAApCA,WACrC,OACE,4BACE9K,UAAU,uBACVkB,QAAS6H,EACT9H,SAAU6J,GAETD,ICQQ,eAQD,IAAD,EAPXvR,EAOW,EAPXA,oBACAzC,EAMW,EANXA,KACAkU,EAKW,EALXA,YACA1R,EAIW,EAJXA,SACA/C,EAGW,EAHXA,SACA0U,EAEW,EAFXA,gBACAC,EACW,EADXA,mBAEMC,EAAexT,GAAsB4B,EAAqBhD,GAC1D6U,EAAc,UAAGtU,EAAKO,QAAQsC,MAAK,qBAAGF,KAAgBlD,YAAxC,aAAG,EAAgDqD,MAF5D,EAGiB4D,mBAAS2N,GAH1B,mBAGJvU,EAHI,KAGIyU,EAHJ,KAKLvD,EAAe,WACnBkD,EAAYpU,EAAQ0C,EAAUxC,EAAMP,GACpC2U,GAAmB,IAGrB,OACE,kBAAC,GAAD,CACEpE,MAAM,QACNsD,OAAQ,SACRlN,KAAM+N,EACNzJ,QAAS,WACP0J,GAAmB,IAErBb,QAAQ,YACRpK,UAAU,UAEV,oCACE,iDACA,yBAAKA,UAAU,oBACb,2BACEC,MAAOtJ,EACPuJ,SAAU,SAACC,GACTiL,EAAUtT,KAAKkM,MAAM+D,WAAW5H,EAAExB,OAAOsB,UAE3C+H,QAAS,SAAC7H,GACQ,KAAZA,EAAE8H,OACJJ,KAGJ3I,KAAK,SACLmM,QAAQ,QACRtR,IAAKmR,EACLnT,IAAKoT,EACLnL,UAAU,+BACVI,YAAY,kBACZC,aAAW,kBACX6H,mBAAiB,eACjB3H,WAAS,IAEX,yBAAKP,UAAU,sBACb,4BACEiB,WACIkK,IACDxU,EAASuU,GAAgBvU,EAASwU,GAErCnL,UAAU,kBACVkB,QAAS2G,GANX,YAYHsD,GACC,0BACEtJ,MAAO,CAAEgC,OAAQ,WACjB3C,QAAS,kBAAMkK,EAAUD,IACzBnL,UAAU,+CAHZ,aCnEK,eAMY,IALzBnJ,EAKwB,EALxBA,KACAI,EAIwB,EAJxBA,qBACAqC,EAGwB,EAHxBA,oBACAhD,EAEwB,EAFxBA,SACA+C,EACwB,EADxBA,SAEA,IAAKpC,IAAyBqC,EAC5B,OAAO,KAFe,MAKsBiE,oBAAS,GAL/B,mBAKjByN,EALiB,KAKAC,EALA,KAMlB1T,EAASV,EAAKO,QAAQsC,MAAK,SAACuM,GAAD,OAAOA,EAAEzM,KAAOlD,KAEjD,OACE,yBAAK0J,UAAU,iDACZ,CACC,CACE6K,KAAM,QACN9B,cAAe,YnB/BJ,SACnB1P,EACAxC,EACAP,GAEA,IAAMW,EAAuBL,EAAwBC,GAC/CyC,EAAsBtC,EAAuBC,GAEhDA,IACkB,OAAnBqC,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOlD,IAKvBoB,GAAsB4B,EAAqBhD,GAC7C,GAKnB+C,EAAS,CACPO,UAAW,CACTC,MAAO,CACLC,OAAQjD,EAAK2C,GACblD,SAAUA,EACVK,OAAQ,OmBOJ2U,CAAMjS,EAAUxC,EAAMP,IAExBwU,WAAYpT,GAAsB4B,EAAqBhD,GAAY,GAErE,CACEuU,KAAM,OACN9B,cAAe,YnBPL,SAClB1P,EACAxC,EACAP,GACI,IAAD,IACGW,EAAuBL,EAAwBC,GAC/CyC,EAAsBtC,EAAuBC,GACnD,GACGA,IACkB,OAAnBqC,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOlD,EAF5C,CAOA,IAAM4U,EAAexT,GAAsB4B,EAAqBhD,GAC1DmD,EAAa,oBACjB5C,EAAKO,QAAQsC,MAAK,qBAAGF,KAAgBlD,YADpB,aACjB,EAAgDqD,aAD/B,QACwC,EAE3DN,EAAS,CACPO,UAAW,CACTC,MAAO,CACLC,OAAQjD,EAAK2C,GACblD,SAAUA,EACVK,OAAQmB,KAAKiC,IAAImR,EAAczR,QmBf3B8R,CAAKlS,EAAUxC,EAAMP,IAEvBwU,WAAYpT,GAAsB4B,EAAqBhD,IAAa,GAEtE,CACEuU,KAAM,QACN9B,cAAe,WACbkC,GAAmB,IAErBH,YACQ,OAANvT,QAAM,IAANA,OAAA,EAAAA,EAAQoC,QACRjC,GAAsB4B,EAAqBhD,KAA3C,OACEiB,QADF,IACEA,OADF,EACEA,EAAQoC,QAEd,CACEkR,KAAM,OACN9B,cAAe,YnBuCL,SAClB1P,EACAxC,EACAP,GAEA,IAAMW,EAAuBL,EAAwBC,GAC/CyC,EAAsBtC,EAAuBC,GAEhDA,IACkB,OAAnBqC,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOlD,GAK5C+C,EAAS,CACPO,UAAW,CACTC,MAAO,CACLC,OAAQjD,EAAK2C,GACblD,SAAUA,EACVK,QAAS,MmBzDL6U,CAAKnS,EAAUxC,EAAMP,MAGzB0I,KAAI,SAACyM,GAAD,OACJ,kBAAC,GAAD,eACE3K,IAAK2K,EAAkBZ,MACnBY,EAFN,CAGEX,WACEW,EAAkBX,aACC,OAAnBxR,QAAmB,IAAnBA,OAAA,EAAAA,EAAqBC,cAAcC,MAAOlD,IACzCa,EAA+BF,EAAsBJ,EAAKO,eAIjE,kBAACsU,GACK,CACF7U,OACAwC,WACA/C,WACAgD,sBACAyR,YAAa3R,GACb4R,kBACAC,yBCpFJpO,GAAS,CACbiK,SAAU,SAUG,eAKE,IAJf7P,EAIc,EAJdA,qBACAqC,EAGc,EAHdA,oBACAhD,EAEc,EAFdA,SACAqV,EACc,EADdA,sBACc,EACgBA,EAC1B,CAAC,EAAG,GACJ1U,EAAqBC,cAAcV,QACjC,WAAuBoV,GAAQ,IAAD,mBAA5BC,EAA4B,KAArBC,EAAqB,KAO5B,OANAF,EAAGrV,KAAKkP,SAAQ,SAAC/O,GACfmV,GAASnV,EAAIC,OACTD,EAAIJ,WAAaA,IACnBwV,GAAepV,EAAIC,WAGhB,CAACkV,EAAOC,KAEjB,CAAC,EAAG,IAbI,mBACPC,EADO,KACGC,EADH,KAeRd,EAAeS,EACjB,EACAjU,GAAsB4B,EAAqBhD,GAC/C,OACE,yBACE0J,UAAU,2DACV6B,MAAOhF,IAEP,iDACmB,IACjB,0BAAM+J,KAAK,MAAMvG,aAAW,SAA5B,gBAGC0L,EALH,IAKcC,GAEd,yCACW,IACT,0BAAMpF,KAAK,MAAMvG,aAAW,SAA5B,gBAGC6K,KClCM,I,OAAA,YAOK,IANlBrU,EAMiB,EANjBA,KACAI,EAKiB,EALjBA,qBACAqC,EAIiB,EAJjBA,oBACAhD,EAGiB,EAHjBA,SACA+C,EAEiB,EAFjBA,SACA4S,EACiB,EADjBA,UAEMN,GACA,OAAJ9U,QAAI,IAAJA,OAAA,EAAAA,EAAM0B,SACL1B,GACCA,EAAKC,eAAeC,OAAS,KAC7B,OAACE,QAAD,IAACA,OAAD,EAACA,EAAsBQ,QAAQiC,MAC7B,SAACf,GAAD,OAAWA,EAAMrC,WAAaA,MAGpC,OACE,yBAAK0J,UAAU,UACb,yBAAKA,UAAU,mBACXnJ,EAAKC,eAAeC,QACpB,4BACEiJ,UAAU,sCACViB,SAAUpK,EAAKO,QAAQL,QAAU,EACjCmK,QAAS,WACP+K,EAAU,CACRrS,UAAW,CAAEE,OAAQjD,EAAK2C,QALhC,cAYDvC,GAAwBqC,GAAuBhD,GAC9C,oCACE,kBAAC4V,GAAD,CACE5V,SAAUA,EACVW,qBAAsBA,EACtBqC,oBAAqBA,EACrBqS,sBAAuBA,IAEzB,kBAACQ,GACK,CACFtV,OACAI,uBACAqC,sBACAD,WACA/C,kB,mDCjDD,eAA+D,IAA5DwD,EAA2D,EAA3DA,OAAQxD,EAAmD,EAAnDA,SAAU8V,EAAyC,EAAzCA,eAAgBC,EAAyB,EAAzBA,YAAyB,EACnDC,IAAM/O,UAAS,GADoC,mBACpEN,EADoE,KAC9DsP,EAD8D,OAEpDrO,YACrBnI,EACA,CACEwI,QAASC,EACTJ,YAAa,WACPtE,KhBf6B,SAACA,GACxC0K,aAAagI,WAAb,UAXoB,YAWpB,YAA4C1S,IgBepC2S,CAA0B3S,GAC1BuS,OAAY/N,OAPboO,EAFoE,oBAe3E,IAAK5S,IAAWxD,EACd,OAAO,KAGT,IAIM4G,EAAc,WAClBqP,GAAQ,IAQV,OACE,oCACE,4BACE/S,GAAG,aACHwG,UAAU,sBACVkB,QAlBkB,WACtBqL,GAAQ,KAmBJ,kBAAC,KAAD,OAEF,kBAACI,GAAA,EAAD,CAAQ1P,KAAMA,EAAMsE,QAASrE,GAC3B,yBAAK8C,UAAU,aACb,kBAAC4M,GAAA,EAAD,qBAEGR,GACC,mFAGJ,kBAACS,GAAA,EAAD,KACE,4BAAQ7M,UAAU,uBAAuBkB,QAAShE,GAAlD,UAGA,4BAAQ8C,UAAU,kBAAkBkB,QA1BxB,WACpBwL,EAAa,CAAE9S,UAAW,CAAEtD,WAAUwD,YACtCyS,GAAQ,KAwBA,mBCtDG,eAKD,IAAD,EAJXlH,EAIW,EAJXA,kBACAC,EAGW,EAHXA,YACAhP,EAEW,EAFXA,SACAc,EACW,EADXA,QAEMwB,EAAY,OAAGyM,QAAH,IAAGA,OAAH,EAAGA,EAAmB7M,SAAS0G,KACjD,IAAKmG,GAAqBzM,IAAiBxD,EAAc2D,IACvD,OAAO,KAGT,IAAM+T,EAAW,OAAGzH,QAAH,IAAGA,GAAH,UAAGA,EAAmB5N,QAAQiC,MAC7C,SAACqT,GAAD,OAAOA,EAAEzW,WAAaA,YADP,aAAG,EAEjBqC,MAAMK,IAELgU,EAAuBF,EACvB,CAAC,CAAEzE,SAAUyE,EAAavD,MAAO,QACjC,GAiCJ,OA9BEjE,IACkB,OAAjBD,QAAiB,IAAjBA,OAAA,EAAAA,EAAmB9M,UAAnB,OAA6B8M,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAmBmB,cAEjDwG,EAAW3O,KAAX,MAAA2O,EAAU,mBACL3H,QADK,IACLA,OADK,EACLA,EAAmB5N,QAAQjB,QAC5B,SAACqB,EAAD,GAAoC,IAA5Bc,EAA2B,EAA3BA,MAAiBsU,EAAU,EAApB3W,SACb,GACEqC,EAAMK,KACN1C,IAAa2W,IACZ3H,IAAgBpN,GAAgBmN,EAAmB4H,IACpD,CAAC,IAAD,EACM1D,GAAQ,UAAAnS,EAAQsC,MAAK,SAACuM,GAAD,OAAOA,EAAEzM,KAAOyT,YAA7B,eAAmCrI,OAAQ,GACzD/M,EAAIwG,KAAK,CAAEgK,SAAU1P,EAAMK,IAAKuQ,UAElC,OAAO1R,IAET,MAKJQ,GAAgBgN,IAChBA,EAAkB7M,SAAS4G,OAAOpG,KAElCgU,EAAW3O,KAAK,CACdgK,SAAUhD,EAAkB7M,SAAS4G,OAAOpG,IAC5CuQ,MAAO,mBAIJ,kBAACK,GAAD,CAAKd,QAASkE,K,OV0MRE,OAnOf,WAA0B,IAAD,EACS3P,wBAA6Be,GADtC,mBAChBhI,EADgB,KACN+V,EADM,OAEC9O,wBAA2Be,GAF5B,mBAEhBzH,EAFgB,KAEVsW,EAFU,KAGjBlW,EAAuBL,EAAwBC,GAC/CyC,EAAsBtC,EAAuBC,GAJ5B,EAKiCsG,oBAAS,GAL1C,mBAKhBsM,EALgB,KAKMC,EALN,OASnBvM,oBAAS,GATU,mBAOrB6P,EAPqB,KAQrBC,EARqB,KAUfvT,EAAWkI,cAAXlI,OAVe,EAWKyD,qBAXL,mBAWhB+P,EAXgB,KAWRC,EAXQ,OAYIC,aACzBC,EAAQ,MADHC,EAZgB,sBAeHF,aAASC,EAAQ,MAA9BE,EAfgB,oBAiBjBjL,EAAe,SAAC1M,GACpBwI,EAAYxI,GACZuX,EAAUvX,IAnBW,EAsBH4M,YAA6BnN,EAAgB,CAC/DoN,YAAa,oBACbtE,QAASmE,EACTtE,YAAa,YAAe,IAAZvH,EAAW,EAAXA,KACdsW,EAAQtW,MAJL+W,EAtBgB,sBA8ByB1P,YAE7CvI,EAAe,CAChB4I,QAASmE,IAjCY,mBA8BhB+H,EA9BgB,KA8BMoD,EA9BN,KA8BAnQ,KA9BA,EAoCHQ,YAEjBtI,EAAY,CAAE2I,QAASmE,IAFnBuJ,EApCgB,sBAwCJ/N,YAEhBrI,EAAW,CAAE0I,QAASmE,IAFlBrJ,EAxCgB,uBA4CJ6E,YAEhBpI,EAAW,CAAEyI,QAASmE,IAFlB1I,GA5CgB,qBAgDR8T,GAAsBC,YAElCrY,EAAyB,CAC1BkE,UAAW,CACTE,SACAkU,KACEtJ,GAA0B5K,IAAWsK,GAAwBtK,IAEjEmU,mBAAoB,YAA2B,IAAD,MAAvBC,EAAuB,EAAvBA,iBACrBC,cAActF,IACdsE,EAAO,UAACe,EAAiBxQ,YAAlB,aAAC,EAAuB0Q,aAC/B,IAAMC,EAAMzX,EAAuB,UAACsX,EAAiBxQ,YAAlB,aAAC,EAAuB0Q,aACrDE,EAAMtX,EAAuBqX,GAC7BjX,EAAO,UAAG8W,EAAiBxQ,YAApB,aAAG,EAAuB0Q,YAAYhX,QAC7CmX,EACJF,GAAOjX,GAAWD,EAA+BkX,EAAKjX,GACpDmX,GACFlB,GAAoC,IAE/B,OAAHiB,QAAG,IAAHA,OAAA,EAAAA,EAAK/U,cAAcC,MAAOlD,GAAYiY,IACxCb,IACA/J,OAAO6K,UAAUC,QAAQ,KACzB5F,GAAgB6F,aAAY,WAC1Bf,IACAhK,OAAO6K,UAAUC,QAAQ,OACxB,UAzBDvY,MA0DR,GA5BA6M,qBAAU,WACJ+K,IACFpL,EAAaoL,MAEd,CAACA,KAEJ/K,qBAAU,WACR6K,EAAU,CACRhU,UAAW,CAAEE,cAEd,CAAC8T,EAAW9T,IAEfiJ,qBAAU,WACR,GAAIjJ,EAAQ,CAAC,IAAD,EACJ6U,EP/H0B,SAAC7U,GAAD,OACpC0K,aAAaG,QAAb,UARoB,YAQpB,YAAyC7K,IO8Hd8U,CAAuB9U,GACxC+U,EAAW,OAAGhB,QAAH,IAAGA,GAAH,UAAGA,EAAeiB,iBAAlB,aAAG,EAA0BtV,GAE1CmV,GACFtC,EAAYsC,GAGVE,KP1I0B,SAAC/U,EAAgBxD,GACnDkO,aAAaC,QAAb,UAJoB,YAIpB,YAAyC3K,GAAUxD,GO0I7CyY,CAAqBjV,EAAQ+U,GAC7BxC,EAAYwC,OAGf,CAAC/U,EAAQ+T,KAEPhX,EACH,OAAO,0CAGT,GAAIyW,EACF,OAAO,kFAGT,IAAM/V,GAASV,EAAKO,QAAQsC,MAAK,SAACuM,GAAD,OAAOA,EAAEzM,KAAOlD,KAC3C0Y,GAAiC,OAAG/X,QAAH,IAAGA,OAAH,EAAGA,EAAsBQ,QAAQiC,MACtE,SAACf,GAAD,OAAWA,EAAMrC,WAAaA,KAE1B8V,KAAmBvV,EAAKC,eAAeC,OACvCuO,GAAc8G,MAAoB7U,IAAUA,GAAOC,QACnDyX,KAA+CD,GAC/CE,Gd7IgC,SAACrY,GAAD,oBACtCA,QADsC,IACtCA,OADsC,EACtCA,EAAMC,gBAAmB,OAAJD,QAAI,IAAJA,GAAA,UAAAA,EAAMC,sBAAN,eAAsBC,SAAUF,EAAK0B,OAAS,EAAI,Ic4IzC4W,CAAyBtY,GASjDwO,KAPF6J,KACDrY,EAAK0B,SACF0W,KAA+C3J,IAChDA,MACGrO,IACDmW,IACAjW,EAA+BF,EAAsBJ,EAAKO,UAE7D8X,GACAjY,EAEJ,OACE,oCACE,yBACE+I,UAAU,YACV6B,MAAO,CAAEuN,WAAY,IAAKC,cAAe,UAEzC,6BACGhK,IACC,kBAACiK,GACK,CACFzY,OACAwO,qBACA/O,aAIN,kBAACiZ,GACK,CACFlK,qBACAC,eACAhP,WACAc,QAASP,EAAKO,WAIpB,yBAAK4I,UAAU,sBACb,kBAACwP,GACK,CACFpY,QAAO,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAMO,QACfd,WACA+O,qBACA/L,sBACAgM,eACAzO,WAIJgT,IACCoF,KACA3J,IACC,4BACEtF,UAAU,mDACVkB,QAAS,WACP4I,GAAwB,KAH5B,uBASHxE,KAAW,OAAID,SAAJ,IAAIA,QAAJ,EAAIA,GAAmB9M,SACjC,4BACEyH,UAAU,iDACVkB,QAAS,WACPmM,GAAoC,KAHxC,uBAUHpW,GAAwBX,GACvB,kBAACmZ,GACK,CACF5Y,OACAoD,iBAAkBD,GAClB/C,uBACAX,WACAuT,uBACAC,6BAIJjT,EAAK0B,SAAW+M,IAChB,kBAACoK,GACK,CACF7Y,OACAI,uBACAqC,sBACAD,WACA/C,WACA2V,eAIJG,IACA,kBAACuD,GAAoB,CAAE7V,SAAQ2Q,eAAcnU,aAG/C,kBAACsZ,GAAoB,CAAE9V,SAAQxD,WAAU8V,kBAAgBC,kB,OWjQ/D,SAASwD,KACP,OAAO,8CAmBMC,OAhBf,WACE,OACE,yBAAKtW,GAAG,MAAMwG,UAAU,qBACtB,uBAAGnB,KAAK,IAAIrF,GAAG,QAAQwG,UAAU,iBAAjC,mBAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+P,KAAK,IAAIC,UAAWlO,GAAOmO,OAAK,IACvC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,GAAMD,OAAK,IAC7C,kBAAC,IAAD,CAAOF,KAAK,sBAAsBC,UAAWlO,GAAOmO,OAAK,IACzD,kBAAC,IAAD,CAAOD,UAAWH,QCTNrQ,QACW,cAA7BmE,OAAO1B,SAASkO,UAEe,UAA7BxM,OAAO1B,SAASkO,UAEhBxM,OAAO1B,SAASkO,SAASvF,MACvB,2DCjBC,IAAMwF,GACXC,oCCcIC,GAAW,IAAIC,IAAS,CAC5BC,IAAI,OAAD,OAASJ,GAAT,YAICK,GAAS,IAAIC,IAAc,CAC/BF,IAAI,KAAD,OAAOJ,GAAP,UACHO,QAAS,CACPC,WAAW,KAITC,GAAOC,aAEX,YAAgB,IAAbC,EAAY,EAAZA,MAAY,EACeC,YAC1BD,GADME,EADK,EACLA,KAAMC,EADD,EACCA,UAGd,MAAgB,wBAATD,GAAgD,iBAAdC,IAE3CT,GACAH,IAGIa,GAAS,IAAIC,IAAa,CAC9BP,QACAQ,MAAO,IAAIC,MAGbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBN,OAAQA,IACtB,kBAAC,IAAD,KACE,kBAAC,GAAD,SAINO,SAASC,eAAe,SFsFpB,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/b,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.d1be246a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/turn-notification.15b0efd7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/turn-alert.3a60f09f.wav\";","import { gql } from \"apollo-boost\";\nimport { Game, Player } from \"../interfaces\";\n\nexport const CREATE_GAME_QUERY = gql`\n  mutation createGame($setNames: [String!]!) {\n    createGame(setNames: $setNames) {\n      id\n    }\n  }\n`;\n\nexport const UPLOAD_QUESTION_SET = gql`\n  mutation uploadQuestions(\n    $questions: [QuestionInput!]!\n    $setName: String!\n    $isPrivate: Boolean!\n    $language: String!\n  ) {\n    uploadQuestions(\n      questions: $questions\n      setName: $setName\n      isPrivate: $isPrivate\n      language: $language\n    )\n  }\n`;\n\nexport const GET_SETS_QUERY = gql`\n  query sets($setName: String) {\n    sets(setName: $setName) {\n      setName\n      numberOfQuestions\n      language\n    }\n  }\n`;\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!, $hash: String!) {\n    gameUpdated(gameId: $gameId, hash: $hash) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          question\n          explanation\n          type\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess {\n            numerical\n            geo {\n              latitude\n              longitude\n            }\n          }\n          playerId\n        }\n        results {\n          playerId\n          changeInMoney\n        }\n        isOver\n        isShowdown\n      }\n      players {\n        id\n        money\n        name\n        isDead\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId)\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input)\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input)\n  }\n`;\n\nexport interface RemovePlayerVariables {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n}\nexport const REMOVE_PLAYER = gql`\n  mutation removePlayer($gameId: ID!, $playerId: ID!) {\n    removePlayer(gameId: $gameId, playerId: $playerId)\n  }\n`;\n","export enum QuestionTypes {\n  GEO = \"GEO\",\n  NUMERICAL = \"NUMERICAL\",\n  MULTIPLE_CHOICE = \"MULTIPLE_CHOICE\",\n  DATE = \"DATE\",\n}\n\nexport interface GeoCoordinate {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface Player {\n  id: string;\n  money: number;\n  name: string;\n  isDead: boolean;\n}\n\nexport interface Answer {\n  numerical?: number;\n  geo?: GeoCoordinate;\n}\n\nexport interface Question {\n  id: string;\n  type: QuestionTypes;\n  question: string;\n  answer: Answer;\n  hints: string[];\n  explanation?: string;\n}\n\nexport interface Guess {\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\ninterface Bet {\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface BettingRound {\n  bets: Bet[];\n  currentPlayer: Player;\n}\n\ninterface QuestionRoundResult {\n  playerId: Player[\"id\"];\n  changeInMoney: number;\n}\n\nexport interface QuestionRound {\n  question: Question;\n  guesses: Guess[];\n  bettingRounds: BettingRound[];\n  foldedPlayerIds: Player[\"id\"][];\n  results?: QuestionRoundResult[];\n  isOver: boolean;\n  isShowdown: boolean;\n}\n\nexport interface Game {\n  id: string;\n  players: Player[];\n  questionRounds: QuestionRound[];\n  dealerId: Player[\"id\"];\n  questions: Omit<Question, \"question\" | \"answer\" | \"hints\">[];\n  isOver: boolean;\n}\n\nexport interface BetInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  amount: number;\n}\n\nexport interface GuessInput {\n  gameId: Game[\"id\"];\n  playerId: Player[\"id\"];\n  guess: Answer;\n}\n\nexport interface Set {\n  setName: string;\n  numberOfQuestions: number;\n  language: string;\n}\n","export default (err: Error) => {\n  console.error(err.message);\n};\n","import {\n  QuestionRound,\n  Player,\n  Game,\n  BettingRound,\n  QuestionTypes,\n  Answer,\n} from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getPreviousQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - (game.isOver ? 1 : 2)];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter((player) => !player.isDead);\n  return currentQuestionRound.guesses.length >= remainingPlayers.length;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasPlayerFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n\nexport const getRevealAnswer = (questionRound: QuestionRound) =>\n  questionRound.isOver ||\n  questionRound.question.hints.length + 1 < questionRound.bettingRounds.length;\n\nexport const getGuess = (guess: Answer, questionType?: QuestionTypes) => {\n  if (!guess) return;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return guess.numerical;\n    case QuestionTypes.GEO:\n      return `[${guess.geo?.latitude}, ${guess.geo?.longitude}]`;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import { Player, Game, GuessInput, Answer } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: Answer,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","const countryListAlpha2 = {\n  GB: \"English\",\n  FR: \"French\",\n  ES: \"Spainish\",\n  CN: \"Chinese\",\n  DE: \"German\",\n  ZA: \"Africaans\",\n  AL: \"Albanian\",\n  DZ: \"Algerian\",\n  SA: \"Arab\",\n  AM: \"Armenian\",\n  BD: \"Bangladeshi\",\n  BG: \"Bulgarian\",\n  KH: \"Cambodian\",\n  HR: \"Croatian\",\n  CZ: \"Czech\",\n  DK: \"Danish\",\n  NL: \"Dutch\",\n  EE: \"Estonian\",\n  FI: \"Finnish\",\n  GR: \"Greek\",\n  IL: \"Hebrew\",\n  HU: \"Hungarian\",\n  IN: \"Indian\",\n  IT: \"Italian\",\n  JP: \"Japanese\",\n  KR: \"Korean\",\n  LV: \"Latvian\",\n  LT: \"Lithuanian\",\n  MY: \"Malaysian\",\n  MN: \"Mongolian\",\n  NO: \"Norwegian\",\n  PL: \"Polish\",\n  BR: \"Portuguese\",\n  RO: \"Romanian\",\n  RU: \"Russian\",\n  RS: \"Serbian\",\n  SK: \"Slovakian\",\n  SI: \"Slovenian\",\n  SE: \"Swedish\",\n  TH: \"Thai\",\n  TR: \"Turkish\",\n  VN: \"Vietnamese\",\n};\n\nexport default countryListAlpha2;\n","import React, { useState } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Backdrop } from \"@material-ui/core\";\nimport { CSVReader } from \"react-papaparse\";\nimport { useMutation } from \"react-apollo\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { UPLOAD_QUESTION_SET } from \"../../../api/queries\";\nimport { QueryLazyOptions } from \"@apollo/react-hooks\";\nimport { useHistory } from \"react-router-dom\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { getGuess } from \"../../Game/helpers\";\nimport countryCodes from \"../../../assets/countryCodes\";\n\nconst styles = {\n  card: {\n    maxHeight: \"95vh\",\n  },\n};\n\ninterface CSVDataRow {\n  question: string;\n  type: QuestionTypes;\n  answer?: number;\n  latitude?: number;\n  longitude?: number;\n  hint1?: string;\n  hint2?: string;\n  explanation?: string;\n}\n\ninterface Props {\n  open: boolean;\n  handleClose: () => void;\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n  setSelectedSets: React.Dispatch<React.SetStateAction<string[]>>;\n}\n\nfunction UploadModal({ open, handleClose, fetchSets, setSelectedSets }: Props) {\n  const history = useHistory();\n  const [showCSVInput, setShowCSVInput] = useState(true);\n  const [data, setData] = useState<Omit<Question, \"id\">[]>();\n  const [setName, setSetName] = useState(\"\");\n  const [isPrivate, setIsPrivate] = useState<0 | 1>(0);\n  const [language, setLanguage] = useState<string>();\n\n  const [uploadQuestions, { error }] = useMutation(UPLOAD_QUESTION_SET, {\n    variables: {\n      setName,\n      questions: data,\n      isPrivate: !!isPrivate,\n      language,\n    },\n    onCompleted: () => {\n      if (isPrivate) {\n        history.push(`/questions/${setName}`);\n      } else {\n        fetchSets();\n      }\n      setSelectedSets([setName]);\n      handleClose();\n      setSetName(\"\");\n      setData(undefined);\n      setShowCSVInput(true);\n    },\n    onError: errorLogger,\n  });\n\n  const handleOnDrop = (rows: { data: CSVDataRow }[]) => {\n    setShowCSVInput(false);\n    setData(\n      rows.map((row) => {\n        const {\n          question,\n          type,\n          answer: numericalAnswer,\n          latitude,\n          longitude,\n          hint1,\n          hint2,\n          explanation,\n        } = row.data;\n        const hints = [hint1, hint2].filter(Boolean) as string[];\n        const answer: Answer = {};\n        if (numericalAnswer || numericalAnswer === 0) {\n          answer.numerical = numericalAnswer;\n        } else if (\n          (latitude || latitude === 0) &&\n          (longitude || longitude === 0)\n        ) {\n          answer.geo = { latitude, longitude };\n        }\n        return {\n          question,\n          type,\n          answer,\n          hints,\n          explanation,\n        };\n      })\n    );\n  };\n\n  const handleOnError = (err: any, file: any, inputElem: any, reason: any) => {\n    console.error(err);\n  };\n\n  const content = showCSVInput ? (\n    <>\n      <p>\n        An example of the file format can be found{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://docs.google.com/spreadsheets/d/1_cUrvCc3R2qTL_ME-A9wc9HmyH-zoAQkRnBs80dOPb8/edit?usp=sharing\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <CSVReader\n        onDrop={handleOnDrop}\n        onError={handleOnError}\n        config={{ header: true }}\n        addRemoveButton\n        removeButtonColor=\"#659cef\"\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    </>\n  ) : (\n    <>\n      <div className=\"input-group mb-2\">\n        <input\n          value={setName}\n          onChange={(e) => {\n            setSetName(e.target.value);\n          }}\n          type=\"text\"\n          className=\"form-control form-control-lg\"\n          placeholder=\"Name for the question set\"\n          aria-label=\"Name for the question set\"\n          required\n          autoFocus\n        />\n      </div>\n      <div className=\"input-group mb-3\">\n        <select\n          className=\"custom-select\"\n          value={language}\n          onChange={(e) => {\n            setLanguage(e.target.value);\n          }}\n        >\n          <option selected>Language...</option>\n          {Object.keys(countryCodes).map((code) => (\n            <option value={code}>\n              {countryCodeToFlagEmoji(code)}{\" \"}\n              {countryCodes[code as keyof typeof countryCodes]}\n            </option>\n          ))}\n        </select>\n      </div>\n      <h3>Review your upload:</h3>\n      <hr />\n      {(data || []).map((q) => (\n        <div key={q.question} className=\"small\">\n          <p>\n            Question: <b>{q.question}</b>\n          </p>\n          <p>\n            Answer: <b>{getGuess(q.answer, q.type)}</b>\n          </p>\n          {q.hints?.length && (\n            <p>\n              Hints:{\" \"}\n              {q.hints.map((h: string) => (\n                <>\n                  <br />\n                  <span key={h}>\n                    <b>{h}</b>\n                  </span>\n                </>\n              ))}\n            </p>\n          )}\n          {q.explanation && (\n            <p>\n              Explanation: <b>{q.explanation}</b>\n            </p>\n          )}\n          <hr />\n        </div>\n      ))}\n      <div className=\"form-check\">\n        <input\n          type=\"checkbox\"\n          className=\"form-check-input mt-2\"\n          id=\"isPrivateCheckbox\"\n          value={isPrivate}\n          onChange={() => {\n            setIsPrivate(isPrivate ? 0 : 1);\n          }}\n        />\n        <label className=\"form-check-label\" htmlFor=\"isPrivateCheckbox\">\n          Questions are private\n          <br />\n          <span>\n            If checked, this set of questions will not appear in the list on the\n            start screen.\n          </span>\n        </label>\n      </div>\n      <button\n        className=\"btn btn-primary\"\n        disabled={!setName}\n        onClick={() => {\n          uploadQuestions();\n        }}\n      >\n        Submit\n      </button>\n      <button\n        className=\"btn btn-outline-dark ml-3\"\n        onClick={() => {\n          setShowCSVInput(true);\n        }}\n      >\n        Upload new file\n      </button>\n    </>\n  );\n\n  return (\n    <Modal\n      disablePortal\n      disableEnforceFocus\n      disableAutoFocus\n      open={open}\n      className=\"d-flex justify-content-center align-items-center p-5\"\n      onClose={handleClose}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <div className=\"card\" style={styles.card}>\n        <div className=\"card-body text-dark overflow-auto\">\n          <h3>Upload a CSV file with custom questions</h3>\n          {content}\n          {error && <div className=\"alert alert-danger\">{error.message}</div>}\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UploadModal;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { Game, Set } from \"../../interfaces\";\nimport { CREATE_GAME_QUERY, GET_SETS_QUERY } from \"../../api/queries\";\nimport errorHandler from \"../../api/errorHandler\";\nimport UploadModal from \"./UploadModal\";\n\nimport \"./styles.scss\";\n\nfunction Lobby() {\n  const { setName } = useParams<{ setName: string }>();\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n  const [fetchSets, { data: sets }] = useLazyQuery<{\n    sets: Set[];\n  }>(GET_SETS_QUERY, {\n    fetchPolicy: \"no-cache\",\n    onError: errorHandler,\n    variables: { setName },\n  });\n\n  useEffect(() => {\n    fetchSets();\n  }, [fetchSets, setName]);\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  const languages =\n    sets?.sets\n      .reduce<string[]>((uniqueLanguages, s) => {\n        if (!uniqueLanguages.includes(s.language)) {\n          uniqueLanguages.push(s.language);\n        }\n        return uniqueLanguages;\n      }, [])\n      .sort((a, b) => {\n        if (a === \"GB\") {\n          return -1;\n        }\n        return parseInt(a) - parseInt(b);\n      }) || [];\n\n  return (\n    <>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <p className=\"mt-3\">\n          Start by selecting one or more sets of trivia questions or upload your\n          own{\" \"}\n          <button\n            className=\"btn btn-link p-0\"\n            onClick={() => {\n              setIsUploadModalOpen(true);\n            }}\n          >\n            here ⤴\n          </button>\n          .\n        </p>\n      )}\n      <div className=\"d-flex my-3\">\n        {languages.map((language) => (\n          <span\n            key={language}\n            className={`language mx-1 ${\n              language === shownLanguage ? \"\" : \"text-black-50\"\n            }`}\n            onClick={() => {\n              setShownLanguage(language);\n            }}\n            style={{\n              cursor: language === shownLanguage ? \"default\" : \"pointer\",\n            }}\n          >\n            {countryCodeToFlagEmoji(language)}\n          </span>\n        ))}\n      </div>\n      <div className=\"set-container my-4\">\n        {sets?.sets\n          .filter((s) => s.language === shownLanguage)\n          .map((set) => (\n            <span\n              key={set.setName}\n              className={`set badge border-light ${\n                selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n              } ${setName ? \"mr-auto\" : \"\"}`}\n              style={{\n                gridColumn: `span ${Math.round(\n                  Math.pow(set.setName.length, 0.35)\n                )}`,\n              }}\n              onClick={(e) => {\n                if (setName) {\n                  return;\n                }\n                if (e.metaKey) {\n                  if (selectedSets?.includes(set.setName)) {\n                    setSelectedSets(\n                      selectedSets.filter((setName) => set.setName !== setName)\n                    );\n                  } else {\n                    setSelectedSets([set.setName, ...selectedSets]);\n                  }\n                } else {\n                  setSelectedSets([set.setName]);\n                }\n              }}\n            >\n              {set.setName} ({set.numberOfQuestions})\n            </span>\n          ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </>\n  );\n}\n\nexport default Lobby;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface Props {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  showPreviousQuestionRoundResults: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n  showPreviousQuestionRoundResults,\n}: Props) => {\n  const isPlayerTurn =\n    !showPreviousQuestionRoundResults &&\n    !gameIsOver &&\n    currentBettingRound?.currentPlayer.id === id;\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span className={isPlayerTurn && size === Size.lg ? \"tada\" : \"\"}>\n        {name}\n      </span>\n      {isPlayerTurn && <span className=\"turn\">{\">\"}</span>}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","const PLAYER_ID_KEY = \"player_id\";\nconst FINGERPRINT_KEY = \"fingerprint\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const deletePlayerIdFromStorage = (gameId: string) =>\n  localStorage.removeItem(`${PLAYER_ID_KEY}_${gameId}`);\n\nexport const setFingerprintToStorage = (gameId: string) => {\n  const value = Math.random().toString(36).substring(2);\n  localStorage.setItem(`${FINGERPRINT_KEY}_${gameId}`, value);\n  return value;\n};\n\nexport const getFingerprintFromStorage = (gameId: string) =>\n  localStorage.getItem(`${FINGERPRINT_KEY}_${gameId}`);\n","import React from \"react\";\nimport {\n  hasPlayerFolded,\n  calculateBettingRoundSpendingForPlayer,\n  getGuess,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  usedQuestionRound?: QuestionRound;\n  game: Game;\n  isSpectator: boolean;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  usedQuestionRound,\n  game,\n  isSpectator,\n}: PlayerTableProps) => {\n  if (!players.length) {\n    return null;\n  }\n  if (game.isOver) {\n    // todo: check if this changes the order of the player list after the game is over\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  if (playerId) {\n    players = moveAppPlayerToTop(players, playerId);\n  }\n\n  let guesses: { [key: string]: Guess[\"guess\"] };\n  if (usedQuestionRound) {\n    guesses = usedQuestionRound?.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  let winningPlayerIds: Player[\"id\"][];\n  if (game.isOver) {\n    winningPlayerIds = players\n      .reduce(\n        (winners, player, i) => {\n          if (i === 0) return winners;\n          if (winners[0].money < player.money) {\n            return [player];\n          }\n          if (winners[0].money === player.money) {\n            return [...winners, player];\n          }\n          return winners;\n        },\n        [players[0]]\n      )\n      .map((p) => p.id);\n  }\n  const questionType = usedQuestionRound?.question.type;\n\n  return (\n    <>\n      {players.map(({ id, money, name, rank, isDead }, i) => {\n        const hasFolded =\n          usedQuestionRound && hasPlayerFolded(usedQuestionRound, id);\n        const moneyDiff = usedQuestionRound?.results?.find(\n          ({ playerId }) => id === playerId\n        )?.changeInMoney;\n        const bettingRoundSpending = currentBettingRound\n          ? calculateBettingRoundSpendingForPlayer(currentBettingRound, id)\n          : 0;\n        const revealGuess =\n          isSpectator ||\n          (!!usedQuestionRound?.isOver &&\n            usedQuestionRound?.isShowdown &&\n            !hasFolded);\n        const guess = guesses && getGuess(guesses[id], questionType);\n\n        return (\n          <div key={id} className=\"d-flex align-items-center pb-4 ml-4\">\n            {game.isOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded: hasFolded,\n                gameIsOver: game.isOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 && playerId ? Size.lg : Size.md,\n                showPreviousQuestionRoundResults: !!usedQuestionRound?.isOver,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || hasFolded) && !usedQuestionRound?.isOver\n                  ? \"dead\"\n                  : \"\"\n              }`}\n            >\n              {questionType === QuestionTypes.NUMERICAL &&\n                (revealGuess ? (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡 {guess}\n                  </span>\n                ) : (\n                  guesses && (\n                    <span role=\"img\" aria-label=\"answer\">\n                      💡{\" \"}\n                      <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                        {!guess && guess !== 0\n                          ? null\n                          : id === playerId\n                          ? guess\n                          : 432}\n                      </span>\n                    </span>\n                  )\n                ))}\n              <div className=\"d-flex\">\n                <span role=\"img\" aria-label=\"money\">\n                  💰\n                  {money +\n                    (usedQuestionRound?.isOver && !game.isOver\n                      ? bettingRoundSpending\n                      : 0)}\n                </span>\n                {!usedQuestionRound?.isOver && !!bettingRoundSpending && (\n                  <span className=\"ml-4\">{bettingRoundSpending * -1}</span>\n                )}\n                {usedQuestionRound?.isOver && moneyDiff && (\n                  <span\n                    className={`ml-2 ${\n                      moneyDiff > 0 ? \"text-success\" : \"text-danger\"\n                    }`}\n                  >\n                    {moneyDiff}\n                  </span>\n                )}\n              </div>\n            </div>\n            {winningPlayerIds?.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !game.isOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getGuess, getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.bettingRounds.length <= 1 && !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div className=\"mb-4\">\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {usedQuestionRound.question.type !== QuestionTypes.GEO &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                {getGuess(\n                  usedQuestionRound.question.answer,\n                  usedQuestionRound.question.type\n                )}\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex justify-content-center\" id=\"drawer-title\">\n          <span className={onClose ? \"ml-auto\" : \"\"}>{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  useMapEvents,\n  Tooltip,\n} from \"react-leaflet\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n}\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position === null ? null : <Marker position={position} />;\n}\n\nexport default ({ markers, handleOnClick }: Props) => {\n  return (\n    <MapContainer\n      center={[0, 0]}\n      zoom={1}\n      scrollWheelZoom={true}\n      className=\"mb-5\"\n    >\n      <TileLayer\n        attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n      />\n      {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n      {markers?.length &&\n        markers.map(({ position, label }) => (\n          <Marker\n            position={[position.latitude, position.longitude]}\n            key={position.latitude}\n          >\n            {label && (\n              <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                {label}\n              </Tooltip>\n            )}\n          </Marker>\n        ))}\n    </MapContainer>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useSound from \"use-sound\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport {\n  getFingerprintFromStorage,\n  getPlayerIdFromStorage,\n  setFingerprintToStorage,\n  setPlayerIdToStorage,\n} from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport LeaveGameButton from \"./LeaveGameButton\";\nimport GuessMap from \"./GuessMap\";\nimport {\n  getCurrentQuestionRound,\n  getCurrentBettingRound,\n  getPreviousQuestionRound,\n  haveAllPlayersPlacedTheirGuess,\n} from \"./helpers\";\nimport errorLogger from \"../../api/errorHandler\";\n\nimport \"./styles.scss\";\n\nlet soundInterval: NodeJS.Timeout;\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(true);\n  const [\n    showNewQuestionRoundForSpectator,\n    setShowNewQuestionRoundForSpectator,\n  ] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n  const [gqlErr, setGqlErr] = useState<Error>();\n  const [playNotification] = useSound(\n    require(\"../../assets/turn-notification.mp3\")\n  );\n  const [playAlert] = useSound(require(\"../../assets/turn-alert.wav\"));\n\n  const errorHandler = (err: Error) => {\n    errorLogger(err);\n    setGqlErr(err);\n  };\n\n  const [fetchGame] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n    onError: errorHandler,\n    onCompleted: ({ game }) => {\n      setGame(game);\n    },\n  });\n\n  const [createPlayer, { data: newPlayerData }] = useMutation<{\n    addPlayer: Player;\n  }>(CREATE_PLAYER, {\n    onError: errorHandler,\n  });\n\n  const [startGame] = useMutation<{\n    startGame: Game;\n  }>(START_GAME, { onError: errorHandler });\n\n  const [placeBet] = useMutation<{\n    placeBet: Game;\n  }>(PLACE_BET, { onError: errorHandler });\n\n  const [addGuess] = useMutation<{\n    addGuess: Game;\n  }>(ADD_GUESS, { onError: errorHandler });\n\n  const { error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: {\n      gameId,\n      hash:\n        getFingerprintFromStorage(gameId) || setFingerprintToStorage(gameId),\n    },\n    onSubscriptionData: ({ subscriptionData }) => {\n      clearInterval(soundInterval);\n      setGame(subscriptionData.data?.gameUpdated);\n      const cqr = getCurrentQuestionRound(subscriptionData.data?.gameUpdated);\n      const cbr = getCurrentBettingRound(cqr);\n      const players = subscriptionData.data?.gameUpdated.players;\n      const allPlayersPlacedTheirBet =\n        cqr && players && haveAllPlayersPlacedTheirGuess(cqr, players);\n      if (allPlayersPlacedTheirBet) {\n        setShowNewQuestionRoundForSpectator(false);\n      }\n      if (cbr?.currentPlayer.id === playerId && allPlayersPlacedTheirBet) {\n        playNotification();\n        window.navigator.vibrate(200);\n        soundInterval = setInterval(() => {\n          playAlert();\n          window.navigator.vibrate(200);\n        }, 15000);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (subscriptionError) {\n      errorHandler(subscriptionError);\n    }\n  }, [subscriptionError]);\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (gqlErr) {\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const player = game.players.find((p) => p.id === playerId);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const gameHasStarted = !!game.questionRounds.length;\n  const isSpectator = gameHasStarted && (!player || player.isDead);\n  const hasPlayerPlacedGuessInCurrentQuestionRound = !!playerGuessInCurrentQuestionRound;\n  const previousQuestionRound = getPreviousQuestionRound(game);\n  const showPreviousQuestionRoundResults =\n    !!previousQuestionRound &&\n    (game.isOver ||\n      (!hasPlayerPlacedGuessInCurrentQuestionRound && !isSpectator) ||\n      (isSpectator &&\n        !!currentQuestionRound &&\n        !showNewQuestionRoundForSpectator &&\n        !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)));\n  const usedQuestionRound = showPreviousQuestionRoundResults\n    ? previousQuestionRound\n    : currentQuestionRound;\n\n  return (\n    <>\n      <div\n        className=\"grid mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        <div>\n          {usedQuestionRound && (\n            <Question\n              {...{\n                game,\n                usedQuestionRound,\n                playerId,\n              }}\n            />\n          )}\n          <GuessMap\n            {...{\n              usedQuestionRound,\n              isSpectator,\n              playerId,\n              players: game.players,\n            }}\n          />\n        </div>\n        <div className=\"d-flex flex-column\">\n          <PlayerTable\n            {...{\n              players: game?.players,\n              playerId,\n              usedQuestionRound,\n              currentBettingRound,\n              isSpectator,\n              game,\n            }}\n          />\n        </div>\n        {!showNewQuestionRound &&\n          !hasPlayerPlacedGuessInCurrentQuestionRound &&\n          !isSpectator && (\n            <button\n              className=\"new-question-button btn btn-primary mx-auto mt-5\"\n              onClick={() => {\n                setShowNewQuestionRound(true);\n              }}\n            >\n              Answer New Question\n            </button>\n          )}\n        {isSpectator && usedQuestionRound?.isOver && (\n          <button\n            className=\"new-question-button btn btn-light mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRoundForSpectator(true);\n            }}\n          >\n            Show Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && !isSpectator && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      {!gameHasStarted && (\n        <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n      )}\n\n      <LeaveGameButton {...{ gameId, playerId, gameHasStarted, setPlayerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          guess && handleSubmit(guess);\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport MapInput from \"./MapInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  if (player?.isDead) {\n    return null;\n  }\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        playerId\n      );\n      setShowNewQuestionRound(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, playerId);\n    setShowNewQuestionRound(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        id=\"leave-game\"\n        className=\"btn btn-link btn-lg\"\n        onClick={handleClickOpen}\n      >\n        <ExitToAppOutlinedIcon />\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>\n            Are you sure?\n            {gameHasStarted && (\n              <p>If you leave the game, you cannot join again later.</p>\n            )}\n          </DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              Leave Game\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  )?.guess.geo;\n\n  let mapMarkers: Marker[] = playerGuess\n    ? [{ position: playerGuess, label: \"You\" }]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({ position: guess.geo, label });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n    });\n  }\n\n  return <Map markers={mapMarkers} />;\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container-sm py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route path=\"/questions/:setName\" component={Lobby} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `http${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws${SERVER_URL}/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}