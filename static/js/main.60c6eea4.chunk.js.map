{"version":3,"sources":["components/Lobby/index.tsx","api/queries.ts","components/Game/PlayerTable/Avatar/index.tsx","components/Game/helpers/helpers.ts","components/Game/helpers/placeBetHelpers.ts","components/Game/PlayerTable/index.tsx","components/Game/Question/index.tsx","components/Game/Hints/index.tsx","components/Drawer/index.tsx","components/Game/AnswerDrawer/index.tsx","components/Game/helpers/queryHelpers.ts","components/Game/NameInputDrawer/index.tsx","components/Game/ActionButtons/Button/index.tsx","components/Game/ActionButtons/RaiseInputDrawer/index.tsx","components/Game/ActionButtons/index.tsx","components/Game/Pot/index.tsx","components/Game/Footer/index.tsx","components/Game/index.tsx","storage.ts","components/App/index.tsx","serviceWorker.ts","config.ts","index.tsx"],"names":["CREATE_GAME_QUERY","gql","Lobby","history","useHistory","useMutation","createGame","loading","data","error","console","useEffect","push","id","handleCreateGame","a","className","onClick","Size","GET_GAME_BY_ID","SUBSCRIBE_TO_GAME_BY_ID","CREATE_PLAYER","START_GAME","PLACE_BET","ADD_GUESS","calculateBettingRoundSpendingForPlayer","bettingRound","playerId","bets","reduce","sum","bet","amount","getCurrentQuestionRound","game","questionRounds","length","getCurrentBettingRound","currentQuestionRound","bettingRounds","haveAllPlayersPlacedTheirGuess","players","remainingPlayers","filter","player","isPlayerDead","guesses","money","questionRound","amountInQuestionRound","br","hasFolded","calculateAmountToCall","amountSpentAlreadyInBettingRound","amountSpentInBettingRoundPerPlayer","acc","Math","max","Object","values","foldedPlayerIds","includes","raise","placeBet","currentBettingRound","currentPlayer","Error","moneyOfPlayer","find","variables","input","gameId","min","name","isDead","isFolded","gameIsOver","size","isDealer","isOver","sort","p1","p2","forEach","i","rank","players_","splice","findIndex","moveAppPlayerToTop","questionRoundGuesses","previousQuestionRoundGuesses","revealPreviousAnswers","guess","winningPlayerIds","winners","map","p","key","Avatar","dealerId","lg","md","role","aria-label","styles","question","fontSize","title","answer","previousQuestionRound","style","noHints","totalQuestions","questions","borderTop","marginTop","paddingTop","currentHint","oldHint","usedQuestionRound","hints","numberOfHints","slice","hint","children","onClose","drawerProps","Drawer","addGuessMutation","showNewQuestionRound","setShowNewQuestionRound","useState","setGuess","canAddGuess","anchor","open","variant","value","onChange","e","parseFloat","target","disabled","type","placeholder","aria-describedby","addGuess","emojiRegex","createPlayer","setName","newName","match","substring","playerName","text","handleOnClick","isDisabled","handleRaise","showRaiseDrawer","setShowRaiseDrawer","amountToCall","moneyRemaining","setAmount","round","pattern","cursor","check","call","fold","actionButtonProps","RaiseInputDrawer","total","playerShare","totalPot","playerPot","startGame","Pot","ActionButtons","GameComponent","undefined","setPlayerId","setGame","useParams","useLazyQuery","fetchPolicy","fetchGame","fetchGameData","fetchGameError","newPlayerData","addPlayerLoading","addPlayerError","startGameLoading","startGameError","placeBetLoading","placeBetError","addGuessLoading","addGuessError","useSubscription","gameData","subscriptionError","gameUpdated","storedPlayerId","localStorage","getItem","getPlayerIdFromStorage","newPlayerId","addPlayer","setItem","setPlayerIdToStorage","playerGuessInCurrentQuestionRound","hasPlayerPlacedGuessInCurrentQuestionRound","fontWeight","paddingBottom","Question","Hints","PlayerTable","AnswerDrawer","Footer","NameInputDrawer","PageNotFound","App","href","path","component","exact","Game","Boolean","window","location","hostname","httpLink","HttpLink","uri","process","wsLink","WebSocketLink","options","reconnect","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.60c6eea4.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { Game } from \"../../interfaces\";\n\nconst CREATE_GAME_QUERY = gql`\n  mutation createGame {\n    createGame {\n      id\n    }\n  }\n`;\n\nfunction Lobby() {\n  const history = useHistory();\n  const [createGame, { loading, data, error }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY);\n  if (error) {\n    console.error(error);\n  }\n  useEffect(() => {\n    if (data && !loading) {\n      history.push(`/${data.createGame.id}`);\n    }\n  }, [history, data, loading]);\n  const handleCreateGame = async () => {\n    createGame();\n  };\n  return (\n    <>\n      <p className=\"mt-3\">Start a new game or open a link of an existing game.</p>\n      <button className=\"btn btn-lg btn-primary mt-auto mb-3 mx-5\" onClick={handleCreateGame}>\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n    </>\n  );\n}\n\nexport default Lobby;\n","import { gql } from \"apollo-boost\";\n\nexport const GET_GAME_BY_ID = gql`\n  query findGame($gameId: ID!) {\n    game(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const SUBSCRIBE_TO_GAME_BY_ID = gql`\n  subscription GameUpdated($gameId: ID!) {\n    gameUpdated(gameId: $gameId) {\n      id\n      questionRounds {\n        question {\n          id\n          hints\n          answer\n          question\n        }\n        foldedPlayerIds\n        bettingRounds {\n          currentPlayer {\n            id\n          }\n          bets {\n            amount\n            playerId\n          }\n        }\n        guesses {\n          guess\n          playerId\n        }\n      }\n      players {\n        id\n        money\n        name\n      }\n      dealerId\n      questions {\n        id\n      }\n      isOver\n    }\n  }\n`;\n\nexport const CREATE_PLAYER = gql`\n  mutation addPlayer($input: PlayerInput!) {\n    addPlayer(input: $input) {\n      id\n      money\n      name\n    }\n  }\n`;\n\nexport const START_GAME = gql`\n  mutation startGame($gameId: ID!) {\n    startGame(gameId: $gameId) {}\n  }\n`;\n\nexport const PLACE_BET = gql`\n  mutation placeBet($input: BetInput!) {\n    placeBet(input: $input) {}\n  }\n`;\n\nexport const ADD_GUESS = gql`\n  mutation addGuess($input: GuessInput!) {\n    addGuess(input: $input) {}\n  }\n`;\n","import React from \"react\";\nimport { BettingRound, Player } from \"../../../../interfaces\";\n\nimport \"./styles.scss\";\n\nexport enum Size {\n  lg = \"lg\",\n  md = \"md\",\n}\n\nexport interface PlayerTableProps {\n  id: Player[\"id\"];\n  name: Player[\"name\"];\n  currentBettingRound?: BettingRound;\n  isDead?: boolean;\n  isFolded?: boolean;\n  gameIsOver?: boolean;\n  isDealer: boolean;\n  size: Size;\n}\n\nexport default ({\n  id,\n  name,\n  currentBettingRound,\n  isDead,\n  isFolded,\n  gameIsOver,\n  size,\n  isDealer,\n}: PlayerTableProps) => {\n  return (\n    <div className={`avatar ${size} ${isDead || isFolded ? \"dead\" : \"\"}`}>\n      <span>{name}</span>\n      {!gameIsOver && currentBettingRound?.currentPlayer.id === id && (\n        <span className=\"turn\">{\">\"}</span>\n      )}\n      {isDealer && <span className=\"dealer\">{\"D\"}</span>}\n    </div>\n  );\n};\n","import { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\n\nexport const calculateBettingRoundSpendingForPlayer = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n) => {\n  return bettingRound.bets.reduce(\n    (sum, bet) => sum + (bet.playerId === playerId ? bet.amount : 0),\n    0\n  );\n};\n\nconst calculateQuestionRoundSpendingForPlayer = (\n  playerId: Player[\"id\"],\n  questionRound?: QuestionRound\n) => {\n  return questionRound?.bettingRounds.reduce(\n    (sum, br) => sum + calculateBettingRoundSpendingForPlayer(br, playerId),\n    0\n  );\n};\n\nexport const getCurrentQuestionRound = (game?: Game) =>\n  game?.questionRounds[game?.questionRounds?.length - 1];\n\nexport const getCurrentBettingRound = (currentQuestionRound?: QuestionRound) =>\n  currentQuestionRound?.bettingRounds[\n    currentQuestionRound?.bettingRounds?.length - 1\n  ];\n\nexport const haveAllPlayersPlacedTheirGuess = (\n  currentQuestionRound: QuestionRound,\n  players: Player[]\n) => {\n  const remainingPlayers = players.filter(\n    (player) => !isPlayerDead(currentQuestionRound, player)\n  );\n  return currentQuestionRound.guesses.length === remainingPlayers.length;\n};\n\nexport const isPlayerDead = (\n  currentQuestionRound: QuestionRound,\n  player: Omit<Player, \"name\">\n) => {\n  if (player.money > 0) {\n    return false;\n  }\n  const amountInQuestionRound = calculateQuestionRoundSpendingForPlayer(\n    player.id,\n    currentQuestionRound\n  );\n  if (\n    amountInQuestionRound &&\n    amountInQuestionRound > 0 &&\n    !hasFolded(currentQuestionRound, player.id)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport const calculateAmountToCall = (\n  bettingRound: BettingRound,\n  playerId: Player[\"id\"]\n): number => {\n  if (!bettingRound.bets.length) return 0;\n  const amountSpentAlreadyInBettingRound = calculateBettingRoundSpendingForPlayer(\n    bettingRound,\n    playerId\n  );\n\n  const amountSpentInBettingRoundPerPlayer = bettingRound.bets.reduce(\n    (acc, bet) => {\n      acc[bet.playerId] = (acc[bet.playerId] || 0) + bet.amount;\n      return acc;\n    },\n    {} as { [key: string]: number }\n  );\n\n  return (\n    Math.max(...Object.values(amountSpentInBettingRoundPerPlayer)) -\n    amountSpentAlreadyInBettingRound\n  );\n};\n\nexport const hasFolded = (\n  currentQuestionRound: QuestionRound,\n  playerId: Player[\"id\"]\n) => currentQuestionRound?.foldedPlayerIds.includes(playerId);\n","import { Player, Game, BetInput } from \"../../../interfaces\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \".\";\nimport { calculateAmountToCall } from \"./helpers\";\n\nexport type PlaceBet = ({\n  variables: { input },\n}: {\n  variables: { input: BetInput };\n}) => void;\n\nexport const check = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > 0) {\n    // cannot check\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: 0,\n      },\n    },\n  });\n};\n\nexport const call = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amountToCall, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const raise = (\n  amount: number,\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  if (amountToCall > amount) {\n    throw new Error(\"Amount to call is greater than raised amount.\");\n  }\n\n  const moneyOfPlayer =\n    game.players.find(({ id }) => id === playerId)?.money ?? 0;\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: Math.min(amount, moneyOfPlayer),\n      },\n    },\n  });\n};\n\nexport const fold = (\n  placeBet: PlaceBet,\n  game: Game,\n  playerId: Player[\"id\"]\n) => {\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  if (\n    !currentQuestionRound ||\n    currentBettingRound?.currentPlayer.id !== playerId\n  ) {\n    return;\n  }\n\n  placeBet({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        amount: -1,\n      },\n    },\n  });\n};\n","import React from \"react\";\nimport {\n  isPlayerDead,\n  hasFolded,\n  calculateBettingRoundSpendingForPlayer,\n} from \"../helpers\";\nimport {\n  Player,\n  BettingRound,\n  QuestionRound,\n  Game,\n  Guess,\n} from \"../../../interfaces\";\nimport Avatar, { Size } from \"./Avatar\";\n\nimport \"./styles.scss\";\n\ninterface PlayerWithRank extends Player {\n  rank?: number;\n}\n\nexport interface PlayerTableProps {\n  players?: PlayerWithRank[];\n  playerId?: Player[\"id\"];\n  currentBettingRound?: BettingRound;\n  currentQuestionRound?: QuestionRound;\n  game?: Game;\n}\n\nconst moveAppPlayerToTop = (players: Player[], playerId: Player[\"id\"]) => {\n  const players_ = [...players];\n  const a = players_.splice(\n    players_.findIndex(({ id }) => id === playerId),\n    players_.length\n  );\n  return [...a, ...players_];\n};\n\nexport default ({\n  players,\n  playerId,\n  currentBettingRound,\n  currentQuestionRound,\n  game,\n}: PlayerTableProps) => {\n  if (!players?.length || !playerId) {\n    return null;\n  }\n  const { isOver: gameIsOver } = game || {};\n  if (gameIsOver) {\n    players\n      .sort((p1, p2) => p2.money - p1.money)\n      .forEach((player, i) => {\n        player.rank = i + 1;\n      });\n  }\n  players = moveAppPlayerToTop(players, playerId);\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  let questionRoundGuesses: { [key: string]: Guess[\"guess\"] };\n  let previousQuestionRoundGuesses: { [key: string]: Guess[\"guess\"] };\n  if (game && revealPreviousAnswers) {\n    previousQuestionRoundGuesses = game.questionRounds[\n      game.questionRounds.length - (game.isOver ? 1 : 2)\n    ].guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  if (currentQuestionRound) {\n    questionRoundGuesses = currentQuestionRound.guesses.reduce(\n      (acc, guess) => ({ ...acc, [guess.playerId]: guess.guess }),\n      {}\n    );\n  }\n  const winningPlayerIds = players\n    .reduce(\n      (winners, player, i) => {\n        if (i === 0) return winners;\n        if (winners[0].money < player.money) {\n          return [player];\n        }\n        if (winners[0].money === player.money) {\n          return [...winners, player];\n        }\n        return winners;\n      },\n      [players[0]]\n    )\n    .map((p) => p.id);\n\n  return (\n    <div>\n      {(players || []).map(({ id, money, name, rank }, i) => {\n        const isDead =\n          currentQuestionRound &&\n          isPlayerDead(currentQuestionRound, { id, money });\n        const isFolded =\n          currentQuestionRound && hasFolded(currentQuestionRound, id);\n        return (\n          <div key={id} className=\"d-flex align-items-center pt-4 ml-4\">\n            {gameIsOver && <span className=\"rank\">{rank}.</span>}\n            <Avatar\n              {...{\n                id,\n                name,\n                currentBettingRound,\n                isDead,\n                isFolded,\n                gameIsOver,\n                isDealer: game?.dealerId === id,\n                size: i === 0 ? Size.lg : Size.md,\n              }}\n            />\n            <div\n              className={`money ${id === playerId ? \"\" : \"md\"} ${\n                (isDead || isFolded) && !gameIsOver ? \"dead\" : \"\"\n              }`}\n            >\n              {revealPreviousAnswers &&\n              (previousQuestionRoundGuesses[id] ||\n                previousQuestionRoundGuesses[id] === 0) ? (\n                <span role=\"img\" aria-label=\"answer\">\n                  💡 {previousQuestionRoundGuesses[id]}\n                </span>\n              ) : (\n                currentQuestionRound && (\n                  <span role=\"img\" aria-label=\"answer\">\n                    💡{\" \"}\n                    <span className={id === playerId ? \"\" : \"obfuscate\"}>\n                      {!questionRoundGuesses[id] &&\n                      questionRoundGuesses[id] !== 0\n                        ? null\n                        : id === playerId\n                        ? questionRoundGuesses[id]\n                        : 432}\n                    </span>\n                  </span>\n                )\n              )}\n              <span role=\"img\" aria-label=\"money\">\n                💰\n                {money +\n                  (revealPreviousAnswers && currentBettingRound\n                    ? calculateBettingRoundSpendingForPlayer(\n                        currentBettingRound,\n                        id\n                      )\n                    : 0)}\n              </span>\n            </div>\n            {gameIsOver && winningPlayerIds.includes(id) && (\n              <span className=\"trophy\" role=\"img\" aria-label=\"trophy\">\n                🏆\n              </span>\n            )}\n            {isDead && !gameIsOver && (\n              <span className=\"skull\" role=\"img\" aria-label=\"skull\">\n                💀\n              </span>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n}\n\nconst styles = {\n  question: {\n    fontSize: \"2em\",\n  },\n  title: {\n    fontSize: \"0.7em\",\n  },\n  answer: {\n    fontSize: \"2em\",\n  },\n};\n\nexport default ({ game, currentQuestionRound, playerId }: QuestionProps) => {\n  // if the user has not yet placed a bet,\n  // show the result of the previous round if their is one\n  if (\n    game.isOver ||\n    (game.questionRounds.length > 1 &&\n      !currentQuestionRound.guesses.find(\n        (guess) => guess.playerId === playerId\n      ))\n  ) {\n    const previousQuestionRound =\n      game.questionRounds[game.questionRounds.length - (game.isOver ? 1 : 2)];\n    return (\n      <>\n        <p>{previousQuestionRound.question.question}</p>\n        <p style={styles.answer}>\n          Answer: <b>{previousQuestionRound.question.answer}</b>\n        </p>\n      </>\n    );\n  }\n\n  const noHints = currentQuestionRound.bettingRounds.length <= 1;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.6em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <span style={(noHints && styles.question) || {}}>\n        {currentQuestionRound.question.question}\n      </span>\n    </>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound } from \"../../../interfaces\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.8em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.5em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  currentQuestionRound: QuestionRound;\n  previousQuestionRound?: QuestionRound;\n}\n\nexport default ({\n  currentQuestionRound,\n  previousQuestionRound,\n}: HintsProps) => {\n  const usedQuestionRound = previousQuestionRound\n    ? previousQuestionRound\n    : currentQuestionRound;\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.bettingRounds.length - 1;\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      {usedQuestionRound.question.hints\n        .slice(0, usedQuestionRound.bettingRounds.length - 1)\n        .map((hint, i) => (\n          <span\n            key={hint}\n            style={\n              numberOfHints === i + 1 && !previousQuestionRound\n                ? styles.currentHint\n                : styles.oldHint\n            }\n          >\n            {hint}\n          </span>\n        ))}\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Drawer, { DrawerProps } from \"@material-ui/core/Drawer\";\n\nimport \"./styles.scss\";\n\ninterface QuestionProps extends DrawerProps {\n  children: ReactNode;\n  title: string;\n  onClose?: () => void;\n}\n\nexport default ({\n  children,\n  title,\n  onClose,\n  ...drawerProps\n}: QuestionProps) => {\n  return (\n    <Drawer\n      {...{\n        className: \"drawer\",\n        ...drawerProps,\n      }}\n    >\n      <div className=\"d-flex align-items-center flex-column\">\n        <div className=\"d-flex\" id=\"drawer-title\">\n          <span className=\"ml-auto\">{title}</span>\n          {onClose && (\n            <span id=\"drawer-close\" className=\"ml-auto mr-3\" onClick={onClose}>\n              ╳\n            </span>\n          )}\n        </div>\n\n        <div className=\"container px-5 pt-4 pb-5 d-flex flex-column\">\n          {children}\n        </div>\n      </div>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player, QuestionRound } from \"../../../interfaces\";\nimport { AddGuess, addGuess, isPlayerDead } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  playerId: Player[\"id\"];\n  addGuessMutation: AddGuess;\n  showNewQuestionRound: boolean;\n  setShowNewQuestionRound: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentQuestionRound,\n  playerId,\n  addGuessMutation,\n  game,\n  showNewQuestionRound,\n  setShowNewQuestionRound,\n}: QuestionProps) => {\n  const player = game.players.find((p) => p.id === playerId);\n  const isDead = player && isPlayerDead(currentQuestionRound, player);\n  if (isDead) {\n    return null;\n  }\n  const [guess, setGuess] = useState<number | string>(\"\");\n  const canAddGuess = !currentQuestionRound.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowNewQuestionRound(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        canAddGuess &&\n        showNewQuestionRound &&\n        !currentQuestionRound?.guesses.find(\n          (guess) => guess.playerId === playerId\n        )\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={guess}\n            onChange={(e) => {\n              const value = parseFloat(e.target.value);\n              setGuess(value || e.target.value);\n            }}\n            disabled={!canAddGuess}\n            type=\"number\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Your answer\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={\n                !canAddGuess ||\n                typeof guess === \"string\" ||\n                (!guess && guess !== 0)\n              }\n              onClick={(e) => {\n                if ((guess || guess === 0) && typeof guess === \"number\") {\n                  addGuess(addGuessMutation, game, guess, playerId);\n                  setGuess(\"\");\n                  setShowNewQuestionRound(false);\n                }\n              }}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import { Player, Game, GuessInput } from \"../../../interfaces\";\n\nexport type AddGuess = ({\n  variables: { input },\n}: {\n  variables: { input: GuessInput };\n}) => void;\n\nexport const addGuess = (\n  addGuessMutation: AddGuess,\n  game: Game,\n  guess: number,\n  playerId: Player[\"id\"]\n) => {\n  addGuessMutation({\n    variables: {\n      input: {\n        gameId: game.id,\n        playerId: playerId,\n        guess,\n      },\n    },\n  });\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nconst emojiRegex = /(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\u0023-\\u0039]\\ufe0f?\\u20e3|\\u3299|\\u3297|\\u303d|\\u3030|\\u24c2|\\ud83c[\\udd70-\\udd71]|\\ud83c[\\udd7e-\\udd7f]|\\ud83c\\udd8e|\\ud83c[\\udd91-\\udd9a]|\\ud83c[\\udde6-\\uddff]|\\ud83c[\\ude01-\\ude02]|\\ud83c\\ude1a|\\ud83c\\ude2f|\\ud83c[\\ude32-\\ude3a]|\\ud83c[\\ude50-\\ude51]|\\u203c|\\u2049|[\\u25aa-\\u25ab]|\\u25b6|\\u25c0|[\\u25fb-\\u25fe]|\\u00a9|\\u00ae|\\u2122|\\u2139|\\ud83c\\udc04|[\\u2600-\\u26FF]|\\u2b05|\\u2b06|\\u2b07|\\u2b1b|\\u2b1c|\\u2b50|\\u2b55|\\u231a|\\u231b|\\u2328|\\u23cf|[\\u23e9-\\u23f3]|[\\u23f8-\\u23fa]|\\ud83c\\udccf|\\u2934|\\u2935|[\\u2190-\\u21ff])/g;\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    createPlayer({ variables: { input: { gameId, playerName: name } } });\n  };\n\n  return (\n    <Drawer\n      title=\"Your avatar\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Use an emoji or your initials as your avatar</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={name}\n            onChange={(e) => {\n              const newName = e.target.value;\n              const match = newName.match(emojiRegex);\n              setName(match ? newName : newName.substring(0, 2));\n            }}\n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Type an emoji or letter\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={!name.length}\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary mx-1\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n}: ActionButtonsProps) => {\n  if (!currentQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  return (\n    <div className=\"d-flex flex-row w-100 justify-content-between\">\n      {[\n        {\n          text: \"Check\",\n          handleOnClick: () => {\n            check(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) > 0,\n        },\n        {\n          text: \"Call\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: calculateAmountToCall(currentBettingRound, playerId) <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled:\n            player?.money &&\n            calculateAmountToCall(currentBettingRound, playerId) >=\n              player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            currentBettingRound?.currentPlayer.id !== playerId ||\n            !haveAllPlayersPlacedTheirGuess(currentQuestionRound, game.players)\n          }\n        />\n      ))}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { BettingRound, Player, QuestionRound } from \"../../../interfaces\";\nimport { calculateAmountToCall } from \"../helpers\";\n\nconst styles = {\n  fontSize: \"0.9em\",\n};\n\ninterface PotProps {\n  playerId: Player[\"id\"];\n  currentQuestionRound: QuestionRound;\n  currentBettingRound: BettingRound;\n  revealPreviousAnswers: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  revealPreviousAnswers,\n}: PotProps) => {\n  const [totalPot, playerPot] = revealPreviousAnswers\n    ? [0, 0]\n    : currentQuestionRound.bettingRounds.reduce(\n        ([total, playerShare], br) => {\n          br.bets.forEach((bet) => {\n            total += bet.amount;\n            if (bet.playerId === playerId) {\n              playerShare += bet.amount;\n            }\n          });\n          return [total, playerShare];\n        },\n        [0, 0]\n      );\n  const amountToCall = revealPreviousAnswers\n    ? 0\n    : calculateAmountToCall(currentBettingRound, playerId);\n  return (\n    <div\n      className=\"d-flex w-100 flex-row  justify-content-between pb-3 px-1\"\n      style={styles}\n    >\n      <span>\n        Pot (total/you):{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {totalPot}/{playerPot}\n      </span>\n      <span>\n        To call:{\" \"}\n        <span role=\"img\" aria-label=\"money\">\n          💰\n        </span>\n        {amountToCall}\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { QuestionRound, Game, BettingRound, Player } from \"../../../interfaces\";\nimport ActionButtons, { ActionButtonsProps } from \"../ActionButtons\";\nimport Pot from \"../Pot\";\n\nimport \"./styles.scss\";\n\ntype StartGame = ({\n  variables: { gameId },\n}: {\n  variables: { gameId: Game[\"id\"] };\n}) => void;\n\ninterface FooterProps\n  extends Omit<ActionButtonsProps, \"currentQuestionRound\" | \"playerId\"> {\n  startGame: StartGame;\n  playerId?: Player[\"id\"];\n  currentQuestionRound?: QuestionRound;\n  currentBettingRound?: BettingRound;\n}\n\nexport default ({\n  game,\n  currentQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  startGame,\n}: FooterProps) => {\n  const revealPreviousAnswers =\n    game?.isOver ||\n    (game &&\n      game.questionRounds.length > 1 &&\n      !currentQuestionRound?.guesses.find(\n        (guess) => guess.playerId === playerId\n      ));\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer-content\">\n        {!game.questionRounds.length && (\n          <button\n            className=\"btn btn-lg btn-primary mt-auto mx-5\"\n            disabled={game.players.length <= 1}\n            onClick={() => {\n              startGame({\n                variables: { gameId: game.id },\n              });\n            }}\n          >\n            Start Game\n          </button>\n        )}\n        {currentQuestionRound && currentBettingRound && playerId && (\n          <>\n            <Pot\n              playerId={playerId}\n              currentQuestionRound={currentQuestionRound}\n              currentBettingRound={currentBettingRound}\n              revealPreviousAnswers={revealPreviousAnswers}\n            />\n            <ActionButtons\n              {...{\n                game,\n                currentQuestionRound,\n                currentBettingRound,\n                placeBet,\n                playerId,\n              }}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  useLazyQuery,\n  useMutation,\n  useSubscription,\n} from \"@apollo/react-hooks\";\nimport {\n  GET_GAME_BY_ID,\n  CREATE_PLAYER,\n  START_GAME,\n  PLACE_BET,\n  ADD_GUESS,\n  SUBSCRIBE_TO_GAME_BY_ID,\n} from \"../../api/queries\";\nimport { Game, Player } from \"../../interfaces\";\nimport { getPlayerIdFromStorage, setPlayerIdToStorage } from \"../../storage\";\nimport PlayerTable from \"./PlayerTable\";\nimport Question from \"./Question\";\nimport Hints from \"./Hints\";\nimport AnswerDrawer from \"./AnswerDrawer\";\nimport NameInputDrawer from \"./NameInputDrawer\";\nimport Footer from \"./Footer\";\nimport { getCurrentQuestionRound, getCurrentBettingRound } from \"./helpers\";\n\nfunction GameComponent() {\n  const [playerId, setPlayerId] = useState<string | undefined>(undefined);\n  const [game, setGame] = useState<Game | undefined>(undefined);\n  const [showNewQuestionRound, setShowNewQuestionRound] = useState(false);\n  const { gameId } = useParams<{ gameId: string }>();\n\n  const [\n    fetchGame,\n    { data: fetchGameData, error: fetchGameError },\n  ] = useLazyQuery<{ game: Game }>(GET_GAME_BY_ID, {\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const [\n    createPlayer,\n    { data: newPlayerData, loading: addPlayerLoading, error: addPlayerError },\n  ] = useMutation<{ addPlayer: Player }>(CREATE_PLAYER);\n\n  const [\n    startGame,\n    { loading: startGameLoading, error: startGameError },\n  ] = useMutation<{ startGame: Game }>(START_GAME);\n\n  const [\n    placeBet,\n    { loading: placeBetLoading, error: placeBetError },\n  ] = useMutation<{ placeBet: Game }>(PLACE_BET);\n\n  const [\n    addGuess,\n    { loading: addGuessLoading, error: addGuessError },\n  ] = useMutation<{ addGuess: Game }>(ADD_GUESS);\n\n  const { data: gameData, error: subscriptionError } = useSubscription<{\n    gameUpdated: Game;\n  }>(SUBSCRIBE_TO_GAME_BY_ID, {\n    variables: { gameId },\n  });\n\n  useEffect(() => {\n    fetchGame({\n      variables: { gameId },\n    });\n  }, [fetchGame, gameId]);\n\n  useEffect(() => {\n    setGame(gameData?.gameUpdated || fetchGameData?.game);\n  }, [fetchGameData, gameData, setGame]);\n\n  useEffect(() => {\n    if (gameId) {\n      const storedPlayerId = getPlayerIdFromStorage(gameId);\n      const newPlayerId = newPlayerData?.addPlayer?.id;\n\n      if (storedPlayerId) {\n        setPlayerId(storedPlayerId);\n      }\n\n      if (newPlayerId) {\n        setPlayerIdToStorage(gameId, newPlayerId);\n        setPlayerId(newPlayerId);\n      }\n    }\n  }, [gameId, newPlayerData]);\n\n  if (!game) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (\n    fetchGameError ||\n    addPlayerError ||\n    startGameError ||\n    placeBetError ||\n    subscriptionError ||\n    addGuessError\n  ) {\n    console.error(\n      fetchGameError ||\n        addPlayerError ||\n        startGameError ||\n        placeBetError ||\n        subscriptionError ||\n        addGuessError\n    );\n    return <p>A technical error occurred. Try to refresh the page</p>;\n  }\n\n  const currentQuestionRound = getCurrentQuestionRound(game);\n  const currentBettingRound = getCurrentBettingRound(currentQuestionRound);\n  const playerGuessInCurrentQuestionRound = currentQuestionRound?.guesses.find(\n    (guess) => guess.playerId === playerId\n  );\n  const hasPlayerPlacedGuessInCurrentQuestionRound =\n    !!playerGuessInCurrentQuestionRound ||\n    playerGuessInCurrentQuestionRound === 0;\n  const previousQuestionRound = !hasPlayerPlacedGuessInCurrentQuestionRound\n    ? game?.questionRounds[game?.questionRounds?.length - 2]\n    : undefined;\n\n  return (\n    <>\n      {(addPlayerLoading ||\n        startGameLoading ||\n        placeBetLoading ||\n        addGuessLoading) && <p>Loading...</p>}\n      <div\n        className=\"d-flex flex-column mt-3\"\n        style={{ fontWeight: 300, paddingBottom: \"130px\" }}\n      >\n        {currentQuestionRound && playerId && (\n          <div>\n            <Question\n              {...{\n                game,\n                currentQuestionRound,\n                playerId,\n              }}\n            />\n            <Hints {...{ currentQuestionRound, previousQuestionRound }} />\n          </div>\n        )}\n        <PlayerTable\n          {...{\n            players: game?.players,\n            playerId,\n            currentQuestionRound,\n            currentBettingRound,\n            game,\n          }}\n        />\n        {!showNewQuestionRound && !hasPlayerPlacedGuessInCurrentQuestionRound && (\n          <button\n            className=\"btn btn-primary mx-auto mt-5\"\n            onClick={() => {\n              setShowNewQuestionRound(true);\n            }}\n          >\n            Next Question\n          </button>\n        )}\n      </div>\n      {currentQuestionRound && playerId && (\n        <AnswerDrawer\n          {...{\n            game,\n            addGuessMutation: addGuess,\n            currentQuestionRound,\n            playerId,\n            showNewQuestionRound,\n            setShowNewQuestionRound,\n          }}\n        />\n      )}\n      {!game.isOver && (\n        <Footer\n          {...{\n            game,\n            currentQuestionRound,\n            currentBettingRound,\n            placeBet,\n            playerId,\n            startGame,\n          }}\n        />\n      )}\n      <NameInputDrawer {...{ gameId, createPlayer, playerId }} />\n    </>\n  );\n}\n\nexport default GameComponent;\n","const PLAYER_ID_KEY = \"player_id\";\n\nexport const setPlayerIdToStorage = (gameId: string, playerId: string) => {\n  localStorage.setItem(`${PLAYER_ID_KEY}_${gameId}`, playerId);\n};\n\nexport const getPlayerIdFromStorage = (gameId: string) =>\n  localStorage.getItem(`${PLAYER_ID_KEY}_${gameId}`);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Lobby from \"../Lobby\";\nimport Game from \"../Game\";\n\nimport \"./styles.scss\";\n\nfunction PageNotFound() {\n  return <p>Page not found.</p>;\n}\n\nfunction App() {\n  return (\n    <div id=\"app\" className=\"container py-2\">\n      <a href=\"/\" id=\"title\">\n        Certainty Poker\n      </a>\n      <Switch>\n        <Route path=\"/\" component={Lobby} exact />\n        <Route path=\"/:gameId\" component={Game} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// env level constants\nexport const SERVER_URL =\n  process.env.REACT_APP_SERVER_URL || \"http://localhost:8080\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { split } from \"apollo-link\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { OperationDefinitionNode } from \"graphql\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { SERVER_URL } from \"./config\";\n\nconst httpLink = new HttpLink({\n  uri: `${SERVER_URL}/query`,\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:8080/query`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(\n      query\n    ) as OperationDefinitionNode;\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}