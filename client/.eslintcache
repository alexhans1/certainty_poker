[{"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/index.tsx":"1","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/serviceWorker.ts":"2","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/config.ts":"3","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/App/index.tsx":"4","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/index.tsx":"5","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/index.tsx":"6","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/storage.ts":"7","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/api/errorHandler.ts":"8","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/api/queries.ts":"9","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/index.ts":"10","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/ActionableHalf/index.tsx":"11","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/PictureHalf/index.tsx":"12","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/LeaveGameButton/index.tsx":"13","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Footer/index.tsx":"14","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/index.tsx":"15","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/index.tsx":"16","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/NameInputDrawer/index.tsx":"17","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/helpers.ts":"18","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/placeBetHelpers.ts":"19","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/queryHelpers.ts":"20","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/interfaces.ts":"21","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/helpers.ts":"22","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/UploadModal/index.tsx":"23","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/index.tsx":"24","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Drawer/index.tsx":"25","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/NumberInput/index.tsx":"26","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Footer/StartGameButton/index.tsx":"27","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/DateInput/index.tsx":"28","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Question/index.tsx":"29","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/MultipleChoiceOptions/index.tsx":"30","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx":"31","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/GuessMap/index.tsx":"32","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/MapInput/index.tsx":"33","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/Player/index.tsx":"34","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/shared/ConfirmDialogButton/index.tsx":"35","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/UploadModal/processCsvData.ts":"36","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/assets/countryCodes.ts":"37","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/Player/Status.tsx":"38","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Guess/index.tsx":"39","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/Button/index.tsx":"40","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Question/Hints/index.tsx":"41","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Map/index.tsx":"42","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/RaiseInputDrawer/index.tsx":"43","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/base/Button.tsx":"44","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PreGameLobby/index.tsx":"45","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PreGameLobby/PlayerSpot.tsx":"46"},{"size":1671,"mtime":1611952607080,"results":"47","hashOfConfig":"48"},{"size":5295,"mtime":1611959472042,"results":"49","hashOfConfig":"48"},{"size":108,"mtime":1604519054124,"results":"50","hashOfConfig":"48"},{"size":683,"mtime":1611962153634,"results":"51","hashOfConfig":"48"},{"size":1305,"mtime":1611952595690,"results":"52","hashOfConfig":"48"},{"size":8281,"mtime":1612200952055,"results":"53","hashOfConfig":"48"},{"size":836,"mtime":1608071056039,"results":"54","hashOfConfig":"48"},{"size":66,"mtime":1606678713845,"results":"55","hashOfConfig":"48"},{"size":3638,"mtime":1607113150701,"results":"56","hashOfConfig":"48"},{"size":94,"mtime":1605904595396,"results":"57","hashOfConfig":"48"},{"size":5962,"mtime":1611954587321,"results":"58","hashOfConfig":"48"},{"size":223,"mtime":1608577669580,"results":"59","hashOfConfig":"48"},{"size":1541,"mtime":1608577345867,"results":"60","hashOfConfig":"48"},{"size":2467,"mtime":1612093719921,"results":"61","hashOfConfig":"48"},{"size":2744,"mtime":1608071056016,"results":"62","hashOfConfig":"48"},{"size":4118,"mtime":1611958850325,"results":"63","hashOfConfig":"48"},{"size":1799,"mtime":1612200891090,"results":"64","hashOfConfig":"48"},{"size":2163,"mtime":1608071056026,"results":"65","hashOfConfig":"48"},{"size":2889,"mtime":1603667465627,"results":"66","hashOfConfig":"48"},{"size":442,"mtime":1606678713882,"results":"67","hashOfConfig":"48"},{"size":1643,"mtime":1607113241199,"results":"68","hashOfConfig":"48"},{"size":1497,"mtime":1611783577980,"results":"69","hashOfConfig":"48"},{"size":7172,"mtime":1611959162798,"results":"70","hashOfConfig":"48"},{"size":2870,"mtime":1611958850324,"results":"71","hashOfConfig":"48"},{"size":701,"mtime":1612116067854,"results":"72","hashOfConfig":"48"},{"size":1301,"mtime":1611959162837,"results":"73","hashOfConfig":"48"},{"size":758,"mtime":1612093877111,"results":"74","hashOfConfig":"48"},{"size":1291,"mtime":1611959162840,"results":"75","hashOfConfig":"48"},{"size":1704,"mtime":1611497005759,"results":"76","hashOfConfig":"48"},{"size":2057,"mtime":1611952607152,"results":"77","hashOfConfig":"48"},{"size":1134,"mtime":1611959163193,"results":"78","hashOfConfig":"48"},{"size":1920,"mtime":1611483335056,"results":"79","hashOfConfig":"48"},{"size":835,"mtime":1611959162843,"results":"80","hashOfConfig":"48"},{"size":3648,"mtime":1612096174375,"results":"81","hashOfConfig":"48"},{"size":1709,"mtime":1611959162798,"results":"82","hashOfConfig":"48"},{"size":1490,"mtime":1608071056033,"results":"83","hashOfConfig":"48"},{"size":800,"mtime":1606678713849,"results":"84","hashOfConfig":"48"},{"size":1680,"mtime":1611782171537,"results":"85","hashOfConfig":"48"},{"size":1292,"mtime":1611592990050,"results":"86","hashOfConfig":"48"},{"size":474,"mtime":1611959162840,"results":"87","hashOfConfig":"48"},{"size":1381,"mtime":1611958850259,"results":"88","hashOfConfig":"48"},{"size":4036,"mtime":1611952598019,"results":"89","hashOfConfig":"48"},{"size":2818,"mtime":1611959163249,"results":"90","hashOfConfig":"48"},{"size":804,"mtime":1611996359292,"results":"91","hashOfConfig":"48"},{"size":2178,"mtime":1612200990383,"results":"92","hashOfConfig":"48"},{"size":370,"mtime":1612196990505,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"kmw51",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"96"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"96"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"96"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"96"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/index.tsx",[],["209","210"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/serviceWorker.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/config.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/App/index.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/index.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/index.tsx",["211","212","213"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/storage.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/api/errorHandler.ts",["214"],"export default (err: Error) => {\n  console.error(err.message);\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/api/queries.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/index.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/ActionableHalf/index.tsx",["215"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { QueryLazyOptions, useMutation } from \"@apollo/react-hooks\";\nimport { useLocation } from \"react-router-dom\";\nimport countryCodeToFlagEmoji from \"country-code-to-flag-emoji\";\nimport { Game, Set } from \"../../../interfaces\";\nimport { CREATE_GAME_QUERY } from \"../../../api/queries\";\nimport errorHandler from \"../../../api/errorHandler\";\nimport UploadModal from \"../UploadModal\";\n\nimport \"./styles.scss\";\n\ninterface Props {\n  sets?: Set[];\n  setName?: string;\n  languages: string[];\n  fetchSets: (\n    options?: QueryLazyOptions<Record<string, any>> | undefined\n  ) => void;\n}\n\nexport default ({ sets = [], setName, languages, fetchSets }: Props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const [selectedSets, setSelectedSets] = useState<string[]>(\n    setName ? [setName] : []\n  );\n  const [isUploadModalOpen, setIsUploadModalOpen] = useState(false);\n  const [shownLanguage, setShownLanguage] = useState(\"GB\");\n  const [createGame, { loading }] = useMutation<{\n    createGame: Game;\n  }>(CREATE_GAME_QUERY, {\n    variables: {\n      setNames: selectedSets,\n    },\n    onCompleted: ({ createGame }) => {\n      history.push(`/${createGame.id}`);\n    },\n    onError: errorHandler,\n  });\n\n  const handleCreateGame = async () => {\n    if (selectedSets.length) {\n      createGame();\n    }\n  };\n\n  return (\n    <div className=\"actionable-container container-sm px-sm-5 py-2\">\n      <a href=\"/\" id=\"title\" className=\"unstyled-link\">\n        Certainty Poker\n      </a>\n      {setName ? (\n        <p>\n          You can only start a game with these questions from this link{\" \"}\n          <Link\n            to={location.pathname}\n            style={{ color: \"#dfae06\" }}\n          >{`${window.location.host}${location.pathname}`}</Link>\n          .\n          <br />\n          Make sure to <b>save this link</b> if you want to start a game with\n          the uploaded questions later.\n          <br />\n          The questions will be available for 90 days.\n        </p>\n      ) : (\n        <>\n          <h1 className=\"py-5\">\n            You think you know things?\n            <br />\n            Let's make it interesting then!\n          </h1>\n          <p>\n            Certainty Poker is a social (distance) trivia game that doesn't just\n            test if you know things but also how certain you are about what you\n            think you know.\n          </p>\n          <p>\n            Start by selecting a set of trivia questions, create the game and\n            share the link to join with your friends!\n            <br />\n            You don't like our questions? Upload your own{\" \"}\n            <button\n              className=\"btn btn-link p-0\"\n              onClick={() => {\n                setIsUploadModalOpen(true);\n              }}\n            >\n              here ⤴\n            </button>\n            .\n          </p>\n        </>\n      )}\n      <div className=\"d-flex my-3\">\n        {languages.map((language) => (\n          <span\n            key={language}\n            className={`language mx-1 ${\n              language === shownLanguage ? \"\" : \"text-black-50\"\n            }`}\n            onClick={() => {\n              setShownLanguage(language);\n            }}\n            style={{\n              cursor: language === shownLanguage ? \"default\" : \"pointer\",\n            }}\n          >\n            {countryCodeToFlagEmoji(language)}\n          </span>\n        ))}\n      </div>\n      <div className=\"set-container my-4\">\n        {sets\n          .filter((s) => s.language === shownLanguage)\n          .map((set) => (\n            <span\n              key={set.setName}\n              className={`set badge border-light ${\n                selectedSets?.includes(set.setName) ? \"badge-light\" : \"\"\n              } ${setName ? \"mr-auto\" : \"\"}`}\n              style={{\n                gridColumn: `span ${Math.round(\n                  Math.pow(set.setName.length, 0.35)\n                )}`,\n              }}\n              onClick={(e) => {\n                if (setName) {\n                  return;\n                }\n                if (e.metaKey) {\n                  if (selectedSets?.includes(set.setName)) {\n                    setSelectedSets(\n                      selectedSets.filter((setName) => set.setName !== setName)\n                    );\n                  } else {\n                    setSelectedSets([set.setName, ...selectedSets]);\n                  }\n                } else {\n                  setSelectedSets([set.setName]);\n                }\n              }}\n            >\n              {set.setName} ({set.numberOfQuestions})\n            </span>\n          ))}\n      </div>\n      <button\n        className=\"btn btn-lg btn-primary mt-auto mb-3\"\n        onClick={handleCreateGame}\n        disabled={!selectedSets.length}\n      >\n        {loading ? \"Loading...\" : \"Create Game\"}\n      </button>\n      <p className=\"mt-4\">\n        Don't know the rules? Find them{\" \"}\n        <a\n          className=\"btn btn-link p-0\"\n          href=\"https://docs.google.com/document/d/13pwz8yzrPdY1DcQqXvhejJAxXdWdPrvxR6GUxg5PJPs/edit?usp=sharing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        .\n      </p>\n      <p className=\"text-smaller\">\n        TL;DR:\n        <br />\n        Answer trivia different types of questions. Then bet some poker chips on\n        how sure you are your answer is right. If you are unsure, you'd better\n        fold or put on your best poker face. You're a 100%? Then risk it and go\n        All In. If you are closest to the correct answer, you win whatever is in\n        the pot. Unless you've folded, of course.\n      </p>\n\n      <UploadModal\n        open={isUploadModalOpen}\n        handleClose={() => {\n          setIsUploadModalOpen(false);\n        }}\n        fetchSets={fetchSets}\n        setSelectedSets={setSelectedSets}\n      />\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/PictureHalf/index.tsx",["216"],"import React from \"react\";\n\nimport Image from \"../../../assets/certainty_poker_bg.png\";\n\nexport default () => {\n  return (\n    <div className=\"image-container\">\n      <img src={Image} alt=\"background\" />\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/LeaveGameButton/index.tsx",["217"],"import React from \"react\";\nimport ExitToAppOutlinedIcon from \"@material-ui/icons/ExitToAppOutlined\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Game, Player } from \"../../../interfaces\";\nimport { REMOVE_PLAYER, RemovePlayerVariables } from \"../../../api/queries\";\nimport errorLogger from \"../../../api/errorHandler\";\nimport { deletePlayerIdFromStorage } from \"../../../storage\";\nimport ConfirmDialogButton from \"../../shared/ConfirmDialogButton\";\n\ninterface Props {\n  gameId?: Game[\"id\"];\n  playerId?: Player[\"id\"];\n  gameHasStarted: Boolean;\n  setPlayerId: React.Dispatch<React.SetStateAction<string | undefined>>;\n}\n\nexport default ({ gameId, playerId, gameHasStarted, setPlayerId }: Props) => {\n  const [removePlayer] = useMutation<any, RemovePlayerVariables>(\n    REMOVE_PLAYER,\n    {\n      onError: errorLogger,\n      onCompleted: () => {\n        if (gameId) {\n          deletePlayerIdFromStorage(gameId);\n          setPlayerId(undefined);\n        }\n      },\n    }\n  );\n\n  if (!gameId || !playerId) {\n    return null;\n  }\n\n  const handleConfirm = () => {\n    removePlayer({ variables: { playerId, gameId } });\n  };\n\n  return (\n    <ConfirmDialogButton\n      onConfirm={handleConfirm}\n      dialogTitle={\n        <>\n          Are you sure?\n          {gameHasStarted && (\n            <p>If you leave the game, you cannot join again later.</p>\n          )}\n        </>\n      }\n      confirmLabel=\"Leave Game\"\n      buttonLabel={<ExitToAppOutlinedIcon />}\n      btnClassName=\"leave-game btn btn-link btn-lg\"\n    />\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Footer/index.tsx",["218","219","220","221","222","223"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/index.tsx",["224"],"import React from \"react\";\nimport Drawer from \"../../Drawer\";\nimport NumberInput from \"./NumberInput\";\nimport DateInput from \"./DateInput\";\nimport MapInput from \"./MapInput\";\nimport MultipleChoiceInput from \"./MultipleChoiceInput\";\nimport {\n  Answer,\n  Game,\n  GeoCoordinate,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { AddGuess, addGuess } from \"../helpers\";\n\ninterface QuestionProps {\n  game: Game;\n  currentQuestionRound: QuestionRound;\n  player?: Player;\n  addGuessMutation: AddGuess;\n  showAnswerDrawer: boolean;\n  setShowAnswerDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  hasPlayerPlacedGuessInCurrentQuestionRound: boolean;\n}\n\nexport default ({\n  currentQuestionRound,\n  player,\n  addGuessMutation,\n  game,\n  showAnswerDrawer,\n  setShowAnswerDrawer,\n  hasPlayerPlacedGuessInCurrentQuestionRound,\n}: QuestionProps) => {\n  if (!player || player.isDead) {\n    return null;\n  }\n\n  const handleNumberInputSubmit = (guess: number | string) => {\n    if ((guess || guess === 0) && typeof guess === \"number\") {\n      addGuess(\n        addGuessMutation,\n        game,\n        {\n          numerical: guess,\n        },\n        player.id\n      );\n      setShowAnswerDrawer(false);\n    }\n  };\n\n  const handleMapInputSubmit = (geoCoordinate: GeoCoordinate) => {\n    const guess: Answer = {\n      geo: geoCoordinate,\n    };\n    addGuess(addGuessMutation, game, guess, player.id);\n    setShowAnswerDrawer(false);\n  };\n\n  const getInput = () => {\n    switch (currentQuestionRound.question.type) {\n      case QuestionTypes.NUMERICAL:\n        return <NumberInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.DATE:\n        return <DateInput handleSubmit={handleNumberInputSubmit} />;\n      case QuestionTypes.GEO:\n        return <MapInput handleSubmit={handleMapInputSubmit} />;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        const alternatives = currentQuestionRound.question.alternatives?.map(\n          (alt) => ({ value: alt, active: true })\n        );\n        return (\n          <MultipleChoiceInput\n            usedQuestionRound={currentQuestionRound}\n            alternatives={alternatives}\n            handleSubmit={handleNumberInputSubmit}\n          />\n        );\n      default:\n        throw new Error(\"Unknow Question Type\");\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"New Question\"\n      onClose={() => {\n        setShowAnswerDrawer(false);\n      }}\n      anchor={\"bottom\"}\n      open={\n        (showAnswerDrawer || game.questionRounds.length === 1) &&\n        !hasPlayerPlacedGuessInCurrentQuestionRound\n      }\n      variant=\"persistent\"\n    >\n      <>\n        <p>{currentQuestionRound.question.question}</p>\n        {getInput()}\n      </>\n    </Drawer>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/index.tsx",["225"],"import React from \"react\";\nimport PlayerComp from \"./Player\";\nimport Question from \"../Question\";\nimport {\n  Game,\n  Guess,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport {\n  getCurrentBettingRound,\n  hasPlayerFolded,\n  haveAllPlayersPlacedTheirGuess,\n} from \"../helpers\";\nimport GuessMap from \"../GuessMap\";\nimport MultipleChoiceOptions from \"../MultipleChoiceOptions\";\n\nimport \"./styles.scss\";\nimport { getWinningPlayerArray } from \"./helpers\";\ninterface Props {\n  game: Game;\n  usedQuestionRound?: QuestionRound;\n  playerId?: Player[\"id\"];\n  isSpectator: boolean;\n}\n\nconst PokerTable = ({\n  game,\n  usedQuestionRound,\n  playerId,\n  isSpectator,\n}: Props) => {\n  const currentBettingRound = getCurrentBettingRound(usedQuestionRound);\n  const isGeoQuestion = usedQuestionRound?.question.type === QuestionTypes.GEO;\n  const isMultipleChoiceQuestion =\n    usedQuestionRound?.question.type === QuestionTypes.MULTIPLE_CHOICE;\n  const allPlayersPlacedTheirGuess =\n    usedQuestionRound &&\n    game.players &&\n    haveAllPlayersPlacedTheirGuess(usedQuestionRound, game.players);\n  const winningPlayerIds = getWinningPlayerArray(game) || [];\n\n  return (\n    <div className=\"d-flex flex-column align-items-center\">\n      {usedQuestionRound && isGeoQuestion && (\n        <Question\n          {...{\n            game,\n            usedQuestionRound,\n          }}\n        />\n      )}\n      <div className=\"relative-wrap\">\n        <div className={`poker-table ${isGeoQuestion ? \"isGeoQuestion\" : \"\"}`}>\n          {game.players.map((player, index) => {\n            const { changeInMoney } =\n              usedQuestionRound?.results?.find(\n                ({ playerId }) => player.id === playerId\n              ) || {};\n            const hasFolded = !!(\n              usedQuestionRound && hasPlayerFolded(usedQuestionRound, player.id)\n            );\n            const guess = usedQuestionRound?.guesses.find(\n              (g) => g.playerId === player.id\n            );\n            return (\n              <PlayerComp\n                key={player.id}\n                {...{\n                  player,\n                  index,\n                  currentBettingRound,\n                  changeInMoney,\n                  isAppPlayer: player.id === playerId,\n                  isTurnPlayer:\n                    player.id === currentBettingRound?.currentPlayer.id,\n                  isQuestionRoundOver: !!usedQuestionRound?.isOver,\n                  isShowdown: !!usedQuestionRound?.isShowdown,\n                  hasFolded,\n                  isSpectator,\n                  allPlayersPlacedTheirGuess,\n                  guess,\n                  question: usedQuestionRound?.question,\n                  isWinningPlayer: winningPlayerIds.includes(player.id),\n                }}\n              />\n            );\n          })}\n          <div className=\"inner-content\">\n            {usedQuestionRound && !isGeoQuestion && (\n              <Question\n                {...{\n                  game,\n                  usedQuestionRound,\n                }}\n              />\n            )}\n            {isGeoQuestion && (\n              <GuessMap\n                {...{\n                  usedQuestionRound,\n                  isSpectator,\n                  playerId,\n                  players: game.players,\n                  className: \"map\",\n                }}\n              />\n            )}\n            {isMultipleChoiceQuestion && (\n              <MultipleChoiceOptions\n                {...{\n                  usedQuestionRound,\n                  alternatives:\n                    usedQuestionRound?.question.alternatives?.map((alt) => ({\n                      value: alt,\n                      active: !usedQuestionRound.question.hiddenAlternatives?.includes(\n                        alt\n                      ),\n                    })) || [],\n                  guess: usedQuestionRound?.guesses.find(\n                    (g) => g.playerId === playerId\n                  )?.guess.numerical,\n                }}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PokerTable;\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/NameInputDrawer/index.tsx",["226"],"import React, { useState } from \"react\";\nimport Drawer from \"../../Drawer\";\nimport { Game, Player } from \"../../../interfaces\";\n\nexport type CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  createPlayer: CreatePlayer;\n  gameId: Game[\"id\"];\n  playerId?: Player[\"id\"];\n}\n\nexport default ({ createPlayer, gameId, playerId }: Props) => {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = () => {\n    if (!playerId) {\n      createPlayer({ variables: { input: { gameId, playerName: name } } });\n    }\n  };\n\n  return (\n    <Drawer\n      title=\"Your name\"\n      anchor={\"bottom\"}\n      open={!playerId}\n      variant=\"persistent\"\n    >\n      <>\n        <p className=\"font-bold\">Enter your name</p>\n        <p className=\"mt-4 text-sm\">Username</p>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"text\"\n            className=\"bg-white border border-gray-400 px-4\"\n            placeholder=\"Your name\"\n            aria-label=\"Your answer\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <button\n            type=\"submit\"\n            disabled={!name.length}\n            className=\"bg-blue-500 mr-auto rounded-lg font-bold text-white text-center px-4 py-3 transition duration-300 ease-in-out hover:bg-blue-600\"\n            onClick={handleSubmit}\n          >\n            Submit\n          </button>\n        </div>\n      </>\n    </Drawer>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/helpers.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/placeBetHelpers.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/helpers/queryHelpers.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/interfaces.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/helpers.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/UploadModal/index.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/index.tsx",["227","228","229"],"import React, { useState } from \"react\";\nimport { QuestionRound, Player, Game, BettingRound } from \"../../../interfaces\";\nimport {\n  PlaceBet,\n  check,\n  call,\n  raise,\n  fold,\n  haveAllPlayersPlacedTheirGuess,\n  calculateAmountToCall,\n} from \"../helpers\";\nimport ActionButton from \"./Button\";\nimport RaiseInputDrawer from \"./RaiseInputDrawer\";\n\nexport interface ActionButtonsProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n  currentBettingRound?: BettingRound;\n  playerId: Player[\"id\"];\n  placeBet: PlaceBet;\n  isAppPlayerTurn: boolean;\n}\n\nexport default ({\n  game,\n  usedQuestionRound,\n  currentBettingRound,\n  playerId,\n  placeBet,\n  isAppPlayerTurn,\n}: ActionButtonsProps) => {\n  if (!usedQuestionRound || !currentBettingRound) {\n    return null;\n  }\n\n  const [showRaiseDrawer, setShowRaiseDrawer] = useState(false);\n  const player = game.players.find((p) => p.id === playerId);\n\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <ActionButton\n        text={amountToCall > 0 ? `Call for ${amountToCall}` : \"Check\"}\n        handleOnClick={() => {\n          call(placeBet, game, playerId);\n        }}\n        isDisabled={amountToCall <= 0 || !isAppPlayerTurn}\n      />\n      <div className=\"flex justify-between flex-row my-2\">\n        <ActionButton\n          text=\"Raise\"\n          handleOnClick={() => {\n            setShowRaiseDrawer(true);\n          }}\n          isDisabled={\n            (player?.money && amountToCall >= player?.money) || !isAppPlayerTurn\n          }\n        />\n        <ActionButton\n          text=\"Fold\"\n          handleOnClick={() => {\n            fold(placeBet, game, playerId);\n          }}\n          isDisabled={!isAppPlayerTurn}\n        />\n      </div>\n      {/* {[\n        {\n          text: amountToCall > 0 ? `Call for ${amountToCall}` : \"Check\",\n          handleOnClick: () => {\n            call(placeBet, game, playerId);\n          },\n          isDisabled: amountToCall <= 0,\n        },\n        {\n          text: \"Raise\",\n          handleOnClick: () => {\n            setShowRaiseDrawer(true);\n          },\n          isDisabled: player?.money && amountToCall >= player?.money,\n        },\n        {\n          text: \"Fold\",\n          handleOnClick: () => {\n            fold(placeBet, game, playerId);\n          },\n        },\n      ].map((actionButtonProps) => (\n        <ActionButton\n          key={actionButtonProps.text}\n          {...actionButtonProps}\n          isDisabled={\n            actionButtonProps.isDisabled ||\n            !isAppPlayerTurn\n          }\n        />\n      ))} */}\n      <RaiseInputDrawer\n        {...{\n          game,\n          placeBet,\n          playerId,\n          currentBettingRound,\n          handleRaise: raise,\n          showRaiseDrawer,\n          setShowRaiseDrawer,\n        }}\n      />\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Drawer/index.tsx",["230"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/NumberInput/index.tsx",["231"],"import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number | string) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<number | string>(\"\");\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          const value = parseFloat(e.target.value);\n          if (value === 0) setGuess(0);\n          else setGuess(value || e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }\n        }}\n        type=\"number\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={typeof guess === \"string\" || (!guess && guess !== 0)}\n          onClick={() => {\n            handleSubmit(guess);\n            setGuess(\"\");\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Footer/StartGameButton/index.tsx",["232"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/DateInput/index.tsx",["233"],"import React, { useState } from \"react\";\n\ninterface Props {\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<string>();\n\n  const submit = (stringValue?: string) => {\n    if (stringValue) {\n      const value = parseInt(stringValue.replaceAll(\"-\", \"\"));\n      if (value) {\n        handleSubmit(value);\n        setGuess(undefined);\n      }\n    }\n  };\n\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        value={guess}\n        onChange={(e) => {\n          setGuess(e.target.value);\n        }}\n        onKeyUp={(e) => {\n          if (e.which === 13) {\n            submit(guess);\n          }\n        }}\n        type=\"date\"\n        className=\"form-control form-control-lg\"\n        placeholder=\"Your answer\"\n        aria-label=\"Your answer\"\n        aria-describedby=\"basic-addon2\"\n        autoFocus\n      />\n      <div className=\"input-group-append\">\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={!guess}\n          onClick={() => {\n            submit(guess);\n          }}\n        >\n          ⮑\n        </button>\n      </div>\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Question/index.tsx",["234"],"import React from \"react\";\nimport { Game, QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport Guess from \"../Guess\";\nimport { getRevealAnswer } from \"../helpers\";\nimport Hints from \"./Hints\";\n\ninterface QuestionProps {\n  game: Game;\n  usedQuestionRound: QuestionRound;\n}\n\nconst styles = {\n  question: {\n    fontSize: \"1.6em\",\n  },\n  answer: {\n    fontSize: \"1.6em\",\n  },\n};\n\nexport default ({ game, usedQuestionRound }: QuestionProps) => {\n  const noHints =\n    usedQuestionRound.question.type !== QuestionTypes.MULTIPLE_CHOICE &&\n    usedQuestionRound.bettingRounds.length <= 1 &&\n    !usedQuestionRound.isOver;\n  const totalQuestions = game.questionRounds.length + game.questions.length;\n  return (\n    <div>\n      <p className=\"mb-0\" style={(!noHints && { fontSize: \"0.7em\" }) || {}}>\n        Question ({game.questionRounds.length}/{totalQuestions}):\n      </p>\n      <p style={(noHints && styles.question) || {}}>\n        {usedQuestionRound.question.question}\n      </p>\n      <Hints\n        {...{\n          usedQuestionRound,\n        }}\n      />\n      {[QuestionTypes.NUMERICAL, QuestionTypes.DATE].includes(\n        usedQuestionRound.question.type\n      ) &&\n        getRevealAnswer(usedQuestionRound) && (\n          <>\n            <p style={styles.answer}>\n              Answer:{\" \"}\n              <b>\n                <Guess\n                  guess={usedQuestionRound.question.answer}\n                  questionType={usedQuestionRound.question.type}\n                />\n              </b>\n            </p>\n            {usedQuestionRound.question.explanation && (\n              <p>{usedQuestionRound.question.explanation}</p>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/MultipleChoiceOptions/index.tsx",["235"],"import React from \"react\";\nimport { QuestionRound, QuestionTypes } from \"../../../interfaces\";\nimport { getRevealAnswer } from \"../helpers\";\n\nimport \"./index.scss\";\n\ninterface Props {\n  usedQuestionRound?: QuestionRound;\n  handleClick?: (i: number) => void;\n  guess?: number;\n}\n\nexport default ({ usedQuestionRound, handleClick, guess }: Props) => {\n  if (usedQuestionRound?.question.type !== QuestionTypes.MULTIPLE_CHOICE) {\n    return null;\n  }\n  if (usedQuestionRound.question.alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n  const alternatives = usedQuestionRound.question.alternatives.map((alt) => ({\n    value: alt,\n    active: !usedQuestionRound.question.hiddenAlternatives?.includes(alt),\n  }));\n\n  const revealAnswer = getRevealAnswer(usedQuestionRound);\n  const answer = usedQuestionRound.question.answer.numerical;\n\n  return (\n    <div className=\"mc-container mb-3\">\n      {alternatives.map((alt, i) => {\n        let buttonClassName = \"btn\";\n        if (!handleClick) {\n          buttonClassName += \" no-pointer\";\n        }\n        if (guess === i) {\n          buttonClassName += handleClick ? \" shadow\" : \" box-shadow\";\n        }\n        if (alt.active) {\n          if (revealAnswer && i === answer) {\n            buttonClassName += \" btn-outline-success\";\n          } else {\n            if (handleClick) {\n              buttonClassName += \" btn-outline-dark\";\n              if (guess === i) {\n                buttonClassName += \" bg-dark text-light\";\n              }\n            } else {\n              buttonClassName += \" btn-outline-light\";\n            }\n          }\n        } else {\n          buttonClassName += \" btn-outline-danger\";\n        }\n        return (\n          <button\n            key={`${alt.value}_${i}`}\n            className={buttonClassName}\n            onClick={() => handleClick && handleClick(i)}\n            disabled={!alt.active || (revealAnswer && i !== answer)}\n          >\n            {alt.value}\n          </button>\n        );\n      })}\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/MultipleChoiceInput/index.tsx",["236"],"import React, { useState } from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport MultipleChoiceOptions from \"../../MultipleChoiceOptions\";\n\ninterface Props {\n  usedQuestionRound: QuestionRound;\n  alternatives?: {\n    value: string;\n    active: boolean;\n  }[];\n  handleSubmit: (guess: number) => void;\n}\n\nexport default ({ usedQuestionRound, handleSubmit, alternatives }: Props) => {\n  const [guess, setGuess] = useState<number>();\n  if (alternatives?.length !== 4) {\n    throw new Error(\"missing alternatives for multiple choice question\");\n  }\n\n  return (\n    <>\n      <MultipleChoiceOptions\n        usedQuestionRound={usedQuestionRound}\n        handleClick={setGuess}\n        guess={guess}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess || guess === 0) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess && guess !== 0}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/GuessMap/index.tsx",["237"],"import React from \"react\";\nimport {\n  Game,\n  Player,\n  QuestionRound,\n  QuestionTypes,\n} from \"../../../interfaces\";\nimport { getRevealAnswer, hasPlayerFolded } from \"../helpers\";\nimport Map, { Marker } from \"../Map\";\n\ninterface Props {\n  playerId?: Player[\"id\"];\n  players: Game[\"players\"];\n  usedQuestionRound?: QuestionRound;\n  isSpectator: Boolean;\n  className?: string;\n}\n\nexport default ({\n  usedQuestionRound,\n  isSpectator,\n  playerId,\n  players,\n  className,\n}: Props) => {\n  const questionType = usedQuestionRound?.question.type;\n  if (!usedQuestionRound || questionType !== QuestionTypes.GEO) {\n    return null;\n  }\n\n  const playerGuess = usedQuestionRound?.guesses.find(\n    (g) => g.playerId === playerId\n  );\n\n  let mapMarkers: Marker[] = playerGuess?.guess.geo\n    ? [\n        {\n          position: playerGuess.guess.geo,\n          label: \"You\",\n          distanceToAnswer: playerGuess.difference,\n        },\n      ]\n    : [];\n\n  if (\n    isSpectator ||\n    (usedQuestionRound?.isOver && usedQuestionRound?.isShowdown)\n  ) {\n    mapMarkers.push(\n      ...usedQuestionRound?.guesses.reduce<Marker[]>(\n        (acc, { guess, playerId: pId, difference }) => {\n          if (\n            guess.geo &&\n            playerId !== pId &&\n            (isSpectator || !hasPlayerFolded(usedQuestionRound, pId))\n          ) {\n            const label = players.find((p) => p.id === pId)?.name || \"\";\n            acc.push({\n              position: guess.geo,\n              label,\n              distanceToAnswer: difference,\n            });\n          }\n          return acc;\n        },\n        []\n      )\n    );\n  }\n  if (\n    getRevealAnswer(usedQuestionRound) &&\n    usedQuestionRound.question.answer.geo\n  ) {\n    mapMarkers.push({\n      position: usedQuestionRound.question.answer.geo,\n      label: \"Correct Answer\",\n      isAnswer: true,\n    });\n  }\n\n  return <Map className={className} markers={mapMarkers} />;\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/AnswerDrawer/MapInput/index.tsx",["238"],"import React, { useState } from \"react\";\nimport { GeoCoordinate } from \"../../../../interfaces\";\nimport Map from \"../../../Game/Map\";\n\ninterface Props {\n  handleSubmit: (guess: GeoCoordinate) => void;\n}\n\nexport default ({ handleSubmit }: Props) => {\n  const [guess, setGuess] = useState<GeoCoordinate>();\n\n  return (\n    <>\n      <Map\n        handleOnClick={(p: GeoCoordinate) => {\n          setGuess(p);\n        }}\n      />\n      <button\n        className=\"btn btn-primary ml-auto\"\n        onClick={() => {\n          if (guess) {\n            handleSubmit(guess);\n            setGuess(undefined);\n          }\n        }}\n        disabled={!guess?.latitude || !guess.longitude}\n      >\n        Submit\n      </button>\n    </>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/Player/index.tsx",["239"],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/shared/ConfirmDialogButton/index.tsx",["240"],"import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\ninterface Props {\n  buttonLabel: string | React.ReactNode;\n  dialogTitle: string | React.ReactNode;\n  confirmLabel: string;\n  onConfirm: () => void;\n  isDisabled?: boolean;\n  btnClassName?: string;\n}\n\nexport default ({\n  buttonLabel,\n  dialogTitle,\n  confirmLabel,\n  onConfirm,\n  isDisabled,\n  btnClassName,\n}: Props) => {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleConfirm = () => {\n    onConfirm();\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button\n        className={btnClassName || \"btn btn-primary\"}\n        onClick={handleClickOpen}\n        disabled={isDisabled}\n      >\n        {buttonLabel}\n      </button>\n      <Dialog open={open} onClose={handleClose}>\n        <div className=\"px-4 py-2\">\n          <DialogTitle>{dialogTitle}</DialogTitle>\n          <DialogActions>\n            <button className=\"btn btn-outline-dark\" onClick={handleClose}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleConfirm}>\n              {confirmLabel}\n            </button>\n          </DialogActions>\n        </div>\n      </Dialog>\n    </>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Lobby/UploadModal/processCsvData.ts",["241"],"import { Answer, Question, QuestionTypes } from \"../../../interfaces\";\nimport { CSVDataRow } from \".\";\n\nexport default (rows: { data: CSVDataRow }[]): Omit<Question, \"id\">[] => {\n  return rows.map((row) => {\n    const {\n      question,\n      type,\n      answer: csvAnswer,\n      latitude,\n      longitude,\n      hint1,\n      hint2,\n      explanation,\n      multiple_choice_alternative1,\n      multiple_choice_alternative2,\n      multiple_choice_alternative3,\n    } = row.data;\n    const hints = [hint1, hint2].filter(Boolean) as string[];\n    const answer: Answer = {};\n    let alternatives: Question[\"alternatives\"];\n    switch (type) {\n      case QuestionTypes.NUMERICAL:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.DATE:\n        answer.numerical = csvAnswer as number;\n        break;\n      case QuestionTypes.GEO:\n        answer.geo = {\n          latitude: latitude as number,\n          longitude: longitude as number,\n        };\n        break;\n      case QuestionTypes.MULTIPLE_CHOICE:\n        answer.numerical = 0;\n        alternatives = [\n          csvAnswer as string,\n          multiple_choice_alternative1 as string,\n          multiple_choice_alternative2 as string,\n          multiple_choice_alternative3 as string,\n        ];\n        break;\n      default:\n        throw new Error(\"invalid question type\");\n    }\n    return {\n      question,\n      type,\n      answer,\n      hints,\n      explanation,\n      alternatives,\n    };\n  });\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/assets/countryCodes.ts",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PokerTable/Player/Status.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Guess/index.tsx",["242"],"import React from \"react\";\nimport moment from \"moment\";\nimport { Answer, Question, QuestionTypes } from \"../../../interfaces\";\n\ninterface Props {\n  guess: Answer;\n  questionType: QuestionTypes;\n  alternatives?: Question[\"alternatives\"];\n}\n\nexport default ({ guess, questionType, alternatives }: Props) => {\n  if (!guess) return null;\n  switch (questionType) {\n    case QuestionTypes.NUMERICAL:\n      return (\n        <span>\n          {new Intl.NumberFormat().format(\n            typeof guess.numerical === \"number\"\n              ? guess.numerical\n              : parseFloat(guess.numerical || \"\")\n          )}\n        </span>\n      );\n    case QuestionTypes.DATE:\n      if (!guess.numerical) {\n        return null;\n      }\n      return (\n        <span>\n          {moment(guess.numerical.toString(), \"YYYYMMDD\").format(\n            \"MMM DD, YYYY\"\n          )}\n        </span>\n      );\n    case QuestionTypes.GEO:\n      return <span>{`[${guess.geo?.latitude}, ${guess.geo?.longitude}]`}</span>;\n    case QuestionTypes.MULTIPLE_CHOICE:\n      if (alternatives?.length !== 4) {\n        throw new Error(\"missing alternatives for multiple choice question\");\n      }\n      return <span>{alternatives[guess.numerical ?? -1]}</span>;\n    default:\n      throw new Error(\"Invalid question type\");\n  }\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/Button/index.tsx",["243"],"import React from \"react\";\n\ninterface ActionButtonProps {\n  text: string;\n  handleOnClick: () => void;\n  isDisabled?: boolean;\n}\n\nexport default ({ text, handleOnClick, isDisabled }: ActionButtonProps) => {\n  return (\n    <button\n      className=\"btn btn-primary w-100\"\n      onClick={handleOnClick}\n      disabled={isDisabled}\n    >\n      {text}\n    </button>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Question/Hints/index.tsx",["244"],"import React from \"react\";\nimport { QuestionRound } from \"../../../../interfaces\";\nimport { getRevealAnswer } from \"../../helpers\";\n\nconst styles = {\n  title: {\n    fontSize: \"0.7em\",\n    borderTop: \"1px solid #ebebeb\",\n    marginTop: \"0.3em\",\n    paddingTop: \"1em\",\n  },\n  currentHint: {\n    fontSize: \"1.4em\",\n  },\n  oldHint: {\n    fontSize: \"0.7em\",\n  },\n};\n\ninterface HintsProps {\n  usedQuestionRound: QuestionRound;\n}\n\nexport default ({ usedQuestionRound }: HintsProps) => {\n  const hints = usedQuestionRound.question.hints;\n  const numberOfHints = usedQuestionRound.isOver\n    ? hints.length\n    : Math.min(usedQuestionRound.bettingRounds.length - 1, hints.length);\n  if (numberOfHints < 1) {\n    return null;\n  }\n  if (!hints?.length) {\n    return null;\n  }\n  return (\n    <div className=\"d-flex flex-column\">\n      <span style={styles.title}>\n        Hint{numberOfHints > 1 && \"s\"} ({numberOfHints}/{hints.length}):\n      </span>\n      <ol>\n        {usedQuestionRound.question.hints\n          .slice(0, numberOfHints)\n          .map((hint, i) => (\n            <li\n              key={hint}\n              style={\n                numberOfHints === i + 1 && !getRevealAnswer(usedQuestionRound)\n                  ? styles.currentHint\n                  : styles.oldHint\n              }\n            >\n              {hint}\n            </li>\n          ))}\n      </ol>\n    </div>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/Map/index.tsx",["245"],"import React, { ReactNode, useState } from \"react\";\nimport { LatLng, latLngBounds } from \"leaflet\";\nimport {\n  FeatureGroup,\n  MapContainer,\n  Marker,\n  Polyline,\n  TileLayer,\n  Tooltip,\n  useMap,\n  useMapEvents,\n} from \"react-leaflet\";\nimport { equals } from \"ramda\";\nimport { GeoCoordinate } from \"../../../interfaces\";\n\nimport \"./styles.scss\";\n\ntype HandleOnClick = (p: GeoCoordinate) => void;\nexport interface Marker {\n  label?: string;\n  position: GeoCoordinate;\n  isAnswer?: boolean;\n  distanceToAnswer?: number;\n}\n\ninterface Props {\n  markers?: Marker[];\n  handleOnClick?: HandleOnClick;\n  className?: string;\n}\n\nconst getNumberOfDecimals = (val: number = 0) => {\n  if (val > 1000) {\n    return 0;\n  }\n  if (val > 100) {\n    return 1;\n  }\n  if (val > 1) {\n    return 2;\n  }\n  return 4;\n};\n\nfunction LocationMarker({ handleUpdate }: { handleUpdate: HandleOnClick }) {\n  const [position, setPosition] = useState<any>(null);\n  useMapEvents({\n    click(e) {\n      setPosition(e.latlng);\n      handleUpdate({ latitude: e.latlng.lat, longitude: e.latlng.lng });\n    },\n  });\n\n  return position && <Marker position={position} />;\n}\n\nfunction MarkerContainer({\n  children,\n  markers,\n}: {\n  children: ReactNode;\n  markers: Marker[];\n}) {\n  const map = useMap();\n  const bounds = latLngBounds([]);\n  markers?.forEach((data) => {\n    bounds.extend([data.position.latitude, data.position.longitude]);\n  });\n  bounds.isValid() &&\n    map.flyToBounds(bounds, {\n      // todo: make padding dependend on zoom level\n      padding: [10, 10],\n      maxZoom: markers.length > 1 ? 15 : 5,\n    });\n\n  return <FeatureGroup>{children}</FeatureGroup>;\n}\n\nexport default React.memo(\n  ({ markers = [], handleOnClick, className }: Props) => {\n    const answerMarker = markers.find((m) => m.isAnswer);\n    const distanceLines =\n      !!answerMarker &&\n      markers\n        .filter((m) => !m.isAnswer && m.distanceToAnswer)\n        .map((m) => ({\n          line: [\n            new LatLng(m.position.latitude, m.position.longitude),\n            new LatLng(\n              answerMarker.position.latitude,\n              answerMarker.position.longitude\n            ),\n          ],\n          label: m.distanceToAnswer?.toFixed(\n            getNumberOfDecimals(m.distanceToAnswer)\n          ),\n        }));\n\n    return (\n      <MapContainer\n        center={[0, 0]}\n        zoom={1}\n        scrollWheelZoom={true}\n        className={className}\n      >\n        <TileLayer\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.svg\"\n        />\n        {handleOnClick && <LocationMarker handleUpdate={handleOnClick} />}\n        {distanceLines &&\n          distanceLines.map(({ line, label }) => (\n            <Polyline\n              key={line.toString()}\n              positions={line}\n              color=\"#393d4e\"\n              weight={2}\n            >\n              {label && (\n                <Tooltip\n                  className=\"distance-label\"\n                  direction=\"center\"\n                  permanent\n                >\n                  {label} km\n                </Tooltip>\n              )}\n            </Polyline>\n          ))}\n        {markers.length && (\n          <MarkerContainer markers={markers}>\n            {markers.map(({ position, label }) => (\n              <Marker\n                position={[position.latitude, position.longitude]}\n                key={position.latitude}\n              >\n                {label && (\n                  <Tooltip direction=\"bottom\" offset={[-15, 20]} permanent>\n                    {label}\n                  </Tooltip>\n                )}\n              </Marker>\n            ))}\n          </MarkerContainer>\n        )}\n      </MapContainer>\n    );\n  },\n  (prevProps, nextProps) => equals(prevProps.markers, nextProps.markers)\n);\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/ActionButtons/RaiseInputDrawer/index.tsx",["246","247"],"import React, { useState } from \"react\";\nimport Drawer from \"../../../Drawer\";\nimport { BettingRound, Game, Player } from \"../../../../interfaces\";\nimport { calculateAmountToCall, PlaceBet, raise } from \"../../helpers\";\n\ntype CreatePlayer = ({\n  variables: {\n    input: { gameId, playerName },\n  },\n}: {\n  variables: { input: { gameId: Game[\"id\"]; playerName: Player[\"name\"] } };\n}) => void;\n\ninterface Props {\n  currentBettingRound: BettingRound;\n  game: Game;\n  handleRaise: typeof raise;\n  placeBet: PlaceBet;\n  playerId: Player[\"id\"];\n  showRaiseDrawer: boolean;\n  setShowRaiseDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport default ({\n  currentBettingRound,\n  game,\n  handleRaise,\n  placeBet,\n  playerId,\n  showRaiseDrawer,\n  setShowRaiseDrawer,\n}: Props) => {\n  const amountToCall = calculateAmountToCall(currentBettingRound, playerId);\n  const moneyRemaining = game.players.find(({ id }) => id === playerId)?.money;\n  const [amount, setAmount] = useState(amountToCall);\n\n  const handleSubmit = () => {\n    handleRaise(amount, placeBet, game, playerId);\n    setShowRaiseDrawer(false);\n  };\n\n  return (\n    <Drawer\n      title=\"Raise\"\n      anchor={\"bottom\"}\n      open={showRaiseDrawer}\n      onClose={() => {\n        setShowRaiseDrawer(false);\n      }}\n      variant=\"temporary\"\n      className=\"drawer\"\n    >\n      <>\n        <p>Raise by how much?</p>\n        <div className=\"input-group mb-3\">\n          <input\n            value={amount}\n            onChange={(e) => {\n              setAmount(Math.round(parseFloat(e.target.value)));\n            }}\n            onKeyUp={(e) => {\n              if (e.which === 13) {\n                handleSubmit();\n              }\n            }}\n            type=\"number\"\n            pattern=\"[0-9]\"\n            min={amountToCall}\n            max={moneyRemaining}\n            className=\"form-control form-control-lg\"\n            placeholder=\"Amount to raise\"\n            aria-label=\"Amount to raise\"\n            aria-describedby=\"basic-addon2\"\n            autoFocus\n          />\n          <div className=\"input-group-append\">\n            <button\n              disabled={\n                !!moneyRemaining &&\n                (amount < amountToCall || amount > moneyRemaining)\n              }\n              className=\"btn btn-primary\"\n              onClick={handleSubmit}\n            >\n              ⮑\n            </button>\n          </div>\n        </div>\n        {moneyRemaining && (\n          <span\n            style={{ cursor: \"pointer\" }}\n            onClick={() => setAmount(moneyRemaining)}\n            className=\"badge badge-pill badge-primary mr-auto px-4\"\n          >\n            All in\n          </span>\n        )}\n      </>\n    </Drawer>\n  );\n};\n","/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/base/Button.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PreGameLobby/index.tsx",[],"/Users/alexhans/dev/go/src/github.com/alexhans1/certainty_poker/client/src/components/Game/PreGameLobby/PlayerSpot.tsx",[],{"ruleId":"248","replacedBy":"249"},{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":24,"column":10,"nodeType":"254","messageId":"255","endLine":24,"endColumn":20},{"ruleId":"252","severity":1,"message":"256","line":28,"column":8,"nodeType":"254","messageId":"255","endLine":28,"endColumn":23},{"ruleId":"252","severity":1,"message":"257","line":50,"column":9,"nodeType":"254","messageId":"255","endLine":50,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":1,"column":1,"nodeType":"260","endLine":3,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":22,"column":1,"nodeType":"260","endLine":188,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":5,"column":1,"nodeType":"260","endLine":11,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":17,"column":1,"nodeType":"260","endLine":55,"endColumn":3},{"ruleId":"252","severity":1,"message":"261","line":2,"column":25,"nodeType":"254","messageId":"255","endLine":2,"endColumn":29},{"ruleId":"252","severity":1,"message":"262","line":2,"column":31,"nodeType":"254","messageId":"255","endLine":2,"endColumn":43},{"ruleId":"252","severity":1,"message":"263","line":8,"column":8,"nodeType":"254","messageId":"255","endLine":8,"endColumn":11},{"ruleId":"252","severity":1,"message":"264","line":9,"column":8,"nodeType":"254","messageId":"255","endLine":9,"endColumn":23},{"ruleId":"258","severity":1,"message":"259","line":24,"column":1,"nodeType":"260","endLine":81,"endColumn":3},{"ruleId":"252","severity":1,"message":"265","line":32,"column":9,"nodeType":"254","messageId":"255","endLine":32,"endColumn":30},{"ruleId":"258","severity":1,"message":"259","line":27,"column":1,"nodeType":"260","endLine":105,"endColumn":3},{"ruleId":"252","severity":1,"message":"266","line":6,"column":3,"nodeType":"254","messageId":"255","endLine":6,"endColumn":8},{"ruleId":"258","severity":1,"message":"259","line":19,"column":1,"nodeType":"260","endLine":69,"endColumn":3},{"ruleId":"252","severity":1,"message":"267","line":5,"column":3,"nodeType":"254","messageId":"255","endLine":5,"endColumn":8},{"ruleId":"252","severity":1,"message":"268","line":9,"column":3,"nodeType":"254","messageId":"255","endLine":9,"endColumn":33},{"ruleId":"258","severity":1,"message":"259","line":24,"column":1,"nodeType":"260","endLine":112,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":11,"column":1,"nodeType":"260","endLine":29,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":7,"column":1,"nodeType":"260","endLine":47,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":17,"column":1,"nodeType":"260","endLine":30,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":7,"column":1,"nodeType":"260","endLine":53,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":21,"column":1,"nodeType":"260","endLine":61,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":13,"column":1,"nodeType":"260","endLine":67,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":14,"column":1,"nodeType":"260","endLine":41,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":19,"column":1,"nodeType":"260","endLine":82,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":9,"column":1,"nodeType":"260","endLine":33,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":34,"column":1,"nodeType":"260","endLine":133,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":15,"column":1,"nodeType":"260","endLine":61,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":4,"column":1,"nodeType":"260","endLine":56,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":11,"column":1,"nodeType":"260","endLine":45,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":9,"column":1,"nodeType":"260","endLine":19,"endColumn":3},{"ruleId":"258","severity":1,"message":"259","line":24,"column":1,"nodeType":"260","endLine":58,"endColumn":3},{"ruleId":"269","severity":1,"message":"270","line":19,"column":18,"nodeType":"254","messageId":"271","endLine":19,"endColumn":24},{"ruleId":"252","severity":1,"message":"272","line":6,"column":6,"nodeType":"254","messageId":"255","endLine":6,"endColumn":18},{"ruleId":"258","severity":1,"message":"259","line":24,"column":1,"nodeType":"260","endLine":101,"endColumn":3},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],"@typescript-eslint/no-unused-vars","'ButtonLink' is defined but never used.","Identifier","unusedVar","'NameInputDrawer' is defined but never used.","'currentBettingRound' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Game' is defined but never used.","'BettingRound' is defined but never used.","'Pot' is defined but never used.","'StartGameButton' is defined but never used.","'revealPreviousAnswers' is assigned a value but never used.","'Guess' is defined but never used.","'check' is defined but never used.","'haveAllPlayersPlacedTheirGuess' is defined but never used.","@typescript-eslint/no-redeclare","'Marker' is already defined.","redeclared","'CreatePlayer' is defined but never used.","no-global-assign","no-unsafe-negation"]