# Types
type Game {
  id: ID!
  players: [Player!]!
  questionRounds: [QuestionRound!]!
  dealerId: ID!
  questions: [Question]!
  isOver: Boolean!
}

type Player {
  id: ID!
  money: Int!
  name: String!
  game: Game!
  isDead: Boolean!
}

type QuestionRoundResult {
  playerId: ID!
  changeInMoney: Int!
}

type QuestionRound {
  game: Game!
  question: Question
  guesses: [Guess!]!
  bettingRounds: [BettingRound!]!
  foldedPlayerIds: [ID!]!
  isOver: Boolean!
  results: [QuestionRoundResult!]
}

type Question {
  id: ID!
  question: String!
  answer: Float!
  hints: [String!]!
  explanation: String
}

type Guess {
  guess: Float!
  playerId: ID!
}

type BettingRound {
  questionRound: QuestionRound!
  bets: [Bet!]!
  currentPlayer: Player!
}

type Bet {
  playerId: ID!
  amount: Int!
}

type Set {
  setName: String!
  numberOfQuestions: Int!
  isPrivate: Boolean!
}

# Queries
type Query {
  game(gameId: ID!): Game!
  sets: [Set!]!
}

# Mutations
input GuessInput {
  gameId: ID!
  playerId: ID!
  guess: Float!
}

input BetInput {
  gameId: ID!
  playerId: ID!
  amount: Int!
}

input PlayerInput {
  gameId: ID!
  playerName: String!
}

input QuestionInput {
  question: String!
  answer: Float!
  hints: [String!]!
  explanation: String
}

type Mutation {
  createGame(setNames: [String!]!): Game!
  startGame(gameId: ID!): Boolean!
  addPlayer(input: PlayerInput!): Player!
  addGuess(input: GuessInput!): Boolean!
  placeBet(input: BetInput!): Boolean!
  uploadQuestions(
    questions: [QuestionInput!]!
    setName: String!
    isPrivate: Boolean!
  ): Boolean!
}

type Subscription {
  gameUpdated(gameId: ID!, hash: String!): Game
}
