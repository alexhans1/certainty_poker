# Enums
enum QuestionTypes {
  NUMERICAL
  MULTIPLE_CHOICE
  DATE
  GEO
}

enum BettingStates {
  CHECKED
  CALLED
  RAISED
}

# Types
type Game {
  id: ID!
  players: [Player!]!
  questionRounds: [QuestionRound!]!
  dealerId: ID!
  questions: [Question]!
  isOver: Boolean!
}

type Player {
  id: ID!
  money: Int!
  name: String!
  game: Game!
  isDead: Boolean!
  bettingState: BettingStates
}

type GeoCoordinate {
  longitude: Float!
  latitude: Float!
  toleranceRadius: Float
}

type Answer {
  numerical: Float
  geo: GeoCoordinate
}

type QuestionRoundResult {
  playerId: ID!
  changeInMoney: Int!
}

type QuestionRound {
  game: Game!
  question: Question
  guesses: [Guess!]!
  bettingRounds: [BettingRound!]!
  foldedPlayerIds: [ID!]!
  isOver: Boolean!
  isShowdown: Boolean!
  results: [QuestionRoundResult!]
}

type Question {
  id: ID!
  type: QuestionTypes!
  question: String!
  answer: Answer!
  alternatives: [String!]
  hiddenAlternatives: [String!]
  hints: [String!]!
  explanation: String
  toleranceRadius: Float
}

type Guess {
  guess: Answer!
  playerId: ID!
  difference: Float
}

type BettingRound {
  questionRound: QuestionRound!
  bets: [Bet!]!
  currentPlayer: Player!
}

type Bet {
  playerId: ID!
  amount: Int!
}

type Set {
  setName: String!
  numberOfQuestions: Int!
  isPrivate: Boolean!
  language: String!
}

# Queries
type Query {
  game(gameId: ID!): Game!
  sets(setName: String): [Set!]!
}

# Mutations
input GeoCoordinateInput {
  longitude: Float!
  latitude: Float!
  toleranceRadius: Float
}

input AnswerInputType {
  numerical: Float
  geo: GeoCoordinateInput
}

input GuessInput {
  gameId: ID!
  playerId: ID!
  guess: AnswerInputType!
}

input BetInput {
  gameId: ID!
  playerId: ID!
  amount: Int!
}

input PlayerInput {
  gameId: ID!
  playerName: String!
}

input QuestionInput {
  question: String!
  type: QuestionTypes!
  answer: AnswerInputType!
  alternatives: [String!]
  hints: [String!]!
  explanation: String
}

type Mutation {
  createGame(setNames: [String!]!): Game!
  startGame(gameId: ID!): Boolean!
  addPlayer(input: PlayerInput!): Player!
  removePlayer(gameId: ID!, playerId: ID!): Boolean!
  addGuess(input: GuessInput!): Boolean!
  placeBet(input: BetInput!): Boolean!
  uploadQuestions(
    questions: [QuestionInput!]!
    setName: String!
    isPrivate: Boolean!
    language: String!
  ): Boolean!
}

type Subscription {
  gameUpdated(gameId: ID!, hash: String!): Game
}
